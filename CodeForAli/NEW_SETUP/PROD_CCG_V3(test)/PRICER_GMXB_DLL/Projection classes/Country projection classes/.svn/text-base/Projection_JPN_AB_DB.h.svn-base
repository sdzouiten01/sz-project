#pragma once
#include "stdafx.h"
#include "Projection classes/Guarantee projection classes/Projection_AB_DB.h"
#include "Projection classes/Country projection classes/Projection_JPN.h"

using namespace std;

class Projection_JPN_AB_DB : public Projection_AB_DB, public Projection_JPN
{

public:	
	Projection_JPN_AB_DB(const vector<vector <int>>& i_s_a,const vector<vector <int>>& f_s_a,
					const char* tables, bool generate_dbg_files, const string& dbg_file_path, 
					const int t_high_shorter, bool l_longevity_tables, int time_step):
		Projection(i_s_a, f_s_a,  tables, generate_dbg_files, dbg_file_path, t_high_shorter, l_longevity_tables, time_step),
		Projection_AB_DB(i_s_a, f_s_a, tables, generate_dbg_files, dbg_file_path,  t_high_shorter, l_longevity_tables, time_step),
		Projection_JPN(i_s_a, f_s_a,  tables, generate_dbg_files, dbg_file_path, t_high_shorter, l_longevity_tables, time_step)
	{
	}

	double dynamic_lapse_rate_axa(int t)
	{
			int pol_yr = (int)(this->timing_items[t][POL_YEAR]);
			double lapse_rate_min = this->lapse_rates->search((int)pol_yr, 1)/100;
			double lapse_rate_base = this->lapse_rates->search((int)pol_yr, 2)/100;
			
			if ( t == 1 )
			{
				main_proj_array[t-1][GMAB_RATCHET_BASE] = this->model_point->gmab_ratchet_valn;	
				main_proj_array[t-1][GMAB_ROLLUP_BASE] = this->model_point->gmab_rollup_valn;	
			}

			/* ITM calculation */
			if(max(main_proj_array[t-1][GMAB_RATCHET_BASE], main_proj_array[t-1][GMAB_ROLLUP_BASE]) > SMALL_DOUBLE)
				main_proj_array[t][ITM] = 1 - main_proj_array[t][AV_E_BEF]
											/ max(main_proj_array[t-1][GMAB_RATCHET_BASE],main_proj_array[t-1][GMAB_ROLLUP_BASE]) ;
			else
				main_proj_array[t][ITM] = 0.0;
			
			double dlf = this->lapse_rates->search(1, 4)/100;
			if (main_proj_array[t][ITM] > this->lapse_rates->search(4, 3)/100)
			{
				dlf = this->lapse_rates->search(5, 4)/100;
			}
			else if (main_proj_array[t][ITM] > this->lapse_rates->search(3, 3)/100)
			{
				dlf = this->lapse_rates->search(4, 4)/100;
			}
			else if (main_proj_array[t][ITM] > this->lapse_rates->search(2, 3)/100)
			{
				dlf = this->lapse_rates->search(3, 4)/100;
			}
			else if (main_proj_array[t][ITM] > this->lapse_rates->search(1, 3)/100)
			{
				dlf = this->lapse_rates->search(2, 4)/100;
			}
			main_proj_array[t][LAPSE_RATE] = max(lapse_rate_min,lapse_rate_base*dlf);
			return max(lapse_rate_min,lapse_rate_base*dlf);
	}
};
	

