#ifndef __MODEL_POINT_DEU_IADB05_H_
#define __MODEL_POINT_DEU_IADB05_H_

#include "../Model_Point.h"
#include "model_point_head_DEU_IADB05.h"
#include "../../Projection classes/Country projection classes/head_DEU.h"

using namespace std;

class Model_Point_DEU_IADB05 : public Model_Point
{
public:

	///////////////////////////Information from inforce ////////////////////////////////
	///////////////////////////////////////////////////////////////////////////////////
	double    Age_at_valn;
	double    Duration_valn;
	string    Prod_code;
	string    Group;
	string    Sex;
	double    Prem_curr;
	double    Prem_paid;
	double    Av_valn_index0;
	double    Av_valn_index1;
	double    Av_valn_index2;
	double    Av_valn_index3;
	double    Av_valn_index4;
	double    Av_valn_index5;
	double    Av_valn_index6;
	double    Av_valn_index7;
	double    Av_valn_index8;
	double    Av_valn_index9;
	double    Av_valn_index10;
	double    Av_valn_index11;
	double    Target_av_split_valn_index0;
	double    Target_av_split_valn_index1;
	double    Target_av_split_valn_index2;
	double    Target_av_split_valn_index3;
	double    Target_av_split_valn_index4;
	double    Target_av_split_valn_index5;
	double    Target_av_split_valn_index6;
	double    Target_av_split_valn_index7;
	double    Target_av_split_valn_index8;
	double    Target_av_split_valn_index9;
	double    Target_av_split_valn_index10;
	double    Target_av_split_valn_index11;
	double    Gmab_rollup_valn;
	double    Gmdb_rollup_valn;
	double    Gmib_rollup_valn;
	double    Gmxb_guaranted_cost;
	double    Gmxb_management_cost;
	double    Gmxb_EHC_cost;
	double    Rollup_rate_valn;
	int		  Distribution_channel;
	int       Deferment_age;
	int       Prem_duration;
	double    Prem_hedge_charge;
	//double    Commission_charges;
	int       Tax_layer;
	int       Payt_freq;
	double    Prem_fixed_fee;
	double    Paidup_fixed_fee;
	double    Last_year_bonus;
	//int       Prem_elapsed_months;
	int       Gpp;
	int       Riester_type;
	int       Abrufphase;
	//double    Acqu_ch_t0;
	//double    Acqu_ch_t1;
	//double    Acqu_ch_t2;
	//double    Acqu_ch_t3;
	//double    Acqu_ch_t4;
	//double    Acqu_ch_t5;
	//double    Acqu_ch_t6;
	//double    Acqu_ch_t7;
	//double    Acqu_ch_t8;
	//double    Acqu_ch_t9;
	double    Tot_prem;
	double    Av_add;
	double    Hc_add;
	double    IB_add;
	double    Sum_prem_add;
	//int		  Pay_months;
	//int       Pay_status;
	double    Hc_paid_premium;
	double    Hc_av_brutto_add;
	double    Hc_add_paid_premium;
	double    Hc_av_brutto;
	 double guaranteed_interest_rate ;
	 double guaranteed_interest_rate_paidup;

	///////////////////////////Calculated Information ////////////////////////////////
	///////////////////////////////////////////////////////////////////////////////////
	int Calc_Valn_month;
	int Calc_Valn_year;
	int Calc_Age_at_issue_date;
	int Calc_Gender;
	double Calc_Management_fees;
	int Calc_Lapse_duration_group;
	int Calc_Premium_duration;
	double Calc_Yearly_premium;
	double Calc_AV0_base_contract;
	double Calc_BB0_base_contract;
	double Calc_PP0_base_contract;
	double Calc_DB_modification;
	int Calc_Elapsed_month_valn_date;
	int Calc_Modulo_elapsed_month_valn_date;
	double Calc_Prorata_valn_date;
	double Calc_Last_year_sate_bonus;
	int Calc_Indicator_bonus;
	int Calc_Indicator_istsol;
	double Calc_Guaranted_AB1_gross_return;
	double Calc_Guaranted_AB2_gross_return;
	int Calc_Min_dur_AB2;
	double Calc_Election_fonds;
	double Calc_Guaranted_DB;
	double Calc_Guaranted_IB_gross_retrun;
	double Calc_Guaranted_IB_fonds;
	double Calc_Interest_IB_fonds_annuity;
	double Calc_Guaranted_IB_rollup;
	double Calc_Interest_Guaranted_annuity;
	double Calc_Interest_Guaranted_annuity_paidup;
	int Calc_lapse_indicator;
	int Calc_Unisex;
	int Calc_Dynamic_paidup;
	int Calc_Dynamic_lapse;
	int Calc_Table_election;
	double Calc_Admin_loading_beta;
	double Calc_Actual_guar_AB_gross_return;
	/*double Calc_Otm_current_1;
	double Calc_Otm_current_2;
	double Calc_Otm_current_3;
	double Calc_Otm_current_4;
	double Calc_Otm_current_5;
	double Calc_Otm_current_6;
	double Calc_Otm_current_7;
	double Calc_Otm_current_8;*/
	double Calc_Gross_premium;
	double Calc_Administration_charges;
	double Calc_Fixed_fees;
	double Calc_Commission_repayment;
	double Calc_Hedge_fees_on_premium;
	double Calc_Hedge_fees_on_sum_of_premiums;
	double Calc_prorata_decompositions;
	double Calc_Premium_prorata_factor;
	double Calc_Effect_on_AV;
	double Calc_Effect_on_AB;
	int Calc_Bonus_indicator;
	int Calc_T_Max;
	double Calc_Total_account_value;
	double Calc_Total_account_value_add;


	 double Const_Hc_BS_fac;
	 double Const_HC_BS_fac_SB;
	 double Const_SB_beta;
	 double Const_SB_alpha;
	 int Const_Max_election_age;
	 int Const_Omega;
	 int Const_Lapses_Delay;
	 double Const_Dynamic_paidup_delay;
	 double Const_Instant_lapse;
	 double Const_First_year_lapse;
	 double Const_Reduced_rollup;

	/*stat inforces*/
	double realized_RRC_X;
	double admin_charges_X;
	double upfront_g_c_X; 
	
	 int year_last_bonus;
	 char * issue_date;
	 int issue_day;
	 int issue_month;
	 int issue_year_inforce;
	 char * last_premium_date;
	 int last_premium_day;
	 int last_premium_month;
	 int last_premium_year;

	 //HEDGE EFFECTIVENESS
	 int Calc_Pol_Dur_Year_0_M;
	 int Calc_Pol_Dur_Month_0_M;
	 int Calc_Pol_Dur_Month_1_M;
	 int Calc_Pol_Dur_Year_1_M;
	 double Calc_Rebates_M;
	 int Calc_Indicator_Bonus_Period_1;
	 int Calc_Indicator_Bonus_Period_2;
	 double Calc_Bonus_Weight;
	 int Calc_Shift_acquisition_cost_vector;
	

	virtual ~Model_Point_DEU_IADB05(){}
	
	Model_Point_DEU_IADB05(vector<string>& row, int rank, Product_configuration& product_conf,
							Scenario_configuration& scenario_config):Model_Point()
	{	
		// Initialize the pv table for delta shock
		this->index_shock_size = scenario_config.get_index_shock_array().size();
		this->index_shock_pvs = new double* [this->index_shock_size];
		// initialize the pv table
		for (int i = 0; i < this->index_shock_size; i++)
		{
			this->index_shock_pvs[i] = new double[TOTAL_OUTPUT_COLUMNS_DEU];
			for (int j=0 ; j < TOTAL_OUTPUT_COLUMNS_DEU; j++)
				this->index_shock_pvs[i][j] = 0.;
		}
		// Initialise pv for lapse shocks
		this->lapse_size = scenario_config.get_lapse_mult().size();
		this->pv_lapse = new double* [this->lapse_size];
		
		for (int i = 0; i < this->lapse_size; i++)
		{
			this->pv_lapse[i] = new double[TOTAL_OUTPUT_COLUMNS_DEU];
			for (int j=0 ; j < TOTAL_OUTPUT_COLUMNS_DEU; j++)
				this->pv_lapse[i][j] = 0.;
		}
		// Initialise pv for Election shocks
		this->election_size = scenario_config.get_election_mult().size();
		this->pv_election = new double* [this->election_size];
		
		for (int i = 0; i < this->election_size; i++)
		{
			this->pv_election[i] = new double[TOTAL_OUTPUT_COLUMNS_DEU];
			for (int j=0 ; j < TOTAL_OUTPUT_COLUMNS_DEU; j++)
				this->pv_election[i][j] = 0.;
		}
		// Initialise pv for paidup shocks
		this->paidup_size = scenario_config.get_paidup_mult().size();
		this->pv_paidup = new double* [this->paidup_size];
		for (int i = 0; i < this->paidup_size; i++)
		{
			this->pv_paidup[i] = new double[TOTAL_OUTPUT_COLUMNS_DEU];
			for (int j=0 ; j < TOTAL_OUTPUT_COLUMNS_DEU; j++)
				this->pv_paidup[i][j] = 0.;
		}
		// Initialise pv for mortality shocks
		this->mortality_size = scenario_config.get_mortality_mult().size();
		this->pv_mortality = new double* [this->mortality_size];
		
		for (int i = 0; i < this->mortality_size; i++)
		{
			this->pv_mortality[i] = new double[TOTAL_OUTPUT_COLUMNS_DEU];
			for (int j=0 ; j < TOTAL_OUTPUT_COLUMNS_DEU; j++)
				this->pv_mortality[i][j] = 0.;
		}
		// Initialise pv for longevity
		this->longevity_size = 1;
		this->pv_longevity = new double* [this->longevity_size];
		
		for (int i = 0; i < this->longevity_size; i++)
		{
			this->pv_longevity[i] = new double[TOTAL_OUTPUT_COLUMNS_DEU];
			for (int j=0 ; j < TOTAL_OUTPUT_COLUMNS_DEU; j++)
				this->pv_longevity[i][j] = 0.;
		}
		this->mp_position_in_file = rank;

		this->initialise_mp_from_inforce(row);
		this->load_longstaff = product_conf.is_longstaff();
		this->load_model_point_funds = product_conf.is_projection_by_fund();
		this->parse_fund_line(row[row.size() - 1], product_conf);
		this->parse_fund_line_stat(row[row.size() - 1]);
	}

	Model_Point_DEU_IADB05(Model_Point_DEU_IADB05 * mp, int index_shock_size_in, int fund_shock_size_in):Model_Point()
	{
		this->get_timestamp();
		this->HE_initialise_mp_from_inforce(mp);
		this->mp_position_in_file = mp->mp_position_in_file;
		this->load_longstaff = 0;
		this->load_model_point_funds = 0;
	}


	void initialise_mp_from_inforce(vector<string>& row)
	{
		product = row[PRODUCT];
		group = row[GROUP];
		policy_id = row[POLICY_ID];
		Age_at_valn           = atof(row[AGE_VALN].c_str());
		Duration_valn           = atof(row[DURATION].c_str());
		Prod_code           = row[PROD_TYPE].c_str();
		Sex           = row[SEX].c_str();
		Group           = row[GROUP].c_str();
		Prem_curr           = atof(row[PREM_CURR].c_str());
		Prem_paid           = atof(row[PREM_PAID].c_str());
		Av_valn_index0           = atof(row[AV_INDEX_0].c_str());
		Av_valn_index1           = atof(row[AV_INDEX_1].c_str());
		Av_valn_index2           = atof(row[AV_INDEX_2].c_str());
		Av_valn_index3           = atof(row[AV_INDEX_3].c_str());
		Av_valn_index4           = atof(row[AV_INDEX_4].c_str());
		Av_valn_index5           = atof(row[AV_INDEX_5].c_str());
		Av_valn_index6           = atof(row[AV_INDEX_6].c_str());
		Av_valn_index7           = atof(row[AV_INDEX_7].c_str());
		Av_valn_index8           = atof(row[AV_INDEX_8].c_str());
		Av_valn_index9           = atof(row[AV_INDEX_9].c_str());
		Av_valn_index10           = atof(row[AV_INDEX_10].c_str());
		Av_valn_index11           = atof(row[AV_INDEX_11].c_str());
		Target_av_split_valn_index0           = atof(row[SPLIT_INDEX_0].c_str());
		Target_av_split_valn_index1           = atof(row[SPLIT_INDEX_1].c_str());
		Target_av_split_valn_index2           = atof(row[SPLIT_INDEX_2].c_str());
		Target_av_split_valn_index3           = atof(row[SPLIT_INDEX_3].c_str());
		Target_av_split_valn_index4           = atof(row[SPLIT_INDEX_4].c_str());
		Target_av_split_valn_index5           = atof(row[SPLIT_INDEX_5].c_str());
		Target_av_split_valn_index6           = atof(row[SPLIT_INDEX_6].c_str());
		Target_av_split_valn_index7           = atof(row[SPLIT_INDEX_7].c_str());
		Target_av_split_valn_index8           = atof(row[SPLIT_INDEX_8].c_str());
		Target_av_split_valn_index9           = atof(row[SPLIT_INDEX_9].c_str());
		Target_av_split_valn_index10           = atof(row[SPLIT_INDEX_10].c_str());
		Target_av_split_valn_index11           = atof(row[SPLIT_INDEX_11].c_str());
		Gmab_rollup_valn           = atof(row[GMAB_ROLLUP_VALN].c_str());
		Gmdb_rollup_valn           = atof(row[GMDB_ROLLUP_VALN].c_str());
		Gmib_rollup_valn           = atof(row[GMIB_ROLLUP_VALN].c_str());
		Gmxb_guaranted_cost           = atof(row[GMXB_G_C].c_str())/100.;
		Gmxb_management_cost           = atof(row[GMXB_M_C].c_str())/100.;
		Gmxb_EHC_cost           = atof(row[GMXB_H_C].c_str());
		Rollup_rate_valn           = atof(row[GMXB_ROLLUP_RATE_1].c_str())/100.;
		Distribution_channel           = atoi(row[DISTRIB_CHANEL].c_str());
		Deferment_age           = atoi(row[ELECTION_AGE].c_str());
		Prem_duration           = atoi(row[PREM_DUR].c_str());
		Prem_hedge_charge           = atof(row[FEE_RP].c_str())/100.;
		Commission_charges           = atof(row[ACQUIS_CHARGE].c_str());
		Tax_layer           = atoi(row[LAYER_TAXATION].c_str());
		Payt_freq           = atoi(row[PAYMENT_FREQ].c_str());
		Prem_fixed_fee           = atof(row[ACT_POL_FEE].c_str());
		Paidup_fixed_fee           = atof(row[PAIDUP_POL_FEE].c_str());
		Last_year_bonus           = atof(row[LASTYEAR_BONUS].c_str());
		Prem_elapsed_months           = atoi(row[LAST_PREMIUM_INFORMATION].c_str());
		Gpp           = atoi(row[GPP].c_str());
		Riester_type           = atoi(row[PRODUCT_TYPE].c_str());
		Abrufphase           = atoi(row[RIESTER_ABRUFPHASE_INDICATOR].c_str());
		Acqu_ch_t0           = atof(row[ACQUISITION_CHARGE_ACTUAL_Y_0].c_str());
		Acqu_ch_t1           = atof(row[ACQUISITION_CHARGE_ACTUAL_Y_1].c_str());
		Acqu_ch_t2           = atof(row[ACQUISITION_CHARGE_ACTUAL_Y_2].c_str());
		Acqu_ch_t3           = atof(row[ACQUISITION_CHARGE_ACTUAL_Y_3].c_str());
		Acqu_ch_t4           = atof(row[ACQUISITION_CHARGE_ACTUAL_Y_4].c_str());
		Acqu_ch_t5           = atof(row[ACQUISITION_CHARGE_ACTUAL_Y_5].c_str());
		Acqu_ch_t6           = atof(row[ACQUISITION_CHARGE_ACTUAL_Y_6].c_str());
		Acqu_ch_t7           = atof(row[ACQUISITION_CHARGE_ACTUAL_Y_7].c_str());
		Acqu_ch_t8           = atof(row[ACQUISITION_CHARGE_ACTUAL_Y_8].c_str());
		Acqu_ch_t9           = atof(row[ACQUISITION_CHARGE_ACTUAL_Y_9].c_str());
		Tot_prem           = atof(row[TOTAL_PREMIUM].c_str());
		Av_add           = atof(row[AV_ADD].c_str());
		Hc_add           = atof(row[HEDGE_COST_ADD].c_str())/100.;
		IB_add           = atof(row[IB_ADD].c_str());
		Sum_prem_add           = atof(row[SUM_PREM_ADD].c_str());
		Pay_months           = atoi(row[PAYMENT_MONTH].c_str());
		Pay_status           = atoi(row[PAYMENT_STATUS].c_str());
		Hc_paid_premium           = max(0.,atof(row[HC_PP_X].c_str())/100.);
		Hc_av_brutto_add           = atof(row[GMXB_G_C_GROSS_ADD].c_str())/100.;
		Hc_add_paid_premium           = atof(row[HC_PP_ADD_X].c_str())/100.;
		Hc_av_brutto           = atof(row[GMXB_G_C_GROSS].c_str())/100.;
		av_if_array[0] = atof(row[AV_VALN_INDEX0].c_str());
		av_if_array[1] = atof(row[AV_VALN_INDEX1].c_str());
		av_if_array[2] = atof(row[AV_VALN_INDEX2].c_str());
		av_if_array[3] = atof(row[AV_VALN_INDEX3].c_str());
		av_if_array[4] = atof(row[AV_VALN_INDEX4].c_str());
		av_if_array[5] = atof(row[AV_VALN_INDEX5].c_str());
		av_if_array[6] = atof(row[AV_VALN_INDEX6].c_str());
		av_if_array[7] = atof(row[AV_VALN_INDEX7].c_str());
		av_if_array[8] = atof(row[AV_VALN_INDEX8].c_str());
		av_if_array[9] = atof(row[AV_VALN_INDEX9].c_str());
		av_if_array[10] = atof(row[AV_VALN_INDEX10].c_str());
		av_if_array[11] = atof(row[AV_VALN_INDEX11].c_str());
		av_split_prop_array[0] = atof(row[SPLIT_INDEX_0].c_str());
		av_split_prop_array[1] = atof(row[SPLIT_INDEX_1].c_str());
		av_split_prop_array[2] = atof(row[SPLIT_INDEX_2].c_str());
		av_split_prop_array[3] = atof(row[SPLIT_INDEX_3].c_str());
		av_split_prop_array[4] = atof(row[SPLIT_INDEX_4].c_str());
		av_split_prop_array[5] = atof(row[SPLIT_INDEX_5].c_str());
		av_split_prop_array[6] = atof(row[SPLIT_INDEX_6].c_str());
		av_split_prop_array[7] = atof(row[SPLIT_INDEX_7].c_str());
		av_split_prop_array[8] = atof(row[SPLIT_INDEX_8].c_str());
		av_split_prop_array[9] = atof(row[SPLIT_INDEX_9].c_str());
		av_split_prop_array[10] = atof(row[SPLIT_INDEX_10].c_str());
		av_split_prop_array[11] = atof(row[SPLIT_INDEX_11].c_str());
		Prem_duration           *=(Pay_status==1);
		
		/*stat inforces*/
		realized_RRC_X = atof(row[RRC_REALIZED].c_str());
		admin_charges_X = atof(row[ADMIN_CHARGES].c_str());
		upfront_g_c_X = atof(row[UPFRONT_G_C].c_str());
		//New inforce
		year_last_bonus = atof(row[YEAR_LAST_BONUS].c_str());

		issue_date = (char*) (row[ISSUE_DATE].c_str());
		issue_day = atoi(strtok(issue_date, "/"));
		issue_month = atoi(strtok(NULL, "/"));
		issue_year_inforce = atoi(strtok(NULL, "/"));

		last_premium_date = (char*) (row[LAST_PREMIUM_DATE].c_str());
		last_premium_day = atoi(strtok(last_premium_date, "/"));
		last_premium_month = atoi(strtok(NULL, "/"));
		last_premium_year = atoi(strtok(NULL, "/"));
		guaranteed_interest_rate = atof(row[GUARANTEED_INTEREST_RATE].c_str())/100.;
		guaranteed_interest_rate_paidup = atof(row[GUARANTEED_INTEREST_RATE_PAID_UP].c_str())/100.;

	}
	void HE_initialise_mp_from_inforce(Model_Point * m_p)
	{
		Model_Point_DEU_IADB05 * mp = dynamic_cast<Model_Point_DEU_IADB05*>(m_p);

		Age_at_valn             = mp-> Age_at_valn;
		Duration_valn             = mp-> Duration_valn;
		Prod_code             = mp-> Prod_code;
		Sex             = mp-> Sex;
		Group             = mp-> Group;
		Prem_curr             = mp-> Prem_curr;
		Prem_paid             = mp-> Prem_paid;
		Av_valn_index0             = mp-> Av_valn_index0;
		Av_valn_index1             = mp-> Av_valn_index1;
		Av_valn_index2             = mp-> Av_valn_index2;
		Av_valn_index3             = mp-> Av_valn_index3;
		Av_valn_index4             = mp-> Av_valn_index4;
		Av_valn_index5             = mp-> Av_valn_index5;
		Av_valn_index6             = mp-> Av_valn_index6;
		Av_valn_index7             = mp-> Av_valn_index7;
		Av_valn_index8             = mp-> Av_valn_index8;
		Av_valn_index9             = mp-> Av_valn_index9;
		Av_valn_index10             = mp-> Av_valn_index10;
		Av_valn_index11             = mp-> Av_valn_index11;
		Target_av_split_valn_index0             = mp-> Target_av_split_valn_index0;
		Target_av_split_valn_index1             = mp-> Target_av_split_valn_index1;
		Target_av_split_valn_index2             = mp-> Target_av_split_valn_index2;
		Target_av_split_valn_index3             = mp-> Target_av_split_valn_index3;
		Target_av_split_valn_index4             = mp-> Target_av_split_valn_index4;
		Target_av_split_valn_index5             = mp-> Target_av_split_valn_index5;
		Target_av_split_valn_index6             = mp-> Target_av_split_valn_index6;
		Target_av_split_valn_index7             = mp-> Target_av_split_valn_index7;
		Target_av_split_valn_index8             = mp-> Target_av_split_valn_index8;
		Target_av_split_valn_index9             = mp-> Target_av_split_valn_index9;
		Target_av_split_valn_index10             = mp-> Target_av_split_valn_index10;
		Target_av_split_valn_index11             = mp-> Target_av_split_valn_index11;
		Gmab_rollup_valn             = mp-> Gmab_rollup_valn;
		Gmdb_rollup_valn             = mp-> Gmdb_rollup_valn;
		Gmib_rollup_valn             = mp-> Gmib_rollup_valn;
		Gmxb_guaranted_cost             = mp-> Gmxb_guaranted_cost;
		Gmxb_management_cost             = mp-> Gmxb_management_cost;
		Gmxb_EHC_cost             = mp-> Gmxb_EHC_cost;
		Rollup_rate_valn             = mp-> Rollup_rate_valn;
		Distribution_channel             = mp-> Distribution_channel;
		Deferment_age             = mp-> Deferment_age;
		Prem_duration             = mp-> Prem_duration;
		Prem_hedge_charge             = mp-> Prem_hedge_charge;
		Commission_charges             = mp-> Commission_charges;
		Tax_layer             = mp-> Tax_layer;
		Payt_freq             = mp-> Payt_freq;
		Prem_fixed_fee             = mp-> Prem_fixed_fee;
		Paidup_fixed_fee             = mp-> Paidup_fixed_fee;
		Last_year_bonus             = mp-> Last_year_bonus;
		Prem_elapsed_months             = mp-> Prem_elapsed_months;
		Gpp             = mp-> Gpp;
		Riester_type             = mp-> Riester_type;
		Abrufphase             = mp-> Abrufphase;
		Acqu_ch_t0             = mp-> Acqu_ch_t0;
		Acqu_ch_t1             = mp-> Acqu_ch_t1;
		Acqu_ch_t2             = mp-> Acqu_ch_t2;
		Acqu_ch_t3             = mp-> Acqu_ch_t3;
		Acqu_ch_t4             = mp-> Acqu_ch_t4;
		Acqu_ch_t5             = mp-> Acqu_ch_t5;
		Acqu_ch_t6             = mp-> Acqu_ch_t6;
		Acqu_ch_t7             = mp-> Acqu_ch_t7;
		Acqu_ch_t8             = mp-> Acqu_ch_t8;
		Acqu_ch_t9             = mp-> Acqu_ch_t9;
		Tot_prem             = mp-> Tot_prem;
		Av_add             = mp-> Av_add;
		Hc_add             = mp-> Hc_add;
		IB_add             = mp-> IB_add;
		Sum_prem_add             = mp-> Sum_prem_add;
		Pay_status             = mp-> Pay_status;
		Hc_paid_premium             = max(0.,mp-> Hc_paid_premium);
		Hc_av_brutto_add             = mp-> Hc_av_brutto_add;
		Hc_add_paid_premium             = mp-> Hc_add_paid_premium;
		Hc_av_brutto             = mp-> Hc_av_brutto;
				av_if_array[0]      = mp->av_if_array[0];
		av_if_array[1]      = mp->av_if_array[1];
		av_if_array[2]      = mp->av_if_array[2];
		av_if_array[3]      = mp->av_if_array[3];
		av_if_array[4]      = mp->av_if_array[4];
		av_if_array[5]      = mp->av_if_array[5];
		av_if_array[6]      = mp->av_if_array[6];
		av_if_array[7]      = mp->av_if_array[7];
		av_if_array[8]      = mp->av_if_array[8];
		av_if_array[9]      = mp->av_if_array[9];
		av_if_array[10]     = mp->av_if_array[10];
		av_if_array[11]     = mp->av_if_array[11];
        av_split_prop_array[0] = mp->av_split_prop_array[0];
		av_split_prop_array[1] = mp->av_split_prop_array[1];
		av_split_prop_array[2] = mp->av_split_prop_array[2];
		av_split_prop_array[3] = mp->av_split_prop_array[3];
		av_split_prop_array[4] = mp->av_split_prop_array[4];
		av_split_prop_array[5] = mp->av_split_prop_array[5];
		av_split_prop_array[6] = mp->av_split_prop_array[6];
		av_split_prop_array[7] = mp->av_split_prop_array[7];
		av_split_prop_array[8] = mp->av_split_prop_array[8];
		av_split_prop_array[9] = mp->av_split_prop_array[9];
		av_split_prop_array[10] = mp->av_split_prop_array[10];
		av_split_prop_array[11] = mp->av_split_prop_array[11];
		Pay_months             = mp-> Pay_months;
		/*stat inforces*/
		realized_RRC_X			= mp->realized_RRC_X;
		admin_charges_X			= mp->admin_charges_X;
		upfront_g_c_X			= mp->upfront_g_c_X	;
		year_last_bonus = mp->year_last_bonus;

		issue_date = mp->issue_date;
		issue_day = mp->issue_day;
		issue_month = mp->issue_month;
		issue_year_inforce = mp->issue_year_inforce;

		last_premium_date		= mp->last_premium_date;
		last_premium_day		= mp->last_premium_day;
		last_premium_month		= mp->last_premium_month;
		last_premium_year		= mp->last_premium_year;
		guaranteed_interest_rate = mp->guaranteed_interest_rate;
		guaranteed_interest_rate_paidup = mp->guaranteed_interest_rate_paidup;

		

	}
	int get_total_pv_columns_number()
	{
		return TOTAL_OUTPUT_COLUMNS_DEU;
	}
};

#endif
