#pragma once
#include "stdafx.h"
#include "Projection_DEU_AB_IB.h"

class Projection_DEU_AB_IB_2 : public Projection_DEU_AB_IB
{

public:
	GMXB_Assumption_Table *riester_guaranted_anuity_factor;
	double ger_factor_prem_hc_bs;
	double ger_factor_bonus_hc_bs;
	double guaranted_annuity_factor;
	//double Bonus[SUBACCT_MAX_PERIOD +1];
	int gmib_max_age;
	int gmdb_max_value;
	int Shift_acquisition_vector;
	double a_g_s;
	Projection_DEU_AB_IB_2( const vector<vector <int>>& i_s_a,const vector<vector <int>>& f_s_a, 
					const char * tables, bool generate_dbg_files,const string& debug_file_path,
					const int t_high_shorter, bool l_longevity_tables):
	Projection_DEU_AB_IB(i_s_a, f_s_a, tables, generate_dbg_files,debug_file_path,t_high_shorter, l_longevity_tables)
	{
		if(t_high_shorter != t_high)
		{
			char message[MAX_LENGTH_MESSAGE_EXCEPTION];
			sprintf_s(message, " Tt_high_shorter != t_high (60)");
			throw new GMXBException(message);	
		}
		ger_factor_prem_hc_bs=atof(this->Assumption->assump->search("ger_factor_prem_hc_bs").c_str());
		ger_factor_bonus_hc_bs=atof(this->Assumption->assump->search("ger_factor_bonus_hc_bs").c_str());
		riester_guaranted_anuity_factor = new GMXB_Assumption_Table(tables , "riester_guaranted_anuity_factor");
		gmib_max_age = atoi(this->Assumption->assump->search("gmib_max_age").c_str());
		gmdb_max_value = atoi(this->Assumption->assump->search("gmdb_max_value").c_str());
	}
	~Projection_DEU_AB_IB_2()
	{
		delete this->riester_guaranted_anuity_factor;
	}
	///////////////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////////////
	//////////////////////////////Others functions needed ////////////////////////////
	//////////////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////////////
	void project_t(int t, double ** pvs, int curr_shock_nb, double lapse_mult, double mortality_mult, bool shock_av) {}
	void initialise_index_map(){}
	///////////////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////////////
	/////////////////Initialize projection with timing items vector //////////////////
	//////////////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////////////
	virtual void Calculate_GuaranteedAnnuity(){
		if(this->Assumption->ac_calculation=="N"){
			this->Assumption->Get_guaranteed_annuity_vector(this->model_point_DEU->riester_type,
			this->model_point_DEU->T_Max,this->model_point_DEU->deferment_age,this->timing_items_DEU[GMIB_AX_GUAR_DEU]);
			for (int t=1; t<=this->model_point_DEU->T_Max;t++){
				timing_items_DEU[GMIB_AX_GUAR_ANN_FACT][t] =this->riester_guaranted_anuity_factor->search((int)this->model_point_DEU->deferment_age,1);
			}
		}
		else{
			for (int t=1; t<=this->model_point_DEU->T_Max;t++){
				this->timing_items_DEU[GMIB_AX_GUAR_DEU][t] = a_g;
				timing_items_DEU[GMIB_AX_GUAR_ANN_FACT][t] = a_g_s;
			}
		}
	}
	virtual void Calculate_BaseLapseRate_BasePaidUpRate()
	{
		this->Assumption->Get_base_paid_up_vector(this->model_point_DEU->ger_distribution_channel,
				this->model_point_DEU->ger_lapse_dist_group,this->model_point_DEU->T_Max,timing_items_DEU[POL_YEAR_DEU],
				timing_items_DEU[PAID_UP_BASE_BEF]);

		this->Assumption->Get_base_lapse_vector(this->model_point_DEU->ger_distribution_channel,(int)this->model_point_DEU->payt_freq,
				this->model_point_DEU->ger_lapse_dist_group,this->model_point_DEU->T_Max,timing_items_DEU[POL_YEAR_DEU],
				timing_items_DEU[LAPSE_BASE_BEF]);

		int t=0;
		for( t=1; t <= this->model_point_DEU->T_Max ; t++)
		{
			if( (int)this->model_point_DEU->payt_freq == 0 ) timing_items_DEU[LAPSE_BASE_BEF][t] = 1./100. ;
			if(this->Assumption->use_paid_up=="N") timing_items_DEU[LAPSE_BASE_BEF][t] += timing_items_DEU[PAID_UP_BASE_BEF][t] ;
			
			if( (int)this->model_point_DEU->payt_freq == 0 && t==1 ) timing_items_DEU[LAPSE_BASE][t] = this->Assumption->first_year_lapse ;
			else timing_items_DEU[LAPSE_BASE][t] = timing_items_DEU[LAPSE_BASE_BEF][t];
			
			timing_items_DEU[PAID_UP_BASE][t] =timing_items_DEU[PAID_UP_BASE_BEF][t]*( (int)this->model_point_DEU->payt_freq != 0 )*(this->Assumption->use_paid_up!="N")*
				 ( (int)timing_items_DEU[POL_YEAR_DEU][t] < this->model_point_DEU->ger_prem_duration );
			timing_items_DEU[INSTANT_LAPSE_PAID_UP][t] = timing_items_DEU[PAID_UP_BASE][t] *this->Assumption->instant_lapse_future;
			timing_items_DEU[PAID_UP_BASE][t] -=  timing_items_DEU[INSTANT_LAPSE_PAID_UP][t];
			
			timing_items_DEU[LAPSE_BASE][t] +=timing_items_DEU[INSTANT_LAPSE_PAID_UP][t];
		}		
	}
	virtual void Calculate_modelling_of_first_year_premium()
	{
		total_number_decompositions=((int)this->model_point_DEU->payt_freq<1)*12+((int)this->model_point_DEU->payt_freq>=1)*(int)this->model_point_DEU->payt_freq;
		if(this->model_point_DEU->duration_valn==0.) prorata_decompositions=1.;
		else if( (int) this->model_point_DEU->ger_prem_elapsed_months>=11 && fmod(this->model_point_DEU->duration_valn,1.)<=1./12.) prorata_decompositions=2.-this->model_point_DEU->ger_prem_elapsed_months/12.;
		else prorata_decompositions=1.-this->model_point_DEU->ger_prem_elapsed_months/12.;
		remaining_decompositions=(int) ((prorata_decompositions+SMALL_DOUBLE)*total_number_decompositions);
		premium_prorata_factor=((int)this->model_point_DEU->payt_freq>=1)*remaining_decompositions;
		//Monthly duration between valuation date and last premium date and bonus Indicator
		if(this->model_point_DEU->elapsed_mths_in_valn_yr==0)
			mth_dur_val_last_prem_date=12-this->model_point_DEU->ger_prem_elapsed_months;
		else if(this->model_point_DEU->ger_prem_elapsed_months==12)
			mth_dur_val_last_prem_date=this->model_point_DEU->elapsed_mths_in_valn_yr;
		else
			mth_dur_val_last_prem_date=this->model_point_DEU->elapsed_mths_in_valn_yr-this->model_point_DEU->ger_prem_elapsed_months;

		//bonus_indicator=(( ( 5-this->model_point_DEU->Calc_Valn_month-mth_dur_val_last_prem_date+24)%12)<=(int)(prorata_decompositions*12.));
		//bonus_indicator=(( ( 5-this->model_point_DEU->Calc_Valn_month-mth_dur_val_last_prem_date+24)%12)<=(int)(prorata_decompositions*12.+SMALL_DOUBLE));

		
		indicator_five_year_premium= ( ( this->model_point_DEU->duration_valn + ( (this->model_point_DEU->duration_valn-(int)this->model_point_DEU->duration_valn)>11./12.)) <5);
	
		gross_premium=((int)this->model_point_DEU->payt_freq>0)*
			((this->model_point_DEU->age_at_valn-this->model_point_DEU->age_at_issue)<=this->model_point_DEU->ger_prem_duration)*
			premium_prorata_factor*this->model_point_DEU->prem_period_ini;
		
		administration_charges=gross_premium*this->model_point_DEU->ger_prem_admin_loading;
		fixed_fees=0.;
		if(((int)this->model_point_DEU->payt_freq>0) &&((this->model_point_DEU->age_at_valn-this->model_point_DEU->age_at_issue)<=this->model_point_DEU->ger_prem_duration))
			fixed_fees=this->model_point_DEU->ger_prem_fixed_fee*premium_prorata_factor/this->model_point_DEU->payt_freq;
		if(((int)this->model_point_DEU->payt_freq>0) &&((this->model_point_DEU->age_at_valn-this->model_point_DEU->age_at_issue)<=this->model_point_DEU->ger_prem_duration))
			Commission_repayment=min(this->model_point_DEU->commission_acct,premium_prorata_factor/this->model_point_DEU->payt_freq*this->model_point_DEU->acqu_ch_t0);

		commission_charges=Commission_repayment;
		Commission_account=0.;
		Premium_paid_net=gross_premium-administration_charges-fixed_fees-Commission_repayment;
		if(Premium_paid_net<0.) remaining_premium=Premium_paid_net;
		else remaining_premium=Premium_paid_net*(1.-this->model_point_DEU->ger_prem_hedge_charge / 100.);
		remaining_premium -=Commission_repayment*this->ger_factor_prem_hc_bs;
		
		hedge_fees_on_premium=max(0.,Premium_paid_net)*this->model_point_DEU->ger_prem_hedge_charge / 100.;
		hedge_fees_on_sum_of_premiums=Commission_repayment*this->ger_factor_prem_hc_bs;

		if ( (int)timing_items_DEU[POL_YEAR_DEU][1] <= (this->model_point_DEU->deferment_age - this->model_point_DEU->age_at_issue)){
			timing_items_DEU[GROSS_PREMIUM_BEF][1] = gross_premium; 
			timing_items_DEU[ADMIN_CHG_PREMIUM_BEF][1] =administration_charges;
			timing_items_DEU[NET_PREMIUM_BEF][1]=remaining_premium;
		}
		if(timing_items_DEU[GROSS_PREMIUM_BEF][1]!=0.)
			timing_items_DEU[ACQUI_CHARGE_PREMIUM_BEF][1]=Commission_repayment;

		timing_items_DEU[FIXED_FEE_PREMIUM_BEF][1]=fixed_fees;
		timing_items_DEU[HEDGE_FEE_PREMIUM_BEF][1] =  hedge_fees_on_premium;

		if( (int)timing_items_DEU[AGE_LAST_DEU][1] != (int)this->model_point_DEU->deferment_age)
			timing_items_DEU[HEDGE_FEE_SUM_PREMIUM_BEF][1]=hedge_fees_on_sum_of_premiums;
		
		//Benefit Base Riester IST <-> SOLL
		int elapsed_dur=(int)(this->model_point_DEU->age_at_valn-this->model_point_DEU->age_at_issue)+1;
		double premium_paid = this->model_point_DEU->gmab_valn;
		double premium_this_year = gross_premium;
		double premiums_in_later_years = this->model_point_DEU->prem_curr_ini*(this->model_point_DEU->ger_prem_duration-(elapsed_dur==0)-(elapsed_dur!=0)*elapsed_dur);
		double projected_total_premium=premiums_in_later_years+premium_this_year+premium_paid;
		double total_premium=this->model_point_DEU->tot_prem;
		double Difference=total_premium-projected_total_premium;
		if (this->model_point_DEU->prem_curr_ini==0.)
			Effect_on_AV= 0.;
		else
			Effect_on_AV= Difference*(1.-this->model_point_DEU->ger_prem_admin_loading)
				-Difference*this->model_point_DEU->ger_prem_fixed_fee/this->model_point_DEU->prem_curr_ini
				-( elapsed_dur<5)*Difference*this->model_point_DEU->acqu_ch_t0/this->model_point_DEU->prem_curr_ini
				*(1.+this->ger_factor_prem_hc_bs);
	
		Effect_on_AB=Difference;
		Effect_on_IB=0.;

		//////////////////////////////////////////////////////////////////////////////////////////////////////		
				//Commision shift
		Shift_acquisition_vector=0;
		if(this->model_point_DEU->ger_prem_elapsed_months==11 && (abs(this->model_point_DEU->duration_valn-(int)this->model_point_DEU->duration_valn)<SMALL_DOUBLE))
			Shift_acquisition_vector=1;
				//new bonus modelling
		memset(this->Bonus, 0, sizeof(this->Bonus));
		int test1=0;
		int test2=0;
		int test3=0;

		test1= ((24+5-this->model_point_DEU->last_premium_month)%12)+1;
		if( this->model_point_DEU->issue_month==7 &&  this->model_point_DEU->Calc_Valn_month == 6)
			{test2=1;}
		else if (this->model_point_DEU->issue_month==7)
			{test2=0;}
		else {test2 = (int)((prorata_decompositions+SMALL_DOUBLE)*12.);}
		
		test3= ((12-this->model_point_DEU->valn_month)%12)+1; 
		
		Next_June_belongs_to_first_proction_period= 1*(test1<=test2);

		if(test1<=test3) {Year_next_June_decomposition = this->model_point_DEU->valn_year;}
		else Year_next_June_decomposition = this->model_point_DEU->valn_year+1;
		bonus_indicator_First_period = Next_June_belongs_to_first_proction_period * (Year_next_June_decomposition > (this->model_point_DEU->year_last_bonus+1));
		
		if((this->model_point_DEU->year_last_bonus+1==Year_next_June_decomposition)
			&&(this->model_point_DEU->Calc_Valn_month+1  <  this->model_point_DEU->issue_month)
			&&(this->model_point_DEU->issue_month<=7))
		{bonus_indicator_Second_period=0;}
		else bonus_indicator_Second_period=1;

		this->model_point_DEU->Bonus_weight=0.;
		int test0= (int)(this->model_point_DEU->duration_valn)+1;
		if(this->model_point_DEU->last_year_bonus!=0.)
			this->model_point_DEU->Bonus_weight = 1.;
		else if (test0<=1)
			this->model_point_DEU->Bonus_weight = 1.;
		else if (test0<=2)
			this->model_point_DEU->Bonus_weight = 0.7;
		else if (test0<=3)
			this->model_point_DEU->Bonus_weight = 0.4;
		else 	this->model_point_DEU->Bonus_weight=0.;

		for (int t=1; t<=this->model_point_DEU->T_Max;t++)
		{
			int age_clasification_for_bonus=0;
			if((int)timing_items_DEU[AGE_LAST_DEU][t]<20) age_clasification_for_bonus=1;
			else if((int)timing_items_DEU[AGE_LAST_DEU][t]<25) age_clasification_for_bonus=2;
			else if((int)timing_items_DEU[AGE_LAST_DEU][t]<30) age_clasification_for_bonus=3;
			else if((int)timing_items_DEU[AGE_LAST_DEU][t]<35) age_clasification_for_bonus=4;
			else if((int)timing_items_DEU[AGE_LAST_DEU][t]<40) age_clasification_for_bonus=5;
			else if((int)timing_items_DEU[AGE_LAST_DEU][t]<45) age_clasification_for_bonus=6;
			else if((int)timing_items_DEU[AGE_LAST_DEU][t]<50) age_clasification_for_bonus=7;
			else if((int)timing_items_DEU[AGE_LAST_DEU][t]<55) age_clasification_for_bonus=8;
			else if((int)timing_items_DEU[AGE_LAST_DEU][t]<60) age_clasification_for_bonus=9;
			else  age_clasification_for_bonus=10;

			Bonus[t] = this->Assumption->bonus_table->search(age_clasification_for_bonus,(this->model_point_DEU->sex !="M")+1)*this->model_point_DEU->Bonus_weight;

		}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	}
	virtual void Calculate_commission_charge_premium()
	{	
		for (int t=2; t<=this->model_point_DEU->T_Max;t++)
		{
			if (timing_items_DEU[GROSS_PREMIUM_BEF][t] !=0. ){
				timing_items_DEU[ACQUI_CHARGE_PREMIUM_BEF][t]=  ((t+Shift_acquisition_vector==2)*this->model_point_DEU->acqu_ch_t1+
								(t+Shift_acquisition_vector==3)*this->model_point_DEU->acqu_ch_t2+(t+Shift_acquisition_vector==4)*this->model_point_DEU->acqu_ch_t3+
								(t+Shift_acquisition_vector==5)*this->model_point_DEU->acqu_ch_t4+(t+Shift_acquisition_vector==6)*this->model_point_DEU->acqu_ch_t5+
								(t+Shift_acquisition_vector==7)*this->model_point_DEU->acqu_ch_t6+(t+Shift_acquisition_vector==8)*this->model_point_DEU->acqu_ch_t7+
								(t+Shift_acquisition_vector==9)*this->model_point_DEU->acqu_ch_t8+(t+Shift_acquisition_vector==10)*this->model_point_DEU->acqu_ch_t9);
			}			
		}
	}
	virtual void Calculate_hedge_fee_premium(){
		double premium_bef_h_c=0.;
		for (int t=2; t<=this->model_point_DEU->T_Max;t++)
		{
			premium_bef_h_c = timing_items_DEU[GROSS_PREMIUM_BEF][t]-timing_items_DEU[ADMIN_CHG_PREMIUM_BEF][t]
						-timing_items_DEU[ACQUI_CHARGE_PREMIUM_BEF][t]-timing_items_DEU[FIXED_FEE_PREMIUM_BEF][t];
			timing_items_DEU[HEDGE_FEE_PREMIUM_BEF][t] = max(0., premium_bef_h_c  * this->model_point_DEU->ger_prem_hedge_charge / 100.);
			
			if( ((int)timing_items_DEU[AGE_LAST_DEU][t] != (int)this->model_point_DEU->deferment_age) && timing_items_DEU[GROSS_PREMIUM_BEF][t]!=0.)
				timing_items_DEU[HEDGE_FEE_SUM_PREMIUM_BEF][t] = ((t+Shift_acquisition_vector==2)*this->model_point_DEU->acqu_ch_t1+
								(t+Shift_acquisition_vector==3)*this->model_point_DEU->acqu_ch_t2+(t+Shift_acquisition_vector==4)*this->model_point_DEU->acqu_ch_t3+
								(t+Shift_acquisition_vector==5)*this->model_point_DEU->acqu_ch_t4+(t+Shift_acquisition_vector==6)*this->model_point_DEU->acqu_ch_t5+
								(t+Shift_acquisition_vector==7)*this->model_point_DEU->acqu_ch_t6+(t+Shift_acquisition_vector==8)*this->model_point_DEU->acqu_ch_t7+
								(t+Shift_acquisition_vector==9)*this->model_point_DEU->acqu_ch_t8+(t+Shift_acquisition_vector==10)*this->model_point_DEU->acqu_ch_t9)*this->ger_factor_prem_hc_bs;	
		}
	}
	virtual void Calculate_administration_charge_bonus()
	{
		for (int t=1; t<=this->model_point_DEU->T_Max;t++){
			if((int)timing_items_DEU[POL_YEAR_DEU][t]>=2) {
				if(this->model_point_DEU->ger_gpp!=1) timing_items_DEU[ADMIN_CHG_BONUS_BEF][t]=timing_items_DEU[GROSS_BONUS_BEF][t]*this->Assumption->ger_beta/100.;
				else  timing_items_DEU[ADMIN_CHG_BONUS_BEF][t]=timing_items_DEU[GROSS_BONUS_BEF][t]*(this->Assumption->ger_beta/100.- this->model_point_DEU->ger_prem_hedge_charge/100.  );
			}
		}
	}
	virtual void Calculate_commission_charge_bonus()
	{
		for (int t=1; t<=this->model_point_DEU->T_Max;t++){
			if( (int)timing_items_DEU[POL_YEAR_DEU][t] <= (int)this->model_point_DEU->ger_prem_duration){
				if(t==1){
					if(this->model_point_DEU->ger_gpp != 1 )
						timing_items_DEU[ACQUI_CHARGE_BONUS_BEF][t]=timing_items_DEU[GROSS_BONUS_BEF][t]*this->Assumption->ger_alpha/100.;
					else if (this->model_point_DEU->prem_curr_ini>0.)
						timing_items_DEU[ACQUI_CHARGE_BONUS_BEF][t]=timing_items_DEU[GROSS_STATE_BONUS][t]*((1.+ger_factor_bonus_hc_bs)*this->Assumption->ger_alpha/100.-
						(1.+ger_factor_prem_hc_bs)*((int)timing_items_DEU[POL_YEAR_DEU][t]<=6)*this->model_point_DEU->acqu_ch_t0/this->model_point_DEU->prem_curr_ini);
					else
						timing_items_DEU[ACQUI_CHARGE_BONUS_BEF][t]=timing_items_DEU[GROSS_STATE_BONUS][t]*((1.+ger_factor_bonus_hc_bs)*this->Assumption->ger_alpha/100.);
				}
				else{
					if(this->model_point_DEU->ger_gpp != 1 )
						timing_items_DEU[ACQUI_CHARGE_BONUS_BEF][t]=timing_items_DEU[GROSS_STATE_BONUS][t]*this->Assumption->ger_alpha/100.;
					else if (timing_items_DEU[GROSS_PREMIUM_BEF][t]>0.)
						timing_items_DEU[ACQUI_CHARGE_BONUS_BEF][t]=timing_items_DEU[GROSS_STATE_BONUS][t]*((1.+ger_factor_bonus_hc_bs)*this->Assumption->ger_alpha/100.-
						(1.+ger_factor_prem_hc_bs)*((int)timing_items_DEU[POL_YEAR_DEU][t]<=6)*timing_items_DEU[ACQUI_CHARGE_PREMIUM_BEF][t]/timing_items_DEU[GROSS_PREMIUM_BEF][t]);	
					else 
						timing_items_DEU[ACQUI_CHARGE_BONUS_BEF][t]=timing_items_DEU[GROSS_STATE_BONUS][t]*((1.+ger_factor_bonus_hc_bs)*this->Assumption->ger_alpha/100.);
				}
			}
		}
	}
	
	virtual void Calculate_hedge_fee_bonus()
	{
		for (int t=1; t<=this->model_point_DEU->T_Max;t++){
			timing_items_DEU[HEDGE_FEES_BONUS_BEF][t] =  ( timing_items_DEU[GROSS_BONUS_BEF][t] - timing_items_DEU[ACQUI_CHARGE_BONUS_BEF][t] - timing_items_DEU[ADMIN_CHG_BONUS_BEF][t] ) *
							this->model_point_DEU->ger_prem_hedge_charge / 100.;
			
			timing_items_DEU[HEDGE_FEES_SUM_PREM_BONUS_BEF][t] =timing_items_DEU[GROSS_BONUS_BEF][t]*this->Assumption->ger_alpha/100.*ger_factor_bonus_hc_bs;
		}
	}
	virtual void Calculate_guarantiee_initialize_IB()
	{
		timing_items_DEU[BASE_GUAR_IB_BEF][0]=this->model_point_DEU->gmib_rollup_valn - this->model_point_DEU->bb_add;
		for (int t=1; t<=this->model_point_DEU->T_Max;t++)
		{
			if ( (int)(timing_items_DEU[AGE_LAST_DEU][t]) != this->model_point_DEU->deferment_age )
			{
				timing_items_DEU[BASE_GUAR_IB_BEF][t]=max(0., timing_items_DEU[BASE_GUAR_IB_BEF][t-1] 
					+(this->model_point_DEU->riester_type==2)*(timing_items_DEU[GROSS_PREMIUM_BEF][t]+timing_items_DEU[GROSS_BONUS_BEF][t])
					+(this->model_point_DEU->riester_type!=2)*(timing_items_DEU[GROSS_PREMIUM_BEF][t]+timing_items_DEU[GROSS_BONUS_BEF][t]
						-timing_items_DEU[ADMIN_CHG_PREMIUM_BEF][t]-timing_items_DEU[ADMIN_CHG_BONUS_BEF][t]
						-timing_items_DEU[ACQUI_CHARGE_PREMIUM_BEF][t]-timing_items_DEU[ACQUI_CHARGE_BONUS_BEF][t]
						-timing_items_DEU[FIXED_FEE_PREMIUM_BEF][t]-timing_items_DEU[FIXED_FEES_BONUS_BEF][t]));
			}
			if ( ( (int)(timing_items_DEU[AGE_LAST_DEU][t]) < this->model_point_DEU->deferment_age )&&(this->model_point_DEU->riester_type!=2)
				&&(t!=1)&&(timing_items_DEU[GROSS_PREMIUM_BEF][t]==0.)&& (this->model_point_DEU->duration_valn!=0.))
				timing_items_DEU[BASE_GUAR_IB_BEF][t] -= this->model_point_DEU->ger_gmib_fixed_fee;

			if(t==1) timing_items_DEU[BASE_GUAR_IB_BEF][t] *= pow( 1. + timing_items_DEU[ROLL_UP][t],prorata_decompositions);
			else timing_items_DEU[BASE_GUAR_IB_BEF][t] *= ( 1. + timing_items_DEU[ROLL_UP][t]);
		}
	}
	virtual void Calculate_timing_paid_up()
	{
		timing_items_DEU[SURVIVAL_AFTER_PAID_UP][0]=1.;
		timing_items_DEU[LAPSE_AFTER_PAID_UP][0]=1.;
		timing_items_DEU[TREND_PORT_PAID_UP_POLICIES][0] =1.;
		for (int t=1; t<=this->model_point_DEU->T_Max;t++)
		{
			timing_items_DEU[LAPSE_AFTER_PAID_UP][t]= 1./100.*( t <= this->model_point_DEU->remain_duration )* (1 + Paidup_shock_vector[t]);
			timing_items_DEU[SURVIVAL_AFTER_PAID_UP][t]=( 1. - timing_items_DEU[DEATH_R][t] * ( t <= this->model_point_DEU->remain_duration ) )
				*(1. -timing_items_DEU[LAPSE_AFTER_PAID_UP][t]);
			timing_items_DEU[TREND_PORT_PAID_UP_POLICIES][t] = timing_items_DEU[TREND_PORT_PAID_UP_POLICIES][t-1]*timing_items_DEU[SURVIVAL_AFTER_PAID_UP][t];	
			timing_items_DEU[TREND_INVERSE][t] = 1./ timing_items_DEU[TREND_PORT_PAID_UP_POLICIES][t];
		}	
		//calculate IFD_ROLL_UP_RATE_BEF_PAID_UP and IFD_ROLL_UP_RATE_AFTER_PAID_UP
		timing_items_DEU[IFD_ROLL_UP_RATE_AFTER_PAID_UP][0]=0.;
		for (int t=1; t<=this->model_point_DEU->T_Max;t++)
		{
			timing_items_DEU[IFD_ROLL_UP_RATE_BEF_PAID_UP][t] = ( this->model_point_DEU->remain_duration >= t )*
					pow(1.+timing_items_DEU[ROLL_UP][t], (int)(this->model_point_DEU->remain_duration - t))*
					(1. + timing_items_DEU[ROLL_UP][t] * ((t==1)*prorata_decompositions+(t!=1)));
			timing_items_DEU[IFD_ROLL_UP_RATE_AFTER_PAID_UP][t] = ( this->model_point_DEU->remain_duration >= t )*
									 pow(1. + (this->model_point_DEU->riester_type==1)*this->Assumption->reduced_rollup_rate, (int)(this->model_point_DEU->remain_duration - t))*
									 (1. +(this->model_point_DEU->riester_type==1)*this->Assumption->reduced_rollup_rate * ((t==1)*prorata_decompositions+(t!=1)));
			timing_items_DEU[IFD_ROLL_UP_RATE_AFTER_PAID_UP][0]+=timing_items_DEU[IFD_ROLL_UP_RATE_AFTER_PAID_UP][t];
		}
		// calculate GROSS_PREM_BB GROSS_BONUS_BB
		for (int t=1; t<=this->model_point_DEU->T_Max;t++)
		{
			if(t==1) timing_items_DEU[GROSS_PREM_BB][t]=( t <= this->model_point_DEU->ger_prem_duration)*this->gross_premium;
			else timing_items_DEU[GROSS_PREM_BB][t]=timing_items_DEU[GROSS_PREMIUM_BEF][t];	
			timing_items_DEU[GROSS_BONUS_BB][t]=timing_items_DEU[GROSS_BONUS_BEF][t];
		}
		//Calculate NET_PREM_BB_EXCLU_FIXED_FEES
		for (int t=1; t<=this->model_point_DEU->T_Max;t++)
		{
			if(t==1) timing_items_DEU[NET_PREM_BB_EXCLU_FIXED_FEES][t]=max(0.,gross_premium-administration_charges-( t <= this->model_point_DEU->ger_prem_duration)*Commission_repayment);
			else
				timing_items_DEU[NET_PREM_BB_EXCLU_FIXED_FEES][t] =max(0.,timing_items_DEU[GROSS_PREMIUM_BEF][t]-timing_items_DEU[ADMIN_CHG_PREMIUM_BEF][t]-((t+Shift_acquisition_vector==2)*this->model_point_DEU->acqu_ch_t1+
					(t+Shift_acquisition_vector==3)*this->model_point_DEU->acqu_ch_t2+(t+Shift_acquisition_vector==4)*this->model_point_DEU->acqu_ch_t3+(t+Shift_acquisition_vector==5)*this->model_point_DEU->acqu_ch_t4+(t+Shift_acquisition_vector==6)*this->model_point_DEU->acqu_ch_t5+
					(t+Shift_acquisition_vector==7)*this->model_point_DEU->acqu_ch_t6+(t+Shift_acquisition_vector==8)*this->model_point_DEU->acqu_ch_t7+(t+Shift_acquisition_vector==9)*this->model_point_DEU->acqu_ch_t8+(t+Shift_acquisition_vector==10)*this->model_point_DEU->acqu_ch_t9));

			timing_items_DEU[NET_BONUS_BB_EXCLU_FIXED_FEES][t]=(timing_items_DEU[POL_YEAR_DEU][t]>=2)*(
				timing_items_DEU[GROSS_BONUS_BEF][t]*(this->model_point_DEU->ger_gpp!=1)-timing_items_DEU[ACQUI_CHARGE_BONUS_BEF][t]-timing_items_DEU[ADMIN_CHG_BONUS_BEF][t]);

		}
		//Calculate NET_PREM_INCLUD_FIXED_FEES
		for (int t=1; t<=this->model_point_DEU->T_Max;t++)
		{
			if(t==1)	
				timing_items_DEU[NET_PREM_INCLUD_FIXED_FEES][t]=gross_premium-administration_charges-( t <= this->model_point_DEU->ger_prem_duration)*Commission_repayment
					-fixed_fees -timing_items_DEU[HEDGE_FEE_PREMIUM_BEF][t] - timing_items_DEU[HEDGE_FEE_SUM_PREMIUM_BEF][t];	
			else
				timing_items_DEU[NET_PREM_INCLUD_FIXED_FEES][t]=max(0.,timing_items_DEU[NET_PREM_BB_EXCLU_FIXED_FEES][t]
					-this->model_point_DEU->ger_prem_fixed_fee -timing_items_DEU[HEDGE_FEE_PREMIUM_BEF][t] 
					-timing_items_DEU[HEDGE_FEE_SUM_PREMIUM_BEF][t]);
			
			timing_items_DEU[NET_BONUS_INCLUD_FIXED_FEES][t]=timing_items_DEU[NET_BONUS_BB_EXCLU_FIXED_FEES][t]-timing_items_DEU[HEDGE_FEES_BONUS_BEF][t]-timing_items_DEU[HEDGE_FEES_SUM_PREM_BONUS_BEF][t];
		}	
	}

	//virtual void Calculate_ab_paid_up()
	//{
	//	double sum_local=main_proj_array_DEU[GUAR_AB_TOT][0];
	//	for (int t=1; t<=this->model_point_DEU->T_Max;t++)
	//	{
	//		sum_local=timing_items_DEU[GROSS_BONUS_BB][t]+timing_items_DEU[GROSS_PREM_BB][t];
	//		timing_items_DEU[AB_PAID_UP][t]= max(0.,sum_local);
	//	}	
	//}

	virtual void Calculate_ib_paid_up()
	{
		double indic_local=0.;
		int indic_remaining_local=0;
		double sum_product_roll_up_local=0.;
		double benefit_base_add_local=this->model_point_DEU->bb_add * timing_items_DEU[IFD_ROLL_UP_RATE_BEF_PAID_UP][1];
		double benefit_base_init_local=timing_items_DEU[BASE_GUAR_IB_BEF][0] *timing_items_DEU[IFD_ROLL_UP_RATE_BEF_PAID_UP][1];
		double fixed_fees_local=fixed_fees*timing_items_DEU[IFD_ROLL_UP_RATE_BEF_PAID_UP][1];
//		double sum_product_local= timing_items_DEU[NET_PREM_BB_EXCLU_FIXED_FEES][1]*timing_items_DEU[IFD_ROLL_UP_RATE_BEF_PAID_UP][1];
		double sum_product_local=0.;
		for (int t=1; t<=this->model_point_DEU->T_Max;t++)
		{
			if ( timing_items_DEU[IFD_ROLL_UP_RATE_BEF_PAID_UP][t+1]!=0 ) indic_local=(timing_items_DEU[IFD_ROLL_UP_RATE_AFTER_PAID_UP][t+1]/timing_items_DEU[IFD_ROLL_UP_RATE_BEF_PAID_UP][t+1]);
			else indic_local=1.;	
			
			indic_remaining_local=( t <= this->model_point_DEU->remain_duration );

			if ( t!=1 ){
				sum_product_roll_up_local += timing_items_DEU[IFD_ROLL_UP_RATE_BEF_PAID_UP][t];
				sum_product_local += ( (this->model_point_DEU->riester_type==2)*(timing_items_DEU[GROSS_BONUS_BB][t]+timing_items_DEU[GROSS_PREM_BB][t] )
					+(this->model_point_DEU->riester_type!=2)*(timing_items_DEU[NET_BONUS_BB_EXCLU_FIXED_FEES][t]+timing_items_DEU[NET_PREM_BB_EXCLU_FIXED_FEES][t]))
					*timing_items_DEU[IFD_ROLL_UP_RATE_BEF_PAID_UP][t];
				timing_items_DEU[IFD_ROLL_UP_RATE_AFTER_PAID_UP][0]-=timing_items_DEU[IFD_ROLL_UP_RATE_AFTER_PAID_UP][t];
									
				timing_items_DEU[IB_PAID_UP][t] = max(timing_items_DEU[AB_PAID_UP][t], ( benefit_base_init_local-
									this->model_point_DEU->ger_prem_fixed_fee *sum_product_roll_up_local-
									fixed_fees_local+sum_product_local )* indic_local-
									this->model_point_DEU->admin_fee_dollar*timing_items_DEU[IFD_ROLL_UP_RATE_AFTER_PAID_UP][0]  +
									benefit_base_add_local)*indic_remaining_local;
			}
			else{
				sum_product_local += ( (this->model_point_DEU->riester_type==2)*(timing_items_DEU[GROSS_BONUS_BB][t]+timing_items_DEU[GROSS_PREM_BB][t] )
					+(this->model_point_DEU->riester_type!=2)*(timing_items_DEU[NET_BONUS_BB_EXCLU_FIXED_FEES][t]+timing_items_DEU[NET_PREM_BB_EXCLU_FIXED_FEES][t]))
					*timing_items_DEU[IFD_ROLL_UP_RATE_BEF_PAID_UP][t];

				timing_items_DEU[IFD_ROLL_UP_RATE_AFTER_PAID_UP][0]-=timing_items_DEU[IFD_ROLL_UP_RATE_AFTER_PAID_UP][t];
				timing_items_DEU[IB_PAID_UP][t] = max(timing_items_DEU[AB_PAID_UP][t],
					(((this->model_point_DEU->riester_type==2)*(timing_items_DEU[GROSS_BONUS_BB][t]+timing_items_DEU[GROSS_PREM_BB][t])
					+(this->model_point_DEU->riester_type!=2)*(timing_items_DEU[NET_BONUS_BB_EXCLU_FIXED_FEES][t]+timing_items_DEU[NET_PREM_BB_EXCLU_FIXED_FEES][t]) )
					*timing_items_DEU[IFD_ROLL_UP_RATE_BEF_PAID_UP][1]-fixed_fees_local +benefit_base_init_local)*indic_local 
					-this->model_point_DEU->admin_fee_dollar *timing_items_DEU[IFD_ROLL_UP_RATE_AFTER_PAID_UP][0]+
					benefit_base_add_local)*indic_remaining_local;
			}
		}
	}
	virtual void InitializeVariables()
	{
		this->model_point_DEU->Const_Omega=this->Assumption->Const_Omega;
		if(this->Assumption->use_assumption_date==1){
			this->model_point_DEU->Calc_Valn_month=this->Assumption->month_valn;
			this->model_point_DEU->Calc_Valn_year=this->Assumption->year_valn;
		}
		else{
			this->model_point_DEU->Calc_Valn_month=this->model_point_DEU->valn_month;
			this->model_point_DEU->Calc_Valn_year=this->model_point_DEU->valn_year;
		}
		this->model_point_DEU->valn_month = this->model_point_DEU->Calc_Valn_month;
		this->model_point_DEU->valn_year = this->model_point_DEU->Calc_Valn_year;

		this->set_timing_items_to_zero();
		this->set_main_proj_arrays_to_zero();
		this->set_other_vectors_to_zero();

		this->model_point_DEU->av_total_init=0.;
		this->model_point_DEU->av_add=this->model_point_DEU->av_add_inforce;

		int table_lookup=this->model_point_DEU->deferment_age - (int)this->model_point_DEU->age_exact_issue;
		this->model_point_DEU->ger_lapse_dist_group=this->Assumption->Get_ger_lapse_dist_group(table_lookup);
		this->Assumption->initialize_election_bound(this->model_point_DEU->tax_layer);
		//this->model_point_DEU->ger_prem_duration *=(this->model_point_DEU->pay_status ==1);//mehdi
		
		this->maturity_yr=60;

		this->model_point_DEU->prem_curr_ini = this->model_point_DEU->prem_period_ini*this->model_point_DEU->payt_freq;

		//Initialize frequency_factor HE
		if(this->model_point_DEU->payt_freq==0) this->model_point_DEU->frequency_factor=1/12.;
		else this->model_point_DEU->frequency_factor=1/this->model_point_DEU->payt_freq;

		this->model_point_DEU->age_exact_issue = this->model_point_DEU->age_at_valn - this->model_point_DEU->duration_valn+10*SMALL_DOUBLE;
		if( this->model_point_DEU->duration_valn==0.) this->model_point_DEU->elapsed_months=(int)(floor((this->model_point_DEU->duration_valn)*12.));//Change for HE
		else this->model_point_DEU->elapsed_months = (int)(floor((this->model_point_DEU->duration_valn+0.0001)*12.));//Change for HE
		
		this->model_point_DEU->prem_type= "R";
		if (this->model_point_DEU->prem_curr_ini == 1) this->model_point_DEU->prem_type= "S";

		this->model_point_DEU->elapsed_mths_in_valn_yr = this->model_point_DEU->elapsed_months % 12;
		//this->model_point_DEU->ger_riester_month_bef_08 = (this->model_point_DEU->valn_year<2008)*(12-this->model_point_DEU->valn_month);
		this->model_point_DEU->ger_riester_month_bef_08 = (this->model_point_DEU->Calc_Valn_year<2008)*(12-this->model_point_DEU->Calc_Valn_month);
		
		this->model_point_DEU->elapsed_years = this->model_point_DEU->elapsed_months/12;

		this->model_point_DEU->ger_prem_admin_loading = this->Assumption->administrative_loading;
		this->model_point_DEU->ger_min_invested_amount = 0.20*((int)this->model_point_DEU->ger_product_number==1)+0.40*((int)this->model_point_DEU->ger_product_number==2)+0.25*((int)this->model_point_DEU->ger_product_number==3);
		this->model_point_DEU->prorata_first_year=(1.-this->model_point_DEU->elapsed_mths_in_valn_yr/12.);
		this->model_point_DEU->age_at_issue= (int)(this->model_point_DEU->age_exact_issue+0.0001);
		//this->model_point_DEU->age_exact_issue=this->model_point_DEU->age_exact_issue-0.0001;
		
		total_number_decompositions=0;
		prorata_decompositions=0.;
		remaining_decompositions=0;
		premium_prorata_factor=0;
		gross_premium=0.;
		administration_charges=0.;
		commission_charges=0.;
		remaining_premium =0.;
		fixed_fees=0.;
		hedge_fees_on_premium=0.;
		hedge_fees_on_sum_of_premiums=0.;
		Commission_account=0.;
		Commission_repayment=0.;
		this->model_point_DEU->remain_duration=min(60,(int)this->model_point_DEU->deferment_age-
				(int)this->model_point_DEU->age_at_issue-(this->model_point_DEU->duration_valn!=0.)*
				( (int)( this->model_point_DEU->age_at_valn-this->model_point_DEU->age_at_issue   )  ));
		
		this->model_point_DEU->T_Max=this->model_point_DEU->remain_duration+1;
		
		if (this->model_point_DEU->ger_prem_duration <= 15.)
			this->model_point_DEU->acquisition_cost_rate = 0.1125 + 0.02625 * (this->model_point_DEU->ger_prem_duration - 5.);
		else 
			this->model_point_DEU->acquisition_cost_rate = 0.375 + 0.042 * (this->model_point_DEU->ger_prem_duration - 15.);
		this->model_point_DEU->acquisition_cost_rate = min (1. , this->model_point_DEU->acquisition_cost_rate*0.4);

		/*this->model_point_DEU->bonus_paid=0.;
		if(this->model_point_DEU->last_year_bonus!=0.)
			this->model_point_DEU->bonus_paid=this->model_point_DEU->last_year_bonus;
		else if( (this->model_point_DEU->age_at_valn - this->model_point_DEU->age_at_issue)<=4)
		{
			int age_clasification_for_bonus=0;
			if(this->model_point_DEU->age_at_valn<20) age_clasification_for_bonus=1;
			else if(this->model_point_DEU->age_at_valn<25) age_clasification_for_bonus=2;
			else if(this->model_point_DEU->age_at_valn<30) age_clasification_for_bonus=3;
			else if(this->model_point_DEU->age_at_valn<35) age_clasification_for_bonus=4;
			else if(this->model_point_DEU->age_at_valn<40) age_clasification_for_bonus=5;
			else if(this->model_point_DEU->age_at_valn<45) age_clasification_for_bonus=6;
			else if(this->model_point_DEU->age_at_valn<50) age_clasification_for_bonus=7;
			else if(this->model_point_DEU->age_at_valn<55) age_clasification_for_bonus=8;
			else if(this->model_point_DEU->age_at_valn<60) age_clasification_for_bonus=9;
			else  age_clasification_for_bonus=10;

			this->model_point_DEU->bonus_paid = this->Assumption->bonus_table->search(age_clasification_for_bonus,(this->model_point_DEU->sex !="M")+1);

			if( (this->model_point_DEU->age_at_valn - this->model_point_DEU->age_at_issue)<1)
				this->model_point_DEU->bonus_paid*=1.;
			else if( (this->model_point_DEU->age_at_valn - this->model_point_DEU->age_at_issue)<2)
				this->model_point_DEU->bonus_paid*=0.7;
			else if( (this->model_point_DEU->age_at_valn - this->model_point_DEU->age_at_issue)<3)
				this->model_point_DEU->bonus_paid*=0.4;
			else this->model_point_DEU->bonus_paid *=0.;
		}
		else this->model_point_DEU->bonus_paid=0.;*/
		
		//if(this->model_point_DEU->riester_type!=1) this->Assumption->reduced_rollup_rate=0.;

		this->guaranted_annuity_factor=(this->model_point_DEU->riester_type!=1)*0.7;
		this->Effect_on_AB=0.;
		this->Effect_on_AV=0.;
		this->Effect_on_IB=0.;
	}


	///////////////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////////////
	/////////////////projection calculus with main_proj_array_2 vector //////////////////
	//////////////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////////////
	virtual void FixedFeesAccountValue(int t)
	{
		if  ( ((int)(timing_items_DEU[POL_YEAR_DEU][t]) <= this->model_point_DEU->ger_prem_duration) ||( (int)timing_items_DEU[AGE_LAST_DEU][t]==(int)(this->model_point_DEU->deferment_age)) )
			main_proj_array_DEU[ACCOUNT_VALUE_FIXED_FEES][t] =0.;
		else if (t==1)
			main_proj_array_DEU[ACCOUNT_VALUE_FIXED_FEES][t] = (this->model_point_DEU->duration_valn!=0.)*this->model_point_DEU->admin_fee_dollar *prorata_decompositions*(1.+main_proj_array_DEU[FUND_RETURN][t]) ;	
		else
			main_proj_array_DEU[ACCOUNT_VALUE_FIXED_FEES][t] =this->model_point_DEU->admin_fee_dollar * main_proj_array_DEU[SURV_INDEX_DEU][t-1]*(1.+main_proj_array_DEU[FUND_RETURN][t]) ;

		main_proj_array_DEU[ACCOUNT_VALUE_ADD_FIXED_FEES][t] =0.;
	}
	virtual void DynamicLapseRate_PaidUpRate(int t,double lapse_multiplicator, double paidup_multiplicator)
	{
		//Projected AV
		double p;
		p =  this->model_point_DEU->deferment_age - (int)(timing_items_DEU[AGE_LAST_DEU][t])-1;	
		double tenyr = max(0.,main_proj_array_DEU[TEN_YEAR_INTEREST_RATE][t] );
		double k1 =  pow((1 + tenyr - this->model_point_DEU->management_fee_perc/100. - this->model_point_DEU->gmxb_chg_perc/100.),p);
		double k2 =  pow((1 + tenyr - this->model_point_DEU->management_fee_perc/100. - this->model_point_DEU->hc_add/100.),p);
		double account_value_part_local;
		double account_value_part_local_1;
		double account_value_part_local_2;

		account_value_part_local_1 =( main_proj_array_DEU[ ACCOUNT_VALUE_INIT][t] 
								   -  main_proj_array_DEU[ ACCOUNT_VALUE_FIXED_FEES][t] 
								   -main_proj_array_DEU[ ACCOUNT_VALUE_HC_FEES][t]) * k1;

		account_value_part_local_2 =( main_proj_array_DEU[ ACCOUNT_VALUE_ADD_INIT][t] 
								   -  main_proj_array_DEU[ ACCOUNT_VALUE_ADD_FIXED_FEES][t] 
								   -main_proj_array_DEU[ ACCOUNT_VALUE_ADD_HC_FEES][t]) * k2;

		account_value_part_local=account_value_part_local_1+account_value_part_local_2;

		// required capital for guaranteed annuities
		double benefit_base_part_local1;
		double benefit_base_part_local2;
		double benefit_base_part_local;
		double k3 =  pow((1 + this->model_point_DEU->gmib_rollup_rate_at_valn  /100.),p);
		double guarantee_coupon = timing_items_DEU[GMIB_AX_GUAR_DEU][t];
		double current_coupon = main_proj_array_DEU[GMIB_AX_CURR_MARGIN][t];
		double garanted_coupon2 =timing_items_DEU[GMIB_AX_GUAR_ANN_FACT][t];
		
		benefit_base_part_local1 = main_proj_array_DEU[BASE_GUAR_IB][t]+main_proj_array_DEU[BASE_GUAR_ADD_IB][t];
		if(guarantee_coupon==0.) benefit_base_part_local1=0.;
		else benefit_base_part_local1 = benefit_base_part_local1 *k3 * current_coupon / guarantee_coupon;
		
		if(garanted_coupon2==0.) benefit_base_part_local2=0.;
		else benefit_base_part_local2 = account_value_part_local*this->guaranted_annuity_factor*current_coupon/garanted_coupon2;

		benefit_base_part_local=max(benefit_base_part_local1,benefit_base_part_local2);

		if( (benefit_base_part_local+this->Assumption->riester_guarantee_perc*(main_proj_array_DEU[GUAR_AB_TOT][t-1]+main_proj_array_DEU[GROSS_PREMIUM][t]+main_proj_array_DEU[GROSS_BONUS][t])) > 10.*SMALL_DOUBLE)
		{
			main_proj_array_DEU[DYNAMIC_LAPSE_FACTOR][t] =account_value_part_local/( (1.-this->Assumption->riester_guarantee_perc)*benefit_base_part_local+
										this->Assumption->riester_guarantee_perc *max(benefit_base_part_local,
										main_proj_array_DEU[GUAR_AB_TOT][t-1]+main_proj_array_DEU[GROSS_PREMIUM][t]+
										main_proj_array_DEU[GROSS_BONUS][t]));
		}
		else
			main_proj_array_DEU[DYNAMIC_LAPSE_FACTOR][t] = 999999.;	

		//adjusted lapse
		double itm_factor;
		if ((int)(timing_items_DEU[POL_YEAR_DEU][t]) <= this->Assumption->lapses_delay)
			itm_factor = 1.0;
		else
			itm_factor = this->Assumption->Get_itm_factor(1.-main_proj_array_DEU[DYNAMIC_LAPSE_FACTOR][t]);

		double ind_local = 1. + (t==1)*( this->model_point_DEU->prorata_first_year -1.);
		
		if ((main_proj_array_DEU[ ACCOUNT_VALUE_INIT][t] -  main_proj_array_DEU[ ACCOUNT_VALUE_FIXED_FEES][t] 
			-main_proj_array_DEU[ ACCOUNT_VALUE_HC_FEES][t]+main_proj_array_DEU[ ACCOUNT_VALUE_ADD_INIT][t] 
			-main_proj_array_DEU[ ACCOUNT_VALUE_ADD_FIXED_FEES][t] -main_proj_array_DEU[ ACCOUNT_VALUE_ADD_HC_FEES][t])> SMALL_DOUBLE)
		{
			if( t!=61   && (int)(timing_items_DEU[AGE_LAST_DEU][t]) != (this->model_point_DEU->deferment_age ) )
			{
				double elec_local= ( (int)(timing_items_DEU[AGE_LAST_DEU][t]) < this->Assumption->age_upper_bound_1 ) * this->Assumption->lapse_floor_value_1 + 
						( (int)(timing_items_DEU[AGE_LAST_DEU][t]) >= this->Assumption->age_upper_bound_1 ) * this->Assumption->lapse_floor_value_2 ;//main_proj_array_DEU[AGE_LAST][t]??
								
				main_proj_array_DEU[DYNAMIC_LAPSE_RATE][t] = ind_local* max(elec_local,
						timing_items_DEU[LAPSE_BASE][t] * itm_factor) ;		
			}
			else main_proj_array_DEU[DYNAMIC_LAPSE_RATE][t]=1.;
		}
		else  main_proj_array_DEU[DYNAMIC_LAPSE_RATE][t]=0.;

		main_proj_array_DEU[DYNAMIC_LAPSE_RATE][t]*=lapse_multiplicator;

		//adjusted paid Up
		main_proj_array_DEU[DYNAMIC_PAID_UP_FACTOR][t] = main_proj_array_DEU[DYNAMIC_LAPSE_FACTOR][t];		

		if ((int)(timing_items_DEU[POL_YEAR_DEU][t]) <= this->Assumption->dynamic_paid_up_delay) itm_factor = 1.0;
		else itm_factor = this->Assumption->Get_itm_factor_paid_up( main_proj_array_DEU[DYNAMIC_PAID_UP_FACTOR][t]);
				
		if( t!=61   && (int)(timing_items_DEU[AGE_LAST_DEU][t]) != (this->model_point_DEU->deferment_age ) &&((main_proj_array_DEU[ ACCOUNT_VALUE_INIT][t] -  main_proj_array_DEU[ ACCOUNT_VALUE_FIXED_FEES][t] 
			-main_proj_array_DEU[ ACCOUNT_VALUE_HC_FEES][t]+main_proj_array_DEU[ ACCOUNT_VALUE_ADD_INIT][t] 
			-main_proj_array_DEU[ ACCOUNT_VALUE_ADD_FIXED_FEES][t] -main_proj_array_DEU[ ACCOUNT_VALUE_ADD_HC_FEES][t])> SMALL_DOUBLE) )
			main_proj_array_DEU[DYNAMIC_PAID_UP_RATE][t] = timing_items_DEU[PAID_UP_BASE][t] * itm_factor * ind_local ;
		else
			main_proj_array_DEU[DYNAMIC_PAID_UP_RATE][t] = 0.;

		main_proj_array_DEU[DYNAMIC_PAID_UP_RATE][t] *=paidup_multiplicator;
	}	
	virtual void ElectionRate(int t)
	{
		if( fabs(main_proj_array_DEU[DYNAMIC_LAPSE_FACTOR][t])>0.)
			main_proj_array_DEU[ELECTION_OTM_FACTOR][t] =1./main_proj_array_DEU[DYNAMIC_LAPSE_FACTOR][t];
		else
			main_proj_array_DEU[ELECTION_OTM_FACTOR][t] = 999999.;
			
		if (main_proj_array_DEU[ELECTION_OTM_FACTOR][t] < this->Assumption->first_election_bound)
				main_proj_array_DEU[FRACTION_WORK_1][t] = 1.0;
		else if (main_proj_array_DEU[ELECTION_OTM_FACTOR][t] < this->Assumption->second_election_bound)
				main_proj_array_DEU[FRACTION_WORK_1][t] = (this->Assumption->second_election_bound - main_proj_array_DEU[ELECTION_OTM_FACTOR][t])
										   / (this->Assumption->second_election_bound - this->Assumption->first_election_bound);
		else if (main_proj_array_DEU[ELECTION_OTM_FACTOR][t] < this->Assumption->third_election_bound)
				main_proj_array_DEU[FRACTION_WORK_1][t] = (this->Assumption->third_election_bound - main_proj_array_DEU[ELECTION_OTM_FACTOR][t])
										   / (this->Assumption->third_election_bound - this->Assumption->second_election_bound);
		else if (main_proj_array_DEU[ELECTION_OTM_FACTOR][t] < this->Assumption->fourth_election_bound)
				main_proj_array_DEU[FRACTION_WORK_1][t] = (this->Assumption->fourth_election_bound - main_proj_array_DEU[ELECTION_OTM_FACTOR][t])
										   / (this->Assumption->fourth_election_bound - this->Assumption->third_election_bound);
		else
				main_proj_array_DEU[FRACTION_WORK_1][t] = (this->Assumption->fourth_election_bound +0.1 - main_proj_array_DEU[ELECTION_OTM_FACTOR][t])/0.1 ;
			
			
		if (main_proj_array_DEU[FRACTION_WORK_1][t] < 0.)
				main_proj_array_DEU[FRACTION_WORK_2][t] = 0.;
		else if (main_proj_array_DEU[FRACTION_WORK_1][t] > 1.0)
				main_proj_array_DEU[FRACTION_WORK_2][t] = 1.0;
		else
				main_proj_array_DEU[FRACTION_WORK_2][t] = main_proj_array_DEU[FRACTION_WORK_1][t];
			
		if (main_proj_array_DEU[ELECTION_OTM_FACTOR][t] < this->Assumption->first_election_bound){
				main_proj_array_DEU[ELECTION_RATE_FROM_FUNCTION][t] = 0.0;}
		else if (main_proj_array_DEU[ELECTION_OTM_FACTOR][t] < this->Assumption->second_election_bound){
				main_proj_array_DEU[ELECTION_RATE_FROM_FUNCTION][t] = (1-main_proj_array_DEU[FRACTION_WORK_2][t])*this->Assumption->first_election_rate;}
		else if (main_proj_array_DEU[ELECTION_OTM_FACTOR][t] < this->Assumption->third_election_bound){
				main_proj_array_DEU[ELECTION_RATE_FROM_FUNCTION][t] = (1-main_proj_array_DEU[FRACTION_WORK_2][t])*this->Assumption->second_election_rate + main_proj_array_DEU[FRACTION_WORK_2][t] * this->Assumption->first_election_rate;}
		else if (main_proj_array_DEU[ELECTION_OTM_FACTOR][t] < this->Assumption->fourth_election_bound)
				main_proj_array_DEU[ELECTION_RATE_FROM_FUNCTION][t] = (1-main_proj_array_DEU[FRACTION_WORK_2][t])*this->Assumption->third_election_rate + main_proj_array_DEU[FRACTION_WORK_2][t] * this->Assumption->second_election_rate;
		else
				main_proj_array_DEU[ELECTION_RATE_FROM_FUNCTION][t] = (1-main_proj_array_DEU[FRACTION_WORK_2][t])*this->Assumption->fourth_election_rate + main_proj_array_DEU[FRACTION_WORK_2][t] * this->Assumption->third_election_rate; ;
		
		
		if ( ( t==60  || ((int)(timing_items_DEU[AGE_LAST_DEU][t]) == (this->model_point_DEU->deferment_age-1) ) ) && 
			((int)(timing_items_DEU[AGE_LAST_DEU][t]) < (this->Assumption->maximum_election_age-1) ))
				main_proj_array_DEU[ELECTION_RATE][t] = main_proj_array_DEU[ELECTION_RATE_FROM_FUNCTION][t] * (1. + election_shock);
		else
				main_proj_array_DEU[ELECTION_RATE][t]=0.; 

		//Adjusted election rate
		double guarantee_coupon = timing_items_DEU[GMIB_AX_GUAR_DEU][t];
		double current_coupon = main_proj_array_DEU[GMIB_AX_CURR_MARGIN][t];
		double garanted_coupon2 =timing_items_DEU[GMIB_AX_GUAR_ANN_FACT][t];
		double guar_ab_local =  main_proj_array_DEU[BASE_GUAR_AB][t] - main_proj_array_DEU[GUAR_AB_DECREM][t];
		double account_value_local= main_proj_array_DEU[ACCOUNT_VALUE_INIT][t]-main_proj_array_DEU[ACCOUNT_VALUE_DECREM][t] -main_proj_array_DEU[ACCOUNT_VALUE_FIXED_FEES][t]-main_proj_array_DEU[ACCOUNT_VALUE_HC_FEES][t]
				+main_proj_array_DEU[ACCOUNT_VALUE_ADD_INIT][t]-main_proj_array_DEU[ACCOUNT_VALUE_ADD_DECREM][t] -main_proj_array_DEU[ACCOUNT_VALUE_ADD_FIXED_FEES][t]-main_proj_array_DEU[ACCOUNT_VALUE_ADD_HC_FEES][t];
		double guar_ib_local=main_proj_array_DEU[BASE_GUAR_IB][t] - main_proj_array_DEU[GUAR_IB_DECREM][t]+main_proj_array_DEU[BASE_GUAR_ADD_IB][t] - main_proj_array_DEU[GUAR_ADD_IB_DECREM][t];
		int indicator_adjusted_local=(guar_ab_local>account_value_local)*
			(guar_ab_local>=max( max(guar_ib_local,guar_ab_local)*current_coupon/guarantee_coupon,account_value_local*this->guaranted_annuity_factor*current_coupon/garanted_coupon2));

		main_proj_array_DEU[ELECTION_RATE][t]=min(1., main_proj_array_DEU[ELECTION_RATE][t])*(indicator_adjusted_local*(1.-this->Assumption->riester_guarantee_perc)+(1.-indicator_adjusted_local));
	}
	virtual void ClaimsAb(int t)
	{
		if ( (int)(timing_items_DEU[AGE_LAST_DEU][t]) == ((int)this->model_point_DEU->deferment_age-1) || t==60 )
		{
			double guarantee_ab_local =  main_proj_array_DEU[BASE_GUAR_AB][t] - main_proj_array_DEU[GUAR_AB_DECREM][t];

			double av_local = (main_proj_array_DEU[ACCOUNT_VALUE_INIT][t] - main_proj_array_DEU[ACCOUNT_VALUE_FIXED_FEES][t] -
								main_proj_array_DEU[ACCOUNT_VALUE_HC_FEES][t]-main_proj_array_DEU[ACCOUNT_VALUE_DECREM][t] 
								+ main_proj_array_DEU[ACCOUNT_VALUE_ADD_INIT][t] -main_proj_array_DEU[ACCOUNT_VALUE_ADD_FIXED_FEES][t] 
								- main_proj_array_DEU[ACCOUNT_VALUE_ADD_HC_FEES][t]-main_proj_array_DEU[ACCOUNT_VALUE_ADD_DECREM][t] );
			
			main_proj_array_DEU[CLAIMS_AB][t] = max(0., guarantee_ab_local - max(0.,av_local))*this->Assumption->riester_guarantee_perc*
				max( this->Assumption->riester_election_fonds_perc/100.,( main_proj_array_DEU[ELECTION_RATE][t]!=1.)*1.);
		}
	}
	virtual void ClaimsIb(int t)
	{	
		if (t!=0 && timing_items_DEU[GMIB_AX_GUAR_DEU][t]!=0. )
		{
			double av_local =  main_proj_array_DEU[ACCOUNT_VALUE_INIT][t] - main_proj_array_DEU[ACCOUNT_VALUE_DECREM][t] -
					main_proj_array_DEU[ACCOUNT_VALUE_FIXED_FEES][t]- main_proj_array_DEU[ACCOUNT_VALUE_HC_FEES][t]+
					 main_proj_array_DEU[ACCOUNT_VALUE_ADD_INIT][t] - main_proj_array_DEU[ACCOUNT_VALUE_ADD_DECREM][t] -
					main_proj_array_DEU[ACCOUNT_VALUE_ADD_FIXED_FEES][t]- main_proj_array_DEU[ACCOUNT_VALUE_ADD_HC_FEES][t];
	
			double guarantee_ib_local = main_proj_array_DEU[BASE_GUAR_IB][t]-main_proj_array_DEU[GUAR_IB_DECREM][t]+
							 main_proj_array_DEU[BASE_GUAR_ADD_IB][t]-main_proj_array_DEU[GUAR_ADD_IB_DECREM][t];
			double current_annuity_local =main_proj_array_DEU[GMIB_AX_CURR_MARGIN][t];
			double guarantee_annuity_local =timing_items_DEU[GMIB_AX_GUAR_DEU][t]; 
			double guarantee_annuity_local2 =timing_items_DEU[GMIB_AX_GUAR_ANN_FACT][t]; 
			double guarantee_ab_local =  main_proj_array_DEU[BASE_GUAR_AB][t]-main_proj_array_DEU[GUAR_AB_DECREM][t];
			
			int indic_local=( (int)(timing_items_DEU[AGE_LAST_DEU][t]) == (this->model_point_DEU->deferment_age-1) || t==60);
			main_proj_array_DEU[CLAIMS_IB][t] = max(0., current_annuity_local* 
						max(guarantee_ib_local, guarantee_ab_local*indic_local)/guarantee_annuity_local  - 
						max(0.,av_local) ) * main_proj_array_DEU[ELECTION_RATE][t] *
						(1. -  this->Assumption->riester_election_fonds_perc/100.);

			main_proj_array_DEU[CLAIMS_IB_FONDS][t] = max(0., current_annuity_local* 
						(this->model_point_DEU->riester_type!=1)*av_local*this->guaranted_annuity_factor/guarantee_annuity_local2  - 
						max(0.,av_local) ) * main_proj_array_DEU[ELECTION_RATE][t] *
						(1. -  this->Assumption->riester_election_fonds_perc/100.);
			
			main_proj_array_DEU[MAX_CLAIMS_IB_IB_FONDS][t]=max(main_proj_array_DEU[CLAIMS_IB][t],main_proj_array_DEU[CLAIMS_IB_FONDS][t]);
		}
	}	
	///////////////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////////////
	///////////////////////////////Paid Up projection ////////////////////////////////
	//////////////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////////////
	virtual void PaidUpAccountValue()
	{
		double sum_product_local=0.;
		double sum_product_local2=0.;
		double current_coupon = main_proj_array_DEU[GMIB_AX_CURR_MARGIN][(int)(this->model_point_DEU->remain_duration)];
		
		double garanted_coupon2 = this->riester_guaranted_anuity_factor->search((int)this->model_point_DEU->deferment_age,1);

		double account_value_local=main_proj_array_DEU[ACCOUNT_VALUE_TOTAL][0] *main_proj_array_DEU[TOTAL_INTEREST_FOR_X_PREMIUM][1];
		double account_value_add_local=this->model_point_DEU->av_add * main_proj_array_DEU[TOTAL_INTEREST_FOR_X_PREMIUM][1];
		//double fixed_fees_local=this->model_point_DEU->admin_fee_dollar* main_proj_array_DEU[TOTAL_INTEREST_FOR_X_PREMIUM][0];

		for (int t=1; t<=this->model_point_DEU->T_Max;t++)
		{
			sum_product_local += timing_items_DEU[NET_PREM_INCLUD_FIXED_FEES][t] *main_proj_array_DEU[TOTAL_INTEREST_FOR_X_PREMIUM][t];
			sum_product_local2 += timing_items_DEU[NET_BONUS_INCLUD_FIXED_FEES][t] *main_proj_array_DEU[TOTAL_INTEREST_FOR_X_PREMIUM][t];
			main_proj_array_DEU[TOTAL_INTEREST_FOR_X_PREMIUM][0] -= main_proj_array_DEU[TOTAL_INTEREST_FOR_X_PREMIUM][t];
			
			main_proj_array_DEU[AV_PAID_UP][t] = max(0., account_value_local + sum_product_local+sum_product_local2-  this->model_point_DEU->admin_fee_dollar*main_proj_array_DEU[TOTAL_INTEREST_FOR_X_PREMIUM][0]
				+ account_value_add_local) *((t!=1)*( t <= this->model_point_DEU->remain_duration )+(t==1)); 
		
			if (main_proj_array_DEU[NO_POLS_END][t]!=0)
				main_proj_array_DEU[AV_FROM_ADD_PAY_IN_T][t]= main_proj_array_DEU[ACCOUNT_VALUE_ADD_TOTAL][t]/main_proj_array_DEU[NO_POLS_END][t];
			else
				main_proj_array_DEU[AV_FROM_ADD_PAY_IN_T][t] =0.;
			main_proj_array_DEU[IB_FONDS_PAID_UP][t]=main_proj_array_DEU[AV_PAID_UP][t]*this->guaranted_annuity_factor*current_coupon/garanted_coupon2;
		}
	}

	virtual void PaidUpInitializeAv()
	{
		int i=0;
		int j=0;
		//Calculate account value paid up and hedge charges on premium paid
		av_paidup[1][1]=(main_proj_array_DEU[ACCOUNT_VALUE_TOTAL][0]+timing_items_DEU[NET_PREM_INCLUD_FIXED_FEES][1]+timing_items_DEU[NET_BONUS_INCLUD_FIXED_FEES][1])
						*(1.+ main_proj_array_DEU[FUND_RETURN][1])
						* (1.- this->model_point_DEU->gmxb_chg_perc/100.*prorata_decompositions)*(1<=this->model_point_DEU->remain_duration);	
		
		for (i = 1; i <= this->model_point_DEU->T_Max; i++) 
		{
			if(i!=1)
				av_paidup[i][i]=max(0.,av_paidup[i-1][i-1]+timing_items_DEU[NET_PREM_INCLUD_FIXED_FEES][i]+timing_items_DEU[NET_BONUS_INCLUD_FIXED_FEES][i])*(1.+ main_proj_array_DEU[FUND_RETURN][i])
					* (1.- this->model_point_DEU->gmxb_chg_perc/100.)*(i<=this->model_point_DEU->remain_duration);
			
			for (j = i+1; j <= this->model_point_DEU->T_Max; j++) 
				av_paidup[i][j]=max(0.,av_paidup[i][j-1]-this->model_point_DEU->admin_fee_dollar)*(1.+ main_proj_array_DEU[FUND_RETURN][j])
					* (1.- this->model_point_DEU->gmxb_chg_perc/100.)*(j<=this->model_point_DEU->remain_duration);
		}
	}

	virtual void PaidUpDynamicElectionWeightsRate()
	{
		double guarantee_coupon = timing_items_DEU[GMIB_AX_GUAR_DEU][max(1,(int)(this->model_point_DEU->remain_duration))];
		double current_coupon = main_proj_array_DEU[GMIB_AX_CURR_MARGIN][(int)(this->model_point_DEU->remain_duration)];
		double fraction_work_1=0.;
		double fraction_work_2=0.;
		double otm_factor_local=0.;
	
		for (int t=1; t<=this->model_point_DEU->T_Max;t++)
		{
			double ib_part_local=max(timing_items_DEU[IB_PAID_UP][t]*current_coupon/guarantee_coupon,main_proj_array_DEU[IB_FONDS_PAID_UP][t]);
			
			if ( abs(main_proj_array_DEU[AV_PAID_UP][t]) > SMALL_DOUBLE && this->model_point_DEU->gmab_valn > SMALL_DOUBLE)
				otm_factor_local=((1.-this->Assumption->riester_guarantee_perc)*ib_part_local+this->Assumption->riester_guarantee_perc*max(ib_part_local,timing_items_DEU[AB_PAID_UP][t]))/main_proj_array_DEU[AV_PAID_UP][t];
			else
				otm_factor_local=999999.;
		
			if (otm_factor_local < this->Assumption->first_election_bound)
				fraction_work_1 = 1.0;
			else if (otm_factor_local < this->Assumption->second_election_bound)
				fraction_work_1 = (this->Assumption->second_election_bound - otm_factor_local)/ (this->Assumption->second_election_bound - this->Assumption->first_election_bound);
			else if (otm_factor_local < this->Assumption->third_election_bound)
				fraction_work_1 = (this->Assumption->third_election_bound - otm_factor_local)/ (this->Assumption->third_election_bound - this->Assumption->second_election_bound);
			else if (otm_factor_local < this->Assumption->fourth_election_bound)
				fraction_work_1 = (this->Assumption->fourth_election_bound - otm_factor_local)/ (this->Assumption->fourth_election_bound - this->Assumption->third_election_bound);
			else
				fraction_work_1 = (this->Assumption->fourth_election_bound +0.1 - otm_factor_local)/0.1 ;
			
			if (fraction_work_1 < 0.)
				fraction_work_2 = 0.;
			else if (fraction_work_1 > 1.0)
				fraction_work_2 = 1.0;
			else
				fraction_work_2 = fraction_work_1;
		
			if (otm_factor_local < this->Assumption->first_election_bound){
					main_proj_array_DEU[ELECTION_RATE_WEIGHTS_PAID_UP][t] = 0.0;}
			else if (otm_factor_local < this->Assumption->second_election_bound){
					main_proj_array_DEU[ELECTION_RATE_WEIGHTS_PAID_UP][t] = (1-fraction_work_2)*this->Assumption->first_election_rate;}
			else if (otm_factor_local < this->Assumption->third_election_bound){
					main_proj_array_DEU[ELECTION_RATE_WEIGHTS_PAID_UP][t] = (1-fraction_work_2)*this->Assumption->second_election_rate + fraction_work_2 * this->Assumption->first_election_rate;}
			else if (otm_factor_local < this->Assumption->fourth_election_bound)
					main_proj_array_DEU[ELECTION_RATE_WEIGHTS_PAID_UP][t] = (1-fraction_work_2)*this->Assumption->third_election_rate + fraction_work_2 * this->Assumption->second_election_rate;
			else
					main_proj_array_DEU[ELECTION_RATE_WEIGHTS_PAID_UP][t] = (1-fraction_work_2)*this->Assumption->fourth_election_rate + fraction_work_2 * this->Assumption->third_election_rate; 

			//Adjusted election rate
			double ajustement_election_rate=1.;
			if (  (timing_items_DEU[AB_PAID_UP][t] > main_proj_array_DEU[AV_PAID_UP][t]) && 
						(timing_items_DEU[AB_PAID_UP][t] > ( timing_items_DEU[IB_PAID_UP][t]*current_coupon/ guarantee_coupon )   ))
			{
				ajustement_election_rate= 1. - this->Assumption->riester_guarantee_perc;
			}
			main_proj_array_DEU[ELECTION_RATE_WEIGHTS_PAID_UP][t] = ajustement_election_rate *
										min(1.,	main_proj_array_DEU[ELECTION_RATE_WEIGHTS_PAID_UP][t]*(1.+election_shock));
		}
	}
	virtual void PaidUpWeightsIbClaims()
	{
		int t;
		double guarantee_coupon = timing_items_DEU[GMIB_AX_GUAR_DEU][(int)(this->model_point_DEU->remain_duration)];
		double current_coupon = main_proj_array_DEU[GMIB_AX_CURR_MARGIN][(int)(this->model_point_DEU->remain_duration)];
		main_proj_array_DEU[WEIGHTS_IB_CLAIMS][0] = 0.;
		for (t = 1; t<=this->model_point_DEU->T_Max; t++) 
		{
			if (main_proj_array_DEU[WEIGHTS_FINAL][t] ==0.){
				main_proj_array_DEU[WEIGHTS_IB_CLAIMS][t]=0.;
				main_proj_array_DEU[WEIGHTS_IB_FONDS_CLAIMS][t]=0.;
			}
			else
			{
				main_proj_array_DEU[WEIGHTS_IB_CLAIMS][t] = main_proj_array_DEU[WEIGHTS_FINAL][t]*
											main_proj_array_DEU[ELECTION_RATE_WEIGHTS_PAID_UP][t]*
											max(0., timing_items_DEU[IB_PAID_UP][t]*current_coupon/guarantee_coupon
											-main_proj_array_DEU[AV_PAID_UP][t])*(1.- this->Assumption->riester_election_fonds_perc/100.)  ;
				
				main_proj_array_DEU[WEIGHTS_IB_FONDS_CLAIMS][t] = main_proj_array_DEU[WEIGHTS_FINAL][t]*
											main_proj_array_DEU[ELECTION_RATE_WEIGHTS_PAID_UP][t]*
											max(0., main_proj_array_DEU[IB_FONDS_PAID_UP][t]
											-main_proj_array_DEU[AV_PAID_UP][t])*(1.- this->Assumption->riester_election_fonds_perc/100.)  ;
				
				main_proj_array_DEU[WEIGHTS_MAX_IB_IB_FONDS_CLAIMS][t] = max(main_proj_array_DEU[WEIGHTS_IB_FONDS_CLAIMS][t],main_proj_array_DEU[WEIGHTS_IB_CLAIMS][t])  ;
			}

			main_proj_array_DEU[WEIGHTS_IB_CLAIMS][0]+=main_proj_array_DEU[WEIGHTS_IB_CLAIMS][t];
			main_proj_array_DEU[WEIGHTS_IB_FONDS_CLAIMS][0]+=main_proj_array_DEU[WEIGHTS_IB_FONDS_CLAIMS][t];
			main_proj_array_DEU[WEIGHTS_MAX_IB_IB_FONDS_CLAIMS][0]+=main_proj_array_DEU[WEIGHTS_MAX_IB_IB_FONDS_CLAIMS][t];
		}
	}
	//////////////////////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////////////////////
	//////////////////////present_value_calculation()//////////project()/////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////
	virtual void PresentValueCalculation(double **pvs,int curr_shock_number)
	{	

		//for (int t = 1 ; t <= min(60,this->model_point_DEU->T_Max) ; t++)
		for (int t = 1 ; t <= min(60,this->model_point_DEU->T_Max) ; t++)
		{
			//Calculate present value deposit fees (Net premuim)
			if( (this->model_point_DEU->ger_abrufphase==0) || (this->timing_items_DEU[AGE_LAST_DEU][t]< (this->model_point_DEU->deferment_age-min(5,this->model_point_DEU->deferment_age-60))))
			{
				pvs[curr_shock_number][PV_DEP_FEE_PREMIUM]+=main_proj_array_DEU[HEDGE_FEE_PREMIUM][t]*main_proj_array_DEU[DISCOUNT_FACTOR_MA][t];
				pvs[curr_shock_number][PV_DEP_FEE_BONUS]+=main_proj_array_DEU[HEDGE_FEES_BONUS][t]* main_proj_array_DEU[DISCOUNT_FACTOR_MA][t];
				pvs[curr_shock_number][PV_DEP_FEE_TOT] +=main_proj_array_DEU[HEDGE_FEE_PREMIUM][t]*main_proj_array_DEU[DISCOUNT_FACTOR_MA][t]+main_proj_array_DEU[HEDGE_FEES_BONUS][t]* main_proj_array_DEU[DISCOUNT_FACTOR_MA][t];
				if ((int)(this->Assumption->gr_symbol) == 1 && t == 1)
					pvs[curr_shock_number][PV_DEP_FEE_TOT] +=this->model_point_DEU->gmib_rollup_valn * this->model_point_DEU->ger_prem_hedge_charge/100.;
			}
			//Calculate present value deposit fees sum of premium
			if( (this->model_point_DEU->ger_abrufphase==0) || (this->timing_items_DEU[AGE_LAST_DEU][t]< (this->model_point_DEU->deferment_age-min(5,this->model_point_DEU->deferment_age-60))))
			{
				pvs[curr_shock_number][PV_DEP_FEE_SUM_PREMIUM]+=main_proj_array_DEU[HEDGE_FEE_SUM_PREMIUM][t]*main_proj_array_DEU[DISCOUNT_FACTOR_MA][t];
				pvs[curr_shock_number][PV_DEP_FEE_SUM_BONUS]+=main_proj_array_DEU[HEDGE_FEES_SUM_PREM_BONUS][t]*main_proj_array_DEU[DISCOUNT_FACTOR_MA][t];
				pvs[curr_shock_number][PV_DEP_FEE_SUM_TOT]+=main_proj_array_DEU[HEDGE_FEE_SUM_PREMIUM][t]*main_proj_array_DEU[DISCOUNT_FACTOR_MA][t]+main_proj_array_DEU[HEDGE_FEES_SUM_PREM_BONUS][t]*main_proj_array_DEU[DISCOUNT_FACTOR_MA][t];
				//if (((int)(this->Assumption->gr_symbol) == 1 && t == 1)&&(this->model_point_DEU->payt_freq != 0))
				//		pvs[curr_shock_number][PV_DEP_FEE_SUM_TOT]+=this->model_point_DEU->acqu_ch_t0 * this->ger_factor_prem_hc_bs   /this->model_point_DEU->payt_freq ;
			}
			//Calculate present value of hedge cost fees
			if( (this->model_point_DEU->ger_abrufphase==0) || (this->timing_items_DEU[AGE_LAST_DEU][t]< (this->model_point_DEU->deferment_age-min(5,this->model_point_DEU->deferment_age-60))))
			{
				pvs[curr_shock_number][PV_HC_AV]+=main_proj_array_DEU[ACCOUNT_VALUE_HC_FEES][t]*main_proj_array_DEU[DISCOUNT_FACTOR_MA][t];
				pvs[curr_shock_number][PV_HC_AV_ADD]+=main_proj_array_DEU[ACCOUNT_VALUE_ADD_HC_FEES][t]*main_proj_array_DEU[DISCOUNT_FACTOR_MA][t];
				pvs[curr_shock_number][PV_HC_AV_PAID_UP]-=main_proj_array_DEU[WEIGHTS_CHARGES][t]*main_proj_array_DEU[DISCOUNT_FACTOR_MA][t];
			}

			//Calculate present value of the total account value charges
			if( (this->model_point_DEU->ger_abrufphase==0) || (this->timing_items_DEU[AGE_LAST_DEU][t]< (this->model_point_DEU->deferment_age-min(5,this->model_point_DEU->deferment_age-60))))
			{
				pvs[curr_shock_number][PV_HC_AV_TOT]+=main_proj_array_DEU[ACCOUNT_VALUE_HC_FEES][t]*main_proj_array_DEU[DISCOUNT_FACTOR_MA][t]+main_proj_array_DEU[ACCOUNT_VALUE_ADD_HC_FEES][t]*main_proj_array_DEU[DISCOUNT_FACTOR_MA][t]-main_proj_array_DEU[WEIGHTS_CHARGES][t]*main_proj_array_DEU[DISCOUNT_FACTOR_MA][t];
			}
			//Calculate present value of the total account value base
			if( (this->model_point_DEU->ger_abrufphase==0) || (this->timing_items_DEU[AGE_LAST_DEU][t]< (this->model_point_DEU->deferment_age-min(5,this->model_point_DEU->deferment_age-60))))
			{
				pvs[curr_shock_number][PV_HC_AV_BASE]+=  main_proj_array_DEU[AV_BASE][t]* main_proj_array_DEU[DISCOUNT_FACTOR_MA][t];
				pvs[curr_shock_number][PV_HC_AV_ADD_BASE]+=main_proj_array_DEU[AV_ADD_BASE][t]* main_proj_array_DEU[DISCOUNT_FACTOR_MA][t];
				pvs[curr_shock_number][PV_HC_AV_PAID_UP_BASE]+=main_proj_array_DEU[WEIGHTS_AV_BASE][t]* main_proj_array_DEU[DISCOUNT_FACTOR_MA][t];
				pvs[curr_shock_number][PV_HC_AV_BASE_TOT] +=main_proj_array_DEU[AV_BASE][t]* main_proj_array_DEU[DISCOUNT_FACTOR_MA][t]+main_proj_array_DEU[AV_ADD_BASE][t]* main_proj_array_DEU[DISCOUNT_FACTOR_MA][t]+main_proj_array_DEU[WEIGHTS_AV_BASE][t]* main_proj_array_DEU[DISCOUNT_FACTOR_MA][t];
			}
			//Calculate present values claims IB
			pvs[curr_shock_number][PV_GMIB_DEU]+=main_proj_array_DEU[CLAIMS_IB][t]* main_proj_array_DEU[DISCOUNT_FACTOR_MA][t];
			pvs[curr_shock_number][PV_GMIB_FONDS_DEU]+=main_proj_array_DEU[CLAIMS_IB_FONDS][t]* main_proj_array_DEU[DISCOUNT_FACTOR_MA][t];
			pvs[curr_shock_number][PV_GMIB_TOT] +=main_proj_array_DEU[MAX_CLAIMS_IB_IB_FONDS][t]* main_proj_array_DEU[DISCOUNT_FACTOR_MA][t];
			
			if ((t==60 && this->timing_items_DEU[AGE_LAST_DEU][t] < this->model_point_DEU->deferment_age - 1)||(this->timing_items_DEU[AGE_LAST_DEU][t] == this->model_point_DEU->deferment_age - 1))
			{
				pvs[curr_shock_number][PV_GMIB_WEIGHTS]+=main_proj_array_DEU[WEIGHTS_IB_CLAIMS][0]* main_proj_array_DEU[DISCOUNT_FACTOR_MA][t];
				pvs[curr_shock_number][PV_GMIB_FONDS_DEU]+=main_proj_array_DEU[WEIGHTS_IB_FONDS_CLAIMS][0]* main_proj_array_DEU[DISCOUNT_FACTOR_MA][t];
				pvs[curr_shock_number][PV_GMIB_TOT] +=main_proj_array_DEU[WEIGHTS_MAX_IB_IB_FONDS_CLAIMS][0]* main_proj_array_DEU[DISCOUNT_FACTOR_MA][t];
			}

			//Calculate present values claims AB
			pvs[curr_shock_number][PV_GMAB_DEU]+=main_proj_array_DEU[CLAIMS_AB][t] * main_proj_array_DEU[DISCOUNT_FACTOR_MA][t];
			pvs[curr_shock_number][PV_GMAB_TOT]+=main_proj_array_DEU[CLAIMS_AB][t] * main_proj_array_DEU[DISCOUNT_FACTOR_MA][t];
			if ((t==60 && this->timing_items_DEU[AGE_LAST_DEU][t] < this->model_point_DEU->deferment_age - 1)||(this->timing_items_DEU[AGE_LAST_DEU][t] == this->model_point_DEU->deferment_age - 1))
			{			
				pvs[curr_shock_number][PV_GMAB_WEIGHTS]+=main_proj_array_DEU[WEIGHTS_AB_CLAIMS][0] * main_proj_array_DEU[DISCOUNT_FACTOR_MA][t];
				pvs[curr_shock_number][PV_GMAB_TOT]+=main_proj_array_DEU[WEIGHTS_AB_CLAIMS][0] * main_proj_array_DEU[DISCOUNT_FACTOR_MA][t];
			}
		}
	}
	virtual void ChiLovCalculation(double **pvs,int curr_shock_number,bool delta)
	{

			//Calculate real ride charges
			pvs[curr_shock_number][PV_RRC]=this->model_point_DEU->gmxb_chg_perc*(this->total_number_scn);

			//Calculate present value of the total account value real charges
			pvs[curr_shock_number][PV_REAL_CHARGES_DEU]=
				pvs[curr_shock_number][PV_HC_AV_TOT];

			//Calculate present values total claims 
			pvs[curr_shock_number][PV_CLAIMS_DEU]=
				pvs[curr_shock_number][PV_GMIB_TOT]
				+pvs[curr_shock_number][PV_GMAB_TOT];

			//Calculate adjustment of sum premium charges value
			pvs[curr_shock_number][PV_DEP_FEE_SUM_TOT]*=this->Assumption->alpha_ch_factor;

			//Calculate ehc value
			if((delta == true && curr_shock_number==0) || delta==false)
			{
				if((int)this->Assumption->gr_symbol==1)
					pvs[curr_shock_number][PV_CHI_DEU]=
						(pvs[curr_shock_number][PV_CLAIMS_DEU]-
						pvs[curr_shock_number][PV_DEP_FEE_TOT]-
						pvs[curr_shock_number][PV_DEP_FEE_SUM_TOT])/
						(pvs[curr_shock_number][PV_HC_AV_BASE_TOT]*(pvs[curr_shock_number][PV_HC_AV_BASE_TOT]!=0)+0.01*(pvs[curr_shock_number][PV_HC_AV_BASE_TOT]==0))*
						this->model_point_DEU->gmxb_chg_perc*(this->total_number_scn);
				else
					pvs[curr_shock_number][PV_CHI_DEU]=this->model_point_DEU->gmxb_ehc_charge*(this->total_number_scn);
			}
			else
				pvs[curr_shock_number][PV_CHI_DEU]=this->model_point_DEU->index_shock_pvs[0][PV_CHI_DEU];

			//Calculate present value of the total account value ehc charges
			pvs[curr_shock_number][PV_EHC_CHARGES_DEU]=
				pvs[curr_shock_number][PV_CHI_DEU]/(this->total_number_scn*100.)*
				pvs[curr_shock_number][PV_HC_AV_BASE_TOT];

			//Calculate LOV
			pvs[curr_shock_number][PV_LOV_DEU]=
				(pvs[curr_shock_number][PV_CLAIMS_DEU]-
					pvs[curr_shock_number][PV_DEP_FEE_TOT]-
				pvs[curr_shock_number][PV_DEP_FEE_SUM_TOT])-
				pvs[curr_shock_number][PV_EHC_CHARGES_DEU];
		
	}

	virtual void calculate_ac_and_ag(){
		double * f_t = new double[this->model_point_DEU->Const_Omega+1];
		double * dav_trend = new double[this->model_point_DEU->Const_Omega+1];
		double * stec_trend = new double[this->model_point_DEU->Const_Omega+1];
		double * mortality_shock = new double[this->model_point_DEU->Const_Omega+1];
		double * q_x_raw = new double[this->model_point_DEU->Const_Omega+1];
		double * q_x_final = new double[this->model_point_DEU->Const_Omega+1];
		/*int issue_year = this->model_point_DEU->Calc_Valn_year - (int) this->model_point_DEU->duration_valn;
		double local_var = 12*(this->model_point_DEU->duration_valn - (int) this->model_point_DEU->duration_valn);
		if(local_var - (int) local_var >= 0.5){
			local_var  = (int) local_var + 1;
		}
		else{
			local_var = (int) local_var; 
		}
		if(local_var > this->model_point_DEU->Calc_Valn_month){
			issue_year --;
		}*/
		int issue_year= this->model_point_DEU->issue_year_inforce;
		int election_year = issue_year + this->model_point_DEU->deferment_age - this->model_point_DEU->age_at_issue;
		
		for(int t=this->model_point_DEU->deferment_age; t<=this->model_point_DEU->Const_Omega; t++){
			if(this->model_point_DEU->sex=="M"){f_t[t] = this->Assumption->selection_factor_m->quick_search(t-this->model_point_DEU->deferment_age+1,0);}
			else{f_t[t] = this->Assumption->selection_factor_f->quick_search(t-this->model_point_DEU->deferment_age+1,0);}
		}
		for(int t=this->model_point_DEU->deferment_age; t<=this->model_point_DEU->Const_Omega; t++){
			
			double trend = 0.;
			if(this->model_point_DEU->sex=="M"){trend = this->Assumption->trends_ac_1_2_m->quick_search(t,0);}
			else{trend = this->Assumption->trends_ac_1_2_f->quick_search(t,0);}

			int year = 0;
			if (this->Assumption->longevity_calculation==0){year = election_year+t-this->model_point_DEU->deferment_age-1999;}
			else{year = this->model_point_DEU->Calc_Valn_year - 1999;}

			dav_trend[t]=exp(-trend*year);
		}

		for(int t=this->model_point_DEU->deferment_age; t<=this->model_point_DEU->Const_Omega; t++){
			if (this->Assumption->longevity_calculation==0){stec_trend[t]=1.;}
			else{stec_trend[t]=this->longevity_shock_table->search(t,election_year-this->model_point_DEU->Calc_Valn_year+t-this->model_point_DEU->deferment_age+1);}
		}

		for(int t=this->model_point_DEU->deferment_age; t<=this->model_point_DEU->Const_Omega; t++){
			mortality_shock[t] = Mortality_shock_vector[t- (int) this->model_point_DEU->age_at_valn];
			if(this->Assumption->longevity_calculation==1){mortality_shock[t]=1.;}
		}

		for(int t=this->model_point_DEU->deferment_age; t<=this->model_point_DEU->Const_Omega; t++){
			if(this->model_point_DEU->sex=="M"){q_x_raw[t] = this->Assumption->aggregated_table_ac_m->quick_search(t,0);}
			else{q_x_raw[t] = this->Assumption->aggregated_table_ac_f->quick_search(t,0);}
		}

		for(int t=this->model_point_DEU->deferment_age; t<this->model_point_DEU->Const_Omega; t++){
			q_x_final[t] = 0.9 * q_x_raw[t] * mortality_shock[t] * stec_trend[t] * dav_trend[t] * f_t[t];
		}
		q_x_final[this->model_point_DEU->Const_Omega]=1.0;

		l_x[this->model_point_DEU->deferment_age]=1.;
		for(int t=this->model_point_DEU->deferment_age+1; t<=this->model_point_DEU->Const_Omega; t++){
			l_x[t] = l_x[t-1] * (1 - q_x_final[t-1]);
		}
		delete[] f_t;
		delete[] dav_trend;
		delete[] stec_trend;
		delete[] mortality_shock;
		delete[] q_x_raw;
		delete[] q_x_final;

		double * male_help = new double[this->model_point_DEU->Const_Omega+1];
		double * female_help = new double[this->model_point_DEU->Const_Omega+1];
		double * q_x_table = new double[this->model_point_DEU->Const_Omega+1];
		double * selection = new double[this->model_point_DEU->Const_Omega+1];
		double * trend_table = new double[this->model_point_DEU->Const_Omega+1];
		double * q_x_raw_for_a_g = new double[this->model_point_DEU->Const_Omega+1];
		double * q_x_final_for_a_g = new double[this->model_point_DEU->Const_Omega+1];
		double * l_x_for_a_g = new double[this->model_point_DEU->Const_Omega+1];	

		male_help[60]=0.3;
		for(int t=61; t<=this->model_point_DEU->Const_Omega; t++){
			male_help[t] = male_help[t-1] * (1. - this->Assumption->aggregated_table_ac_m->quick_search(t-1,0));
		}
		for(int t=59; t>=0; t--){
			male_help[t] = male_help[t+1] / (1. - this->Assumption->aggregated_table_ac_m->quick_search(t,0));
		}

		female_help[60]=1-male_help[60];
		for(int t=61; t<=this->model_point_DEU->Const_Omega; t++){
			female_help[t] = female_help[t-1] * (1. - this->Assumption->aggregated_table_ac_f->quick_search(t-1,0));
		}
		for(int t=59; t>=0; t--){
			female_help[t] = female_help[t+1] / (1. - this->Assumption->aggregated_table_ac_f->quick_search(t,0));
		}

		for(int t=0; t<this->model_point_DEU->Const_Omega; t++){
			q_x_table[t] = (male_help[t] * this->Assumption->aggregated_table_ac_m->quick_search(t,0) + female_help[t] * this->Assumption->aggregated_table_ac_f->quick_search(t,0) ) / (male_help[t] + female_help[t]);
		}

		for(int t=this->model_point_DEU->deferment_age; t<=this->model_point_DEU->Const_Omega; t++){
			selection[t] = this->Assumption->selection_factor_m->quick_search(t-this->model_point_DEU->deferment_age+1,0) * male_help[60] + this->Assumption->selection_factor_f->quick_search(t-this->model_point_DEU->deferment_age+1,0) * female_help[60];
		}

		for(int t=this->model_point_DEU->deferment_age; t<=this->model_point_DEU->Const_Omega; t++){
			double trend = 0.;
			if(this->model_point_DEU->Calc_Unisex==1){trend = max(this->Assumption->trends_ac_1_2_m->quick_search(t,0),this->Assumption->trends_ac_1_2_f->quick_search(t,0));}
			else if(this->model_point_DEU->sex=="M"){trend = this->Assumption->trends_ac_1_2_m->quick_search(t,0);}
			else{trend = this->Assumption->trends_ac_1_2_f->quick_search(t,0);}
			trend_table[t] = exp(-trend*(election_year-1999+t-this->model_point_DEU->deferment_age));
		}

		for(int t=this->model_point_DEU->deferment_age; t<=this->model_point_DEU->Const_Omega; t++){
			q_x_raw_for_a_g[t] = q_x_table[t];
		}
		
		double mult_fact = 0.9;
		for(int t=this->model_point_DEU->deferment_age; t<=this->model_point_DEU->Const_Omega; t++){
			q_x_final_for_a_g[t] = mult_fact * q_x_raw_for_a_g[t] * trend_table[t] * selection[t];
		}
		q_x_final_for_a_g[this->model_point_DEU->Const_Omega]=1.0;

		l_x_for_a_g[this->model_point_DEU->deferment_age]=1.;
		for(int t=this->model_point_DEU->deferment_age+1; t<=this->model_point_DEU->Const_Omega; t++){
			l_x_for_a_g[t] = l_x_for_a_g[t-1] * (1 - q_x_final_for_a_g[t-1]);
		}

		double * ag_interest = new double[this->model_point_DEU->Const_Omega+1];
		ag_interest[this->model_point_DEU->deferment_age]=1;
		
		double interest_rate = 0.;
		if(this->model_point_DEU->riester_type==1){interest_rate=0.01;}
		else{interest_rate=0.0275;}
		for(int t=this->model_point_DEU->deferment_age+1; t<=this->model_point_DEU->Const_Omega; t++){
			ag_interest[t] = ag_interest[t-1] * (1. + interest_rate);
		}

		a_g = 0;
		for(int t=this->model_point_DEU->deferment_age; t<=this->model_point_DEU->Const_Omega; t++){
			a_g += l_x_for_a_g[t] / ag_interest[t];
		}
		


		male_help[60]=0.5;
		for(int t=61; t<=this->model_point_DEU->Const_Omega; t++){
			male_help[t] = male_help[t-1] * (1. - this->Assumption->aggregated_table_ac_m->quick_search(t-1,0));
		}
		for(int t=59; t>=0; t--){
			male_help[t] = male_help[t+1] / (1. - this->Assumption->aggregated_table_ac_m->quick_search(t,0));
		}

		female_help[60]=1-male_help[60];
		for(int t=61; t<=this->model_point_DEU->Const_Omega; t++){
			female_help[t] = female_help[t-1] * (1. - this->Assumption->aggregated_table_ac_f->quick_search(t-1,0));
		}
		for(int t=59; t>=0; t--){
			female_help[t] = female_help[t+1] / (1. - this->Assumption->aggregated_table_ac_f->quick_search(t,0));
		}

		for(int t=0; t<this->model_point_DEU->Const_Omega; t++){
			q_x_table[t] = (male_help[t] * this->Assumption->aggregated_table_ac_m->quick_search(t,0) + female_help[t] * this->Assumption->aggregated_table_ac_f->quick_search(t,0) ) / (male_help[t] + female_help[t]);
		}

		for(int t=this->model_point_DEU->deferment_age; t<=this->model_point_DEU->Const_Omega; t++){
			selection[t] = this->Assumption->selection_factor_m->quick_search(t-this->model_point_DEU->deferment_age+1,0) * male_help[60] + this->Assumption->selection_factor_f->quick_search(t-this->model_point_DEU->deferment_age+1,0) * female_help[60];
		}

		for(int t=this->model_point_DEU->deferment_age; t<=this->model_point_DEU->Const_Omega; t++){
			double trend = 0.;
			if(this->model_point_DEU->Calc_Unisex==1){trend = max(this->Assumption->trends_ac_1_2_m->quick_search(t,0),this->Assumption->trends_ac_1_2_f->quick_search(t,0));}
			else if(this->model_point_DEU->sex=="M"){trend = this->Assumption->trends_ac_1_2_m->quick_search(t,0);}
			else{trend = this->Assumption->trends_ac_1_2_f->quick_search(t,0);}
			trend_table[t] = exp(-trend*(election_year-1999+t-this->model_point_DEU->deferment_age));
		}

		for(int t=this->model_point_DEU->deferment_age; t<=this->model_point_DEU->Const_Omega; t++){
			q_x_raw_for_a_g[t] = q_x_table[t];
		}
		
		mult_fact = 1.0;
		for(int t=this->model_point_DEU->deferment_age; t<=this->model_point_DEU->Const_Omega; t++){
			q_x_final_for_a_g[t] = mult_fact * q_x_raw_for_a_g[t] * trend_table[t] * selection[t];
		}
		q_x_final_for_a_g[this->model_point_DEU->Const_Omega]=1.0;

		l_x_for_a_g[this->model_point_DEU->deferment_age]=1.;
		for(int t=this->model_point_DEU->deferment_age+1; t<=this->model_point_DEU->Const_Omega; t++){
			l_x_for_a_g[t] = l_x_for_a_g[t-1] * (1 - q_x_final_for_a_g[t-1]);
		}
		
		double * ags_interest = new double[this->model_point_DEU->Const_Omega+1];
		ags_interest[this->model_point_DEU->deferment_age]=1;
		for(int t=this->model_point_DEU->deferment_age+1; t<=this->model_point_DEU->Const_Omega; t++){
			ags_interest[t] = ags_interest[t-1] * (1. + 0.0325);
		}
		a_g_s = 0;
		for(int t=this->model_point_DEU->deferment_age; t<=this->model_point_DEU->Const_Omega; t++){
			a_g_s += l_x_for_a_g[t] / ags_interest[t];
		}
		
		delete[] ag_interest;
		delete[] ags_interest;
		delete[] male_help;
		delete[] female_help;
		delete[] q_x_table;
		delete[] selection;
		delete[] trend_table;
		delete[] q_x_raw_for_a_g;
		delete[] q_x_final_for_a_g;
		delete[] l_x_for_a_g;
	}

	void set_pvsScenOutput(Model_Point& mp,  unsigned int nScenPath_ip)
	{
	   	char message[MAX_LENGTH_MESSAGE_EXCEPTION];
		sprintf_s(message, "DEU don't support scen_by_scen output");
		throw new GMXBException(message);	
	}
};
