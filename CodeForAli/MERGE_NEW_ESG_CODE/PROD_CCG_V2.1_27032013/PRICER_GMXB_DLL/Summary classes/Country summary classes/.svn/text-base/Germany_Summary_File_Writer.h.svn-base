#pragma once

#include "Utility classes/Dispatch_Manager.h"

class Germany_Summary_File_Writer : public Summary_File_Writer
{

public:

	Germany_Summary_File_Writer(int nb_workers, Summary_configuration *summary, 
		const map<string, vector<string>>& map_scenario_names, 
		const map<string, vector<string>>& map_index_shock_names,
		Dispatch_Manager* dispatch_manager):
	Summary_File_Writer(nb_workers, summary, map_scenario_names,
		map_index_shock_names, dispatch_manager)
	{
	}

	double calculate_ehc(string product_code_key, Model_Point* mps, bool recalculate_ehc, bool is_new_ehc, double pv_charges_1, 
		double pv_charges_0, double pv_claims_1, double pv_claims_0, double pv_dep_fee_0,
		double pv_dep_fee_1, double pv_sum_of_premium_1, double pv_sum_of_premium_0, double rrc_1, double rrc_0, double ehc_1, double ehc_0)
	{
		double ehc = 0.;
		if (product_code_key == "DEU_IAB01" || product_code_key == "DEU_IAB02" || product_code_key == "DEU_IDB01" || product_code_key == "DEU_IDB02")
		{
			Model_Point_DEU *mp = dynamic_cast<Model_Point_DEU*>(mps);

			if (recalculate_ehc)
			{
				if (!is_new_ehc)
				{
					// old file
					ehc = mp->gmxb_ehc_charge;	
				}
				else
				{	/*recalc file*/
					if (pv_charges_1 != 0)
						ehc =  (rrc_1/pv_charges_1) * 
						(pv_claims_1 - pv_dep_fee_1 - pv_sum_of_premium_1 - (pv_claims_0 - pv_dep_fee_0 - pv_sum_of_premium_0) + ((ehc_0/rrc_0) * pv_charges_0));
					else
					{
						char message[MAX_LENGTH_MESSAGE_EXCEPTION];
						sprintf_s(message, "Charges equal 0 for policy number %s ", mp->policy_id.c_str());
						throw new GMXBException(message);			
					}
				}
			}
			else
			{	/*NB file*/
				if (pv_charges_1 != 0)
					ehc = ((pv_claims_1 - pv_dep_fee_1 - pv_sum_of_premium_1) /pv_charges_1) * mp->gmxb_chg_perc;
				else
				{
					char message[MAX_LENGTH_MESSAGE_EXCEPTION];
					sprintf_s(message, "Charges equal 0 for policy number %s ", mp->policy_id.c_str());
					throw new GMXBException(message);		
				}

			}
		}
		else
		{
			Model_Point_DEU_IADB05 *mp = dynamic_cast<Model_Point_DEU_IADB05*>(mps);

			if (recalculate_ehc)
			{
				if (!is_new_ehc)
				{
					// Read directly the ehc from the inforce file
					ehc = mp->Gmxb_EHC_cost;	
				}
				else
				{	/*recalc file*/
					if (pv_charges_1 != 0)
						ehc =  (1.0/pv_charges_1) * (pv_claims_1 - pv_claims_0 + (ehc_0 * pv_charges_0));
					else
					{
						char message[MAX_LENGTH_MESSAGE_EXCEPTION];
						sprintf_s(message, "Charges equal 0 for policy number %s ", mp->policy_id.c_str());
						throw new GMXBException(message);			
					}
				}
			}
			else
			{	/*NB file*/
				if (pv_charges_1 != 0)
					ehc = (pv_claims_1 /pv_charges_1) * 1.0;
				else
				{
					char message[MAX_LENGTH_MESSAGE_EXCEPTION];
					sprintf_s(message, "Charges equal 0 for policy number %s ", mp->policy_id.c_str());
					throw new GMXBException(message);		
				}
			}
		}
		return ehc;
	}

	void fill_ehc_map(const map<string, vector<Model_Point*>>& mps,
		map<string, vector<double>>& map_ehc_values,
		const map<string, map<int,map<int, vector<vector<double>>>>>& index_results_map,
		const map<string, map<int,map<int, vector<vector<double>>>>>& fund_results_map,
		map<string, vector<int>>& indexes_policies_NB,
		map<string, vector<int>>& indexes_policies_recalc_old,
		map<string, vector<int>>& indexes_policies_recalc_new,
		map<string, vector<double>>& map_ehc_values_NB,
		map<string, vector<double>>& map_ehc_values_recalc_old,
		map<string, vector<double>>& map_ehc_values_recalc_new
		)
	{
		this->nb_of_policies_NB = 0;
		this->nb_of_policies_recalc_old = 0;
		this->nb_of_policies_recalc_new = 0;

		// Loop on the model points vector
		for(map<string, vector<Model_Point*>>::const_iterator iter_mp = mps.begin();
			iter_mp != mps.end(); ++iter_mp)
		{
			string product_code_key = iter_mp->first;
			// Get the pvs from the index_results_map

			vector<vector<double>>  pvs_ehc_scenarios;

			for (map<string, map<int,map<int, vector<vector<double>>>>>::const_iterator it_index_res = index_results_map.begin();
				it_index_res != index_results_map.end(); ++it_index_res)
			{
				string pCK = it_index_res->first;

				if (product_code_key == pCK)
				{
					for (map<int,map<int, vector<vector<double>>>>::const_iterator it_index_res_scen_1 = it_index_res->second.begin();
						it_index_res_scen_1 != it_index_res->second.end(); ++it_index_res_scen_1)
					{
						if (it_index_res_scen_1->first == summary_configuration->get_ehc_scen_pass_num())
						{

							for (map<int, vector<vector<double>>>::const_iterator it_index_res_scen_1_shock_1 = it_index_res_scen_1->second.begin();
								it_index_res_scen_1_shock_1 != it_index_res_scen_1->second.end(); ++it_index_res_scen_1_shock_1)
							{

								if (it_index_res_scen_1_shock_1->first == 0)
								{
									pvs_ehc_scenarios = it_index_res_scen_1_shock_1->second;
								}
							}
							break;
						}
					}

					break;
				}

			}

			if (product_code_key == "DEU_IAB01" || product_code_key == "DEU_IAB02" || product_code_key == "DEU_IDB01" || product_code_key == "DEU_IDB02")
			{
				if (pvs_ehc_scenarios.size() == 0)
				{
					char message[MAX_LENGTH_MESSAGE_EXCEPTION];
					sprintf_s(message, " No pvs found for the specified ehc scenario");
					throw new GMXBException(message);								 
				}

				vector<int> v_NB;
				vector<int> v_recalc_old;
				vector<int> v_recalc_new;

				vector<double> ehc_NB;
				vector<double> ehc_recalc_old;
				vector<double> ehc_recalc_new;

				vector<double> ehc_v;
				vector<Model_Point *> v_mps = iter_mp->second;
				for (unsigned int i = 0 ; i < v_mps.size(); i++)
				{
					// If the policy id contains _0 : ehc provided in inforce file
					//							 _1 : ehc recalculation
					Model_Point_DEU *mp = dynamic_cast<Model_Point_DEU*>(v_mps[i]);
					double ehc = 0.;

					double pv_charges_0 = 0.; 
					double pv_claims_1 = 0.; 
					double pv_charges_1 = 0.; 
					double pv_claims_0 = 0.;
					double pv_dep_fee_0 = 0.;
					double pv_dep_fee_1 = 0.;
					double pv_sum_of_premium_0 = 0.;
					double pv_sum_of_premium_1 = 0.;

					if (mp->group.substr(mp->group.length() - 2, mp->group.length() - 1) == "_1")
					{
						bool recalculate_ehc = false;
						// Check if a corresponding _0 policy 
						// exist in the vector of model points
						string group_id_0 = mp->group.substr(0, mp->group.length() - 2) + "_0";
						int id_group_id_0 = -1;
						double rrc_0 = -1;
						double ehc_0 = -1;
						for (unsigned int j = 0; j < v_mps.size(); j++)
						{
							Model_Point_DEU *model_point = dynamic_cast<Model_Point_DEU*>(v_mps[j]);
							if (model_point->group == group_id_0)
							{
								recalculate_ehc = true;
								id_group_id_0 = j;
								rrc_0 = model_point->gmxb_chg_perc;
								ehc_0 = model_point->gmxb_ehc_charge;
								break;
							}
						}

						pv_charges_1 = pvs_ehc_scenarios[i][PV_REAL_CHARGES_DEU];
						pv_claims_1 = pvs_ehc_scenarios[i][PV_GMAB_TOT]+ pvs_ehc_scenarios[i][PV_GMDB_TOT]
						+ pvs_ehc_scenarios[i][PV_GMIB_TOT];
						pv_dep_fee_1 = pvs_ehc_scenarios[i][PV_DEP_FEE_TOT];
						pv_sum_of_premium_1 = pvs_ehc_scenarios[i][PV_DEP_FEE_SUM_TOT];

						if (recalculate_ehc)
						{
							// Get the pvs for the 
							// _0 model point and the _1 model points

							pv_charges_0 = pvs_ehc_scenarios[id_group_id_0][PV_REAL_CHARGES_DEU];
							pv_claims_0 = pvs_ehc_scenarios[id_group_id_0][PV_GMAB_TOT]+ pvs_ehc_scenarios[id_group_id_0][PV_GMDB_TOT]
							+ pvs_ehc_scenarios[id_group_id_0][PV_GMIB_TOT];
							pv_dep_fee_0 = pvs_ehc_scenarios[id_group_id_0][PV_DEP_FEE_TOT];
							pv_sum_of_premium_0 = pvs_ehc_scenarios[id_group_id_0][PV_DEP_FEE_SUM_TOT];

							v_recalc_new.push_back(i);

							double rrc_1 = mp->gmxb_chg_perc;
							double ehc_1 = mp->gmxb_ehc_charge;
							ehc = this->calculate_ehc(product_code_key, mp, recalculate_ehc, true, pv_charges_1, pv_charges_0, pv_claims_1, pv_claims_0, 
								pv_dep_fee_1, pv_dep_fee_0, pv_sum_of_premium_1, pv_sum_of_premium_0, rrc_1, rrc_0, ehc_1, ehc_0);
							ehc_recalc_new.push_back(ehc);					
						}
						else
						{
							v_NB.push_back(i);
							ehc = this->calculate_ehc(product_code_key, mp, recalculate_ehc, false, pv_charges_1, pv_charges_0, pv_claims_1, pv_claims_0,
								pv_dep_fee_1, pv_dep_fee_0, pv_sum_of_premium_1, pv_sum_of_premium_0, 0, 0, 0, 0);
							ehc_NB.push_back(ehc);
						}
					}
					else if (mp->group.substr(mp->group.length() - 2, mp->group.length() - 1) == "_0")
					{
						v_recalc_old.push_back(i);
						ehc = this->calculate_ehc(product_code_key, mp, true, false, pv_charges_1, pv_charges_0, pv_claims_1, pv_claims_0,
							pv_dep_fee_1, pv_dep_fee_0, pv_sum_of_premium_1, pv_sum_of_premium_0, 0, 0, 0, 0);
						ehc_recalc_old.push_back(ehc);
					}
					else
					{
						char message[MAX_LENGTH_MESSAGE_EXCEPTION];
						sprintf_s(message, "_0 or _1 is necessary for ehc recalculation");
						throw new GMXBException(message);					
					}

					ehc_v.push_back(ehc);
				}

				map_ehc_values[product_code_key] = ehc_v;

				indexes_policies_NB[product_code_key] = v_NB;

				indexes_policies_recalc_old[product_code_key] = v_recalc_old;

				indexes_policies_recalc_new[product_code_key] = v_recalc_new;

				this->nb_of_policies_NB += v_NB.size();
				this->nb_of_policies_recalc_old += v_recalc_old.size();
				this->nb_of_policies_recalc_new +=  v_recalc_new.size();

				map_ehc_values_NB[product_code_key] = ehc_NB;
				map_ehc_values_recalc_old[product_code_key] =  ehc_recalc_old;
				map_ehc_values_recalc_new[product_code_key] =  ehc_recalc_new;
			}
			else
			{
				if (pvs_ehc_scenarios.size() == 0)
				{
					char message[MAX_LENGTH_MESSAGE_EXCEPTION];
					sprintf_s(message, " No pvs found for the specified ehc scenario");
					throw new GMXBException(message);								 
				}

				vector<int> v_NB;
				vector<int> v_recalc_old;
				vector<int> v_recalc_new;


				vector<double> ehc_NB;
				vector<double> ehc_recalc_old;
				vector<double> ehc_recalc_new;

				vector<double> ehc_v;
				vector<Model_Point *> v_mps = iter_mp->second;
				for (unsigned int i = 0 ; i < v_mps.size(); i++)
				{
					// If the policy id contains _0 : ehc provided in inforce file
					//							 _1 : ehc recalculation
					Model_Point_DEU_IADB05 *mp = dynamic_cast<Model_Point_DEU_IADB05*>(v_mps[i]);
					double ehc = 0.;

					double pv_charges_0 = 0.; 
					double pv_claims_1 = 0.; 
					double pv_charges_1 = 0.; 
					double pv_claims_0 = 0.;
					double pv_dep_fee_0 = 0.;
					double pv_dep_fee_1 = 0.;
					double pv_sum_of_premium_0 = 0.;
					double pv_sum_of_premium_1 = 0.;


					if (mp->group.substr(mp->group.length() - 2, mp->group.length() - 1) == "_1")
					{
						bool recalculate_ehc = false;
						// Check if a corresponding _0 policy 
						// exist in the vector of model points
						string group_id_0 = mp->group.substr(0, mp->group.length() - 2) + "_0";
						int id_group_id_0 = -1;
						double rrc_0 = -1;
						double ehc_0 = -1;
						for (unsigned int j = 0; j < v_mps.size(); j++)
						{
							Model_Point_DEU_IADB05 *model_point = dynamic_cast<Model_Point_DEU_IADB05*>(v_mps[j]);

							if (model_point->group == group_id_0)
							{
								recalculate_ehc = true;
								id_group_id_0 = j;
								rrc_0 = model_point->Gmxb_guaranted_cost;
								ehc_0 = model_point->Gmxb_EHC_cost;
								break;
							}
						}


						pv_charges_1 = pvs_ehc_scenarios[i][PV_REAL_CHARGES_DEU];
						pv_claims_1 = pvs_ehc_scenarios[i][PV_GMAB_TOT]+ pvs_ehc_scenarios[i][PV_GMDB_TOT]
						+ pvs_ehc_scenarios[i][PV_GMIB_TOT];
                        pv_dep_fee_1 = pvs_ehc_scenarios[i][PV_DEP_FEE_TOT_CHI];
						pv_sum_of_premium_1 = pvs_ehc_scenarios[i][PV_DEP_FEE_SUM_TOT_CHI];

						if (recalculate_ehc)
						{
							// Get the pvs for the 
							// _0 model point and the _1 model points

							pv_charges_0 = pvs_ehc_scenarios[id_group_id_0][PV_REAL_CHARGES_DEU];
							pv_claims_0 = pvs_ehc_scenarios[id_group_id_0][PV_GMAB_TOT]+ pvs_ehc_scenarios[id_group_id_0][PV_GMDB_TOT]
							+ pvs_ehc_scenarios[id_group_id_0][PV_GMIB_TOT];
							pv_dep_fee_0 = pvs_ehc_scenarios[id_group_id_0][PV_DEP_FEE_TOT_CHI];
							pv_sum_of_premium_0 = pvs_ehc_scenarios[id_group_id_0][PV_DEP_FEE_SUM_TOT_CHI];

							v_recalc_new.push_back(i);

							double rrc_1 = mp->Gmxb_guaranted_cost;
							double ehc_1 = mp->Gmxb_EHC_cost;
							ehc = this->calculate_ehc(product_code_key, mp, recalculate_ehc, true, pv_charges_1, pv_charges_0, pv_claims_1, pv_claims_0, 
								pv_dep_fee_1, pv_dep_fee_0, pv_sum_of_premium_1, pv_sum_of_premium_0, rrc_1, rrc_0, ehc_1, ehc_0);
							ehc_recalc_new.push_back(ehc);					
						}
						else
						{
							v_NB.push_back(i);
							ehc = this->calculate_ehc(product_code_key, mp, recalculate_ehc, false, pv_charges_1, pv_charges_0, pv_claims_1, pv_claims_0,
								pv_dep_fee_1, pv_dep_fee_0, pv_sum_of_premium_1, pv_sum_of_premium_0, 0, 0, 0, 0);
							ehc_NB.push_back(ehc);
						}
					}
					else if (mp->group.substr(mp->group.length() - 2, mp->group.length() - 1) == "_0")
					{
						v_recalc_old.push_back(i);
						ehc = this->calculate_ehc(product_code_key, mp, true, false, pv_charges_1, pv_charges_0, pv_claims_1, pv_claims_0,
							pv_dep_fee_1, pv_dep_fee_0, pv_sum_of_premium_1, pv_sum_of_premium_0, 0, 0, 0, 0);
						ehc_recalc_old.push_back(ehc);
					}
					else
					{
						char message[MAX_LENGTH_MESSAGE_EXCEPTION];
						sprintf_s(message, "_0 or _1 is necessary for ehc recalculation");
						throw new GMXBException(message);					
					}

					ehc_v.push_back(ehc);
				}

				map_ehc_values[product_code_key] = ehc_v;

				indexes_policies_NB[product_code_key] = v_NB;

				indexes_policies_recalc_old[product_code_key] = v_recalc_old;

				indexes_policies_recalc_new[product_code_key] = v_recalc_new;

				this->nb_of_policies_NB += v_NB.size();
				this->nb_of_policies_recalc_old += v_recalc_old.size();
				this->nb_of_policies_recalc_new +=  v_recalc_new.size();

				map_ehc_values_NB[product_code_key] = ehc_NB;
				map_ehc_values_recalc_old[product_code_key] =  ehc_recalc_old;
				map_ehc_values_recalc_new[product_code_key] =  ehc_recalc_new;

			}
		}
	}

	void fill_ehc_map_esg(const map<string, vector<Model_Point*>>& mps,
									 map<string, vector<double>>& map_ehc_values,
									const map<string, map<int, map<int,map<int, vector<vector<double>>>>>>& index_results_map,
									const map<string, map<int, map<int,map<int, vector<vector<double>>>>>>& fund_results_map,
									map<string, vector<int>>& indexes_policies_NB,
									map<string, vector<int>>& indexes_policies_recalc_old,
									map<string, vector<int>>& indexes_policies_recalc_new,
									map<string, vector<double>>& map_ehc_values_NB,
									map<string, vector<double>>& map_ehc_values_recalc_old,
									map<string, vector<double>>& map_ehc_values_recalc_new
									)
	{
		
		this->nb_of_policies_NB = 0;
		this->nb_of_policies_recalc_old = 0;
		this->nb_of_policies_recalc_new = 0;
		
		// Loop on the model points vector
		for(map<string, vector<Model_Point*>>::const_iterator iter_mp = mps.begin();
				iter_mp != mps.end(); ++iter_mp)
		{
			string product_code_key = iter_mp->first;
			// Get the pvs from the index_results_map
			
			 vector<vector<double>>  pvs_ehc_scenarios;

			 for (map<string, map<int, map<int,map<int, vector<vector<double>>>>>>::const_iterator it_index_res = index_results_map.begin();
				 it_index_res != index_results_map.end(); ++it_index_res)
			 {
				 string pCK = it_index_res->first;

				 if (product_code_key == pCK)
				 {
					 for (map<int, map<int,map<int, vector<vector<double>>>>>::const_iterator it_index_res_scen_1 = it_index_res->second.begin();
						 it_index_res_scen_1 != it_index_res->second.end(); ++it_index_res_scen_1)
					 {
                         if (it_index_res_scen_1->first == summary_configuration->get_ehc_scen_pass_num())
						 {
							 for (map<int,map<int, vector<vector<double>>>>::const_iterator it_index_res_bucket_1 = it_index_res_scen_1->second.begin();
								 it_index_res_bucket_1 != it_index_res_scen_1->second.end(); ++it_index_res_bucket_1)
							 {
								 if (it_index_res_bucket_1->first == 1)
								 { 
									 for (map<int, vector<vector<double>>>::const_iterator it_index_res_scen_1_shock_1 = it_index_res_bucket_1->second.begin();
										 it_index_res_scen_1_shock_1 != it_index_res_bucket_1->second.end(); ++it_index_res_scen_1_shock_1)
									 {

										 if (it_index_res_scen_1_shock_1->first == 0)
										 {
											 pvs_ehc_scenarios = it_index_res_scen_1_shock_1->second;
											 break;
										 }
									 }
									 break;
								 }
							 }
							 break;
						 }
					 }
					 break;
				 }
			 }

			 if (product_code_key == "DEU_IAB01" || product_code_key == "DEU_IAB02" || product_code_key == "DEU_IDB01" || product_code_key == "DEU_IDB02")
			{
				if (pvs_ehc_scenarios.size() == 0)
				{
					char message[MAX_LENGTH_MESSAGE_EXCEPTION];
					sprintf_s(message, " No pvs found for the specified ehc scenario");
					throw new GMXBException(message);								 
				}

				vector<int> v_NB;
				vector<int> v_recalc_old;
				vector<int> v_recalc_new;

				vector<double> ehc_NB;
				vector<double> ehc_recalc_old;
				vector<double> ehc_recalc_new;

				vector<double> ehc_v;
				vector<Model_Point *> v_mps = iter_mp->second;
				for (unsigned int i = 0 ; i < v_mps.size(); i++)
				{
					// If the policy id contains _0 : ehc provided in inforce file
					//							 _1 : ehc recalculation
					Model_Point_DEU *mp = dynamic_cast<Model_Point_DEU*>(v_mps[i]);
					double ehc = 0.;

					double pv_charges_0 = 0.; 
					double pv_claims_1 = 0.; 
					double pv_charges_1 = 0.; 
					double pv_claims_0 = 0.;
					double pv_dep_fee_0 = 0.;
					double pv_dep_fee_1 = 0.;
					double pv_sum_of_premium_0 = 0.;
					double pv_sum_of_premium_1 = 0.;


					if (mp->group.substr(mp->group.length() - 2, mp->group.length() - 1) == "_1")
					{
						bool recalculate_ehc = false;
						// Check if a corresponding _0 policy 
						// exist in the vector of model points
						string group_id_0 = mp->group.substr(0, mp->group.length() - 2) + "_0";
						int id_group_id_0 = -1;
						double rrc_0 = -1;
						double ehc_0 = -1;
						for (unsigned int j = 0; j < v_mps.size(); j++)
						{
							Model_Point_DEU *model_point = dynamic_cast<Model_Point_DEU*>(v_mps[j]);
							if (model_point->group == group_id_0)
							{
								recalculate_ehc = true;
								id_group_id_0 = j;
								rrc_0 = model_point->gmxb_chg_perc;
								ehc_0 = model_point->gmxb_ehc_charge;
								break;
							}
						}

						pv_charges_1 = pvs_ehc_scenarios[i][PV_REAL_CHARGES_DEU];
						pv_claims_1 = pvs_ehc_scenarios[i][PV_GMAB_TOT]+ pvs_ehc_scenarios[i][PV_GMDB_TOT]
						+ pvs_ehc_scenarios[i][PV_GMIB_TOT];
						pv_dep_fee_1 = pvs_ehc_scenarios[i][PV_DEP_FEE_TOT];
						pv_sum_of_premium_1 = pvs_ehc_scenarios[i][PV_DEP_FEE_SUM_TOT];

						if (recalculate_ehc)
						{
							// Get the pvs for the 
							// _0 model point and the _1 model points

							pv_charges_0 = pvs_ehc_scenarios[id_group_id_0][PV_REAL_CHARGES_DEU];
							pv_claims_0 = pvs_ehc_scenarios[id_group_id_0][PV_GMAB_TOT]+ pvs_ehc_scenarios[id_group_id_0][PV_GMDB_TOT]
							+ pvs_ehc_scenarios[id_group_id_0][PV_GMIB_TOT];
							pv_dep_fee_0 = pvs_ehc_scenarios[id_group_id_0][PV_DEP_FEE_TOT];
							pv_sum_of_premium_0 = pvs_ehc_scenarios[id_group_id_0][PV_DEP_FEE_SUM_TOT];

							v_recalc_new.push_back(i);

							double rrc_1 = mp->gmxb_chg_perc;
							double ehc_1 = mp->gmxb_ehc_charge;
							ehc = this->calculate_ehc(product_code_key, mp, recalculate_ehc, true, pv_charges_1, pv_charges_0, pv_claims_1, pv_claims_0, 
								pv_dep_fee_1, pv_dep_fee_0, pv_sum_of_premium_1, pv_sum_of_premium_0, rrc_1, rrc_0, ehc_1, ehc_0);
							ehc_recalc_new.push_back(ehc);					
						}
						else
						{
							v_NB.push_back(i);
							ehc = this->calculate_ehc(product_code_key, mp, recalculate_ehc, false, pv_charges_1, pv_charges_0, pv_claims_1, pv_claims_0,
								pv_dep_fee_1, pv_dep_fee_0, pv_sum_of_premium_1, pv_sum_of_premium_0, 0, 0, 0, 0);
							ehc_NB.push_back(ehc);
						}
					}
					else if (mp->group.substr(mp->group.length() - 2, mp->group.length() - 1) == "_0")
					{
						v_recalc_old.push_back(i);
						ehc = this->calculate_ehc(product_code_key, mp, true, false, pv_charges_1, pv_charges_0, pv_claims_1, pv_claims_0,
							pv_dep_fee_1, pv_dep_fee_0, pv_sum_of_premium_1, pv_sum_of_premium_0, 0, 0, 0, 0);
						ehc_recalc_old.push_back(ehc);
					}
					else
					{
						char message[MAX_LENGTH_MESSAGE_EXCEPTION];
						sprintf_s(message, "_0 or _1 is necessary for ehc recalculation");
						throw new GMXBException(message);					
					}

					ehc_v.push_back(ehc);
				}

				map_ehc_values[product_code_key] = ehc_v;

				indexes_policies_NB[product_code_key] = v_NB;

				indexes_policies_recalc_old[product_code_key] = v_recalc_old;

				indexes_policies_recalc_new[product_code_key] = v_recalc_new;

				this->nb_of_policies_NB += v_NB.size();
				this->nb_of_policies_recalc_old += v_recalc_old.size();
				this->nb_of_policies_recalc_new +=  v_recalc_new.size();

				map_ehc_values_NB[product_code_key] = ehc_NB;
				map_ehc_values_recalc_old[product_code_key] =  ehc_recalc_old;
				map_ehc_values_recalc_new[product_code_key] =  ehc_recalc_new;

			}
			else
			{
				if (pvs_ehc_scenarios.size() == 0)
				{
					char message[MAX_LENGTH_MESSAGE_EXCEPTION];
					sprintf_s(message, " No pvs found for the specified ehc scenario");
					throw new GMXBException(message);								 
				}

				vector<int> v_NB;
				vector<int> v_recalc_old;
				vector<int> v_recalc_new;


				vector<double> ehc_NB;
				vector<double> ehc_recalc_old;
				vector<double> ehc_recalc_new;

				vector<double> ehc_v;
				vector<Model_Point *> v_mps = iter_mp->second;
				for (unsigned int i = 0 ; i < v_mps.size(); i++)
				{
					// If the policy id contains _0 : ehc provided in inforce file
					//							 _1 : ehc recalculation
					Model_Point_DEU_IADB05 *mp = dynamic_cast<Model_Point_DEU_IADB05*>(v_mps[i]);
					double ehc = 0.;

					double pv_charges_0 = 0.; 
					double pv_claims_1 = 0.; 
					double pv_charges_1 = 0.; 
					double pv_claims_0 = 0.;
					double pv_dep_fee_0 = 0.;
					double pv_dep_fee_1 = 0.;
					double pv_sum_of_premium_0 = 0.;
					double pv_sum_of_premium_1 = 0.;

					if (mp->group.substr(mp->group.length() - 2, mp->group.length() - 1) == "_1")
					{
						bool recalculate_ehc = false;
						// Check if a corresponding _0 policy 
						// exist in the vector of model points
						string group_id_0 = mp->group.substr(0, mp->group.length() - 2) + "_0";
						int id_group_id_0 = -1;
						double rrc_0 = -1;
						double ehc_0 = -1;
						for (unsigned int j = 0; j < v_mps.size(); j++)
						{
							Model_Point_DEU_IADB05 *model_point = dynamic_cast<Model_Point_DEU_IADB05*>(v_mps[j]);

							if (model_point->group == group_id_0)
							{
								recalculate_ehc = true;
								id_group_id_0 = j;
								rrc_0 = model_point->Gmxb_guaranted_cost;
								ehc_0 = model_point->Gmxb_EHC_cost;
								break;
							}
						}


						pv_charges_1 = pvs_ehc_scenarios[i][PV_REAL_CHARGES_DEU];
						pv_claims_1 = pvs_ehc_scenarios[i][PV_GMAB_TOT]+ pvs_ehc_scenarios[i][PV_GMDB_TOT]
						+ pvs_ehc_scenarios[i][PV_GMIB_TOT];
						pv_dep_fee_1 = pvs_ehc_scenarios[i][PV_DEP_FEE_TOT_CHI];
						pv_sum_of_premium_1 = pvs_ehc_scenarios[i][PV_DEP_FEE_SUM_TOT_CHI];

						if (recalculate_ehc)
						{
							// Get the pvs for the 
							// _0 model point and the _1 model points

							pv_charges_0 = pvs_ehc_scenarios[id_group_id_0][PV_REAL_CHARGES_DEU];
							pv_claims_0 = pvs_ehc_scenarios[id_group_id_0][PV_GMAB_TOT]+ pvs_ehc_scenarios[id_group_id_0][PV_GMDB_TOT]
							+ pvs_ehc_scenarios[id_group_id_0][PV_GMIB_TOT];
							pv_dep_fee_0 = pvs_ehc_scenarios[id_group_id_0][PV_DEP_FEE_TOT_CHI];
							pv_sum_of_premium_0 = pvs_ehc_scenarios[id_group_id_0][PV_DEP_FEE_SUM_TOT_CHI];

							v_recalc_new.push_back(i);

							double rrc_1 = mp->Gmxb_guaranted_cost;
							double ehc_1 = mp->Gmxb_EHC_cost;
							ehc = this->calculate_ehc(product_code_key, mp, recalculate_ehc, true, pv_charges_1, pv_charges_0, pv_claims_1, pv_claims_0, 
								pv_dep_fee_1, pv_dep_fee_0, pv_sum_of_premium_1, pv_sum_of_premium_0, rrc_1, rrc_0, ehc_1, ehc_0);
							ehc_recalc_new.push_back(ehc);					
						}
						else
						{
							v_NB.push_back(i);
							ehc = this->calculate_ehc(product_code_key, mp, recalculate_ehc, false, pv_charges_1, pv_charges_0, pv_claims_1, pv_claims_0,
								pv_dep_fee_1, pv_dep_fee_0, pv_sum_of_premium_1, pv_sum_of_premium_0, 0, 0, 0, 0);
							ehc_NB.push_back(ehc);
						}
					}
					else if (mp->group.substr(mp->group.length() - 2, mp->group.length() - 1) == "_0")
					{
						v_recalc_old.push_back(i);
						ehc = this->calculate_ehc(product_code_key, mp, true, false, pv_charges_1, pv_charges_0, pv_claims_1, pv_claims_0,
							pv_dep_fee_1, pv_dep_fee_0, pv_sum_of_premium_1, pv_sum_of_premium_0, 0, 0, 0, 0);
						ehc_recalc_old.push_back(ehc);
					}
					else
					{
						char message[MAX_LENGTH_MESSAGE_EXCEPTION];
						sprintf_s(message, "_0 or _1 is necessary for ehc recalculation");
						throw new GMXBException(message);					
					}

					ehc_v.push_back(ehc);
				}

				map_ehc_values[product_code_key] = ehc_v;

				indexes_policies_NB[product_code_key] = v_NB;

				indexes_policies_recalc_old[product_code_key] = v_recalc_old;

				indexes_policies_recalc_new[product_code_key] = v_recalc_new;

				this->nb_of_policies_NB += v_NB.size();
				this->nb_of_policies_recalc_old += v_recalc_old.size();
				this->nb_of_policies_recalc_new +=  v_recalc_new.size();

				map_ehc_values_NB[product_code_key] = ehc_NB;
				map_ehc_values_recalc_old[product_code_key] =  ehc_recalc_old;
				map_ehc_values_recalc_new[product_code_key] =  ehc_recalc_new;

			}
		}
	}

	void write_sensi_file(const string& sensi_file_name, const map<string, vector<Model_Point*>>& mps,
		const map<string, map<int,map<int, vector<vector<double>>>>>& index_results_map,
		map<string, vector<double>>& map_ehc_values, const map<int,vector<double>>& map_calib_parameters,
		double nb_of_policies)
	{

		char sensitivities_file_name[MAX_LENGTH_FILE_NAME];
		sprintf(sensitivities_file_name, "%s", sensi_file_name.c_str());

		ofstream sensi_file(sensitivities_file_name);
		sensi_file  << "scenario, total_agg_real_charges,total_agg_ehc_chi_charges,total_dep_fees,total_sum_prem_fees,total_paid_prem_fees,total_Claims_AB,total_Claims_IB,total_Claims_DB,total_Claims_WB,total_Claims_SB, a, sigma,Total_Police_nb,DLL_Version" << endl;

		for (map<int, vector<vector<int>>>::const_iterator iter_scen_pass_num = this->index_map_shocks.begin(); 
			iter_scen_pass_num != this->index_map_shocks.end(); ++iter_scen_pass_num)
		{
			int scen_pass_n = iter_scen_pass_num->first;
			vector<vector<int>> index_shock_array = iter_scen_pass_num->second;
			int size_of_index_shock_array = index_shock_array.size();
			for(int s = 0; s < size_of_index_shock_array; s++ )
			{

				int index_shock_number = this->get_shock_number(index_shock_array, s, MAX_DELTA_SHOCKS_PER_INDEX, MAXIMUM_NUMBER_OF_INDEXES);

				//Andrei
				double total_agg_real_charges = 0.;
				double total_agg_ehc_chi_charges = 0.;
				double total_dep_fees = 0.;
				double total_sum_prem_fees = 0.;
				double total_paid_prem_fees = 0.;
				double total_Claims_AB = 0.;
				double total_Claims_IB = 0.;
				double total_Claims_DB = 0.;
				double total_Claims_WB = 0.;
				double total_Claims_SB = 0.;

				// Loop on the products
				for(map<string, vector<Model_Point*>>::const_iterator iter_mp = mps.begin();
					iter_mp != mps.end(); ++iter_mp)
				{
					string pCK = iter_mp->first;
					vector<Model_Point*> model_points = iter_mp->second;
					vector<vector<double>> pvs = this->get_pvs_vector(pCK, scen_pass_n, index_shock_number, index_results_map);

					vector<double> ehc_values = map_ehc_values[pCK];
					int number_of_mps = model_points.size();

					for(int i = 0; i < number_of_mps; i++)
					{
						double ehc_value = ehc_values[i];
						vector<double> pv = pvs[i];

						if( pCK == "DEU_IAB01" || pCK == "DEU_IAB02" || pCK == "DEU_IDB01" || pCK == "DEU_IDB02" )
						{
							Model_Point_DEU *model_p = dynamic_cast<Model_Point_DEU*>(model_points[i]);

							total_agg_real_charges += pv[PV_REAL_CHARGES_DEU];
							total_agg_ehc_chi_charges += pv[PV_EHC_CHARGES_DEU] * ehc_value / model_p->gmxb_chg_perc;
							total_dep_fees += pv[PV_DEP_FEE_TOT];
							total_sum_prem_fees += pv[PV_DEP_FEE_SUM_TOT];
							total_paid_prem_fees += 0.;
							total_Claims_AB += pv[PV_GMAB_TOT];
							total_Claims_IB += pv[PV_GMIB_TOT];
							total_Claims_DB += pv[PV_GMDB_TOT];
						}
						else
						{
							Model_Point_DEU_IADB05 *model_p = dynamic_cast<Model_Point_DEU_IADB05*>(model_points[i]);

							total_agg_real_charges += pv[PV_REAL_CHARGES_DEU];
							total_agg_ehc_chi_charges += pv[PV_EHC_CHARGES_DEU] * ehc_value / model_p->Gmxb_guaranted_cost;
							//cout << "total_agg_ehc_chi_charges " << setprecision(15) << total_agg_ehc_chi_charges << endl;
							//cout << "pv[PV_EHC_CHARGES_DEU]  " << setprecision(15) << pv[PV_EHC_CHARGES_DEU]  << endl;
							//cout << "ehc_value " << setprecision(15) << ehc_value << endl;
							//cout << "Gmxb_guaranted_cost " << setprecision(15) << model_p->Gmxb_guaranted_cost << endl;			

							total_dep_fees += pv[PV_DEP_FEE_TOT_CHI];
							total_sum_prem_fees += pv[PV_DEP_FEE_SUM_TOT_CHI];
							total_paid_prem_fees += pv[PV_HC_PP_AV_TOT_CHI];
							total_Claims_AB += pv[PV_GMAB_TOT];
							total_Claims_IB += pv[PV_GMIB_TOT];
							total_Claims_DB += pv[PV_GMDB_TOT];					
						}

						total_Claims_WB += 0.;
						total_Claims_SB += 0.;
					}
				}


				ostringstream oss_scen_pass_n;
				ostringstream oss_shock_n;

				string scenario_full_name;
				string scenario_name = "";
				string index_shock_name = "";

				oss_scen_pass_n << scen_pass_n;
				oss_shock_n << index_shock_number;
				scenario_name = this->list_scenario_names[oss_scen_pass_n.str()][0];

				if (index_shock_number > 0)
				{
					index_shock_name = this->list_index_shock_names[oss_shock_n.str()][0];
					scenario_full_name = scenario_name + " " + index_shock_name;
				}
				else
					scenario_full_name = scenario_name;

				double a = 0.;
				double sigma = 0.;
				for(map<int, vector<double>>::const_iterator iter_calib = map_calib_parameters.begin();
					iter_calib != map_calib_parameters.end(); ++iter_calib)
				{
					if (iter_calib->first == scen_pass_n)
					{
						vector<double> v_calib = iter_calib->second;
						a = v_calib[0];
						sigma = v_calib[1];
					}
				}				
				// write the output line
				sensi_file << scenario_full_name.c_str() << "," 
					<< setprecision(15) << total_agg_real_charges << ","  
					<< setprecision(15)	<< total_agg_ehc_chi_charges << "," 
					<< setprecision(15) << total_dep_fees  << "," 
					<< setprecision(15) << total_sum_prem_fees << "," 
					<< setprecision(15)	<< total_paid_prem_fees << "," 
					<< setprecision(15) << total_Claims_AB <<"," 
					<< setprecision(15) << total_Claims_IB <<","
					<< setprecision(15) << total_Claims_DB <<"," 
					<< setprecision(15) << total_Claims_WB << "," 
					<< setprecision(15) << total_Claims_SB <<","
					<< setprecision(15) << a << "," 
					<< setprecision(15) << sigma << "," 
					<< setprecision(15) << nb_of_policies << "," 
					<< DLL_VERSION << endl; 
			}
		}
	}


	void write_sensi_file_esg(const string& sensi_file_name, const map<string, vector<Model_Point*>>& mps,
		const map<string, map<int, map<int,map<int, vector<vector<double>>>>>>& index_results_map,
		map<string, vector<double>>& map_ehc_values, const map<int,map<int,vector<double>>>& map_calib_parameters,
		double nb_of_policies)
	{

		char sensitivities_file_name[MAX_LENGTH_FILE_NAME];
		sprintf(sensitivities_file_name, "%s", sensi_file_name.c_str());

		ofstream sensi_file(sensitivities_file_name);
		sensi_file  << "scenario, total_agg_real_charges,total_agg_ehc_chi_charges,total_dep_fees,total_sum_prem_fees,total_paid_prem_fees,total_Claims_AB,total_Claims_IB,total_Claims_DB,total_Claims_WB,total_Claims_SB, a, sigma,Total_Police_nb,DLL_Version" << endl;

		for (map<int, map<int, vector<vector<int>>>>::const_iterator iter_scen_pass_num = this->index_map_shocks_esg.begin(); 
			iter_scen_pass_num != this->index_map_shocks_esg.end(); ++iter_scen_pass_num)
		{
			int scen_pass_n = iter_scen_pass_num->first;

			for (map<int, vector<vector<int>>>::const_iterator iter_bucket = iter_scen_pass_num->second.begin(); 
				iter_bucket != iter_scen_pass_num->second.end(); ++iter_bucket)
			{
				int bucket_id = iter_bucket->first;
				vector<vector<int>> index_shock_array = iter_bucket->second;
				int size_of_index_shock_array = index_shock_array.size();

				for(int s = 0; s < size_of_index_shock_array; s++ )
				{
					int index_shock_number = this->get_shock_number(index_shock_array, s, MAX_DELTA_SHOCKS_PER_INDEX, MAXIMUM_NUMBER_OF_INDEXES);

					double total_agg_real_charges = 0.;
					double total_agg_ehc_chi_charges = 0.;
					double total_dep_fees = 0.;
					double total_sum_prem_fees = 0.;
					double total_paid_prem_fees = 0.;
					double total_Claims_AB = 0.;
					double total_Claims_IB = 0.;
					double total_Claims_DB = 0.;
					double total_Claims_WB = 0.;
					double total_Claims_SB = 0.;

					// Loop on the products
					for(map<string, vector<Model_Point*>>::const_iterator iter_mp = mps.begin();
						iter_mp != mps.end(); ++iter_mp)
					{
						string pCK = iter_mp->first;
						vector<Model_Point*> model_points = iter_mp->second;
						vector<vector<double>> pvs = this->get_pvs_vector_esg(pCK, scen_pass_n, bucket_id, index_shock_number, index_results_map);
						vector<double> ehc_values = map_ehc_values[pCK];
						int number_of_mps = model_points.size();

						for(int i = 0; i < number_of_mps; i++)
						{
							double ehc_value = ehc_values[i];
							vector<double> pv = pvs[i];

							if( pCK == "DEU_IAB01" || pCK == "DEU_IAB02" || pCK == "DEU_IDB01" || pCK == "DEU_IDB02" )
							{
								Model_Point_DEU *model_p = dynamic_cast<Model_Point_DEU*>(model_points[i]);

								total_agg_real_charges += pv[PV_REAL_CHARGES_DEU];
								total_agg_ehc_chi_charges += pv[PV_EHC_CHARGES_DEU] * ehc_value / model_p->gmxb_chg_perc;
								total_dep_fees += pv[PV_DEP_FEE_TOT];
								total_sum_prem_fees += pv[PV_DEP_FEE_SUM_TOT];
								total_paid_prem_fees += 0.;
								total_Claims_AB += pv[PV_GMAB_TOT];
								total_Claims_IB += pv[PV_GMIB_TOT];
								total_Claims_DB += pv[PV_GMDB_TOT];
							}
							else
							{
								Model_Point_DEU_IADB05 *model_p = dynamic_cast<Model_Point_DEU_IADB05*>(model_points[i]);

								total_agg_real_charges += pv[PV_REAL_CHARGES_DEU];
								total_agg_ehc_chi_charges += pv[PV_EHC_CHARGES_DEU] * ehc_value / model_p->Gmxb_guaranted_cost;
								total_dep_fees += pv[PV_DEP_FEE_TOT_CHI];
								total_sum_prem_fees += pv[PV_DEP_FEE_SUM_TOT_CHI];
								total_paid_prem_fees += pv[PV_HC_PP_AV_TOT_CHI];
								total_Claims_AB += pv[PV_GMAB_TOT];
								total_Claims_IB += pv[PV_GMIB_TOT];
								total_Claims_DB += pv[PV_GMDB_TOT];					
							}

							total_Claims_WB += 0.;
							total_Claims_SB += 0.;
						}
					}

					ostringstream oss_scen_pass_n;
					ostringstream oss_shock_n;

					string scenario_full_name;
					string scenario_name = "";
					string index_shock_name = "";

					oss_scen_pass_n << scen_pass_n;
					oss_shock_n << index_shock_number;
					scenario_name = this->list_scenario_names[oss_scen_pass_n.str()][0];

					string bucket_str = Converter::convert_to_str(bucket_id);

					if (index_shock_number > 0)
					{
						index_shock_name = this->list_index_shock_names[oss_shock_n.str()][0];
						scenario_full_name = scenario_name + " " + bucket_str + " " + index_shock_name;
					}	
					else
						scenario_full_name = scenario_name + " " + bucket_str+ " ";

					double a = 0.;
					double sigma = 0.;
					map<int, map<int, vector<double>>>::const_iterator itr_calib_scen = map_calib_parameters.find(scen_pass_n);
					if(itr_calib_scen!=map_calib_parameters.end())
					{
						map<int, vector<double>>::const_iterator iter_calib_bucket = itr_calib_scen->second.find(bucket_id);
						if(iter_calib_bucket!= itr_calib_scen->second.end())
						{
							vector<double> v_calib = iter_calib_bucket->second;
							a = v_calib[0];
							sigma = v_calib[1];
						}
					}

					// write the output line
					sensi_file << scenario_full_name.c_str() << "," 
						<< setprecision(15) << total_agg_real_charges << ","  
						<< setprecision(15)	<< total_agg_ehc_chi_charges << "," 
						<< setprecision(15) << total_dep_fees  << "," 
						<< setprecision(15) << total_sum_prem_fees << "," 
						<< setprecision(15)	<< total_paid_prem_fees << "," 
						<< setprecision(15) << total_Claims_AB <<"," 
						<< setprecision(15) << total_Claims_IB <<","
						<< setprecision(15) << total_Claims_DB <<"," 
						<< setprecision(15) << total_Claims_WB << "," 
						<< setprecision(15) << total_Claims_SB <<","
						<< setprecision(15) << a << "," 
						<< setprecision(15) << sigma << "," 
						<< setprecision(15) << nb_of_policies << "," 
						<< DLL_VERSION << endl; 

				}
			}
		}
	}
	/*
	* Code for sensi file is not implemented for ehc summary in esg mode
	* Check if the implementation done for file mode is right
	* Checks must be done by hedging or structuring (?)
	*/
	virtual void write_ehc_summary_file_esg(const map<string, vector<Model_Point*>>& mps, 
											const map<string, map<int, map<int,map<int, vector<vector<double>>>>>>& index_results_map,
											const map<string, map<int, map<int,map<int, vector<vector<double>>>>>>& fund_results_map,
											const map<int, map<int,vector<double>>>& map_calib_parameters)
	{
		map<string, vector<double>> map_ehc_values;

		map <string, vector<int>> indexes_policies_1;
		map <string, vector<int>> indexes_policies_0;
		map <string, vector<int>> indexes_policies_1_new;

		map<string, vector<double>> map_ehc_values_NB;
		map<string, vector<double>> map_ehc_values_recalc_old;
		map<string, vector<double>> map_ehc_values_recalc_new;


		// Open a file 
		char file_name[MAX_LENGTH_FILE_NAME];
		
		char dateStr [9];
		char timeStr [9];
		_strdate( dateStr);
		_strtime( timeStr );
		string month = strtok(dateStr,"/");
		string today = strtok (NULL, "/") ;
		string year = "20" + (string)strtok (NULL, "/") ;
		string hour = strtok(timeStr,":");
		string minute = strtok(NULL,":");
		
		sprintf(file_name, "%s%s%s%s%s_%s%s_1_1.txt", this->summary_configuration->get_ehc_file_directory().c_str(), 
									this->summary_configuration->get_ehc_file_name().c_str(),
									year.c_str(), month.c_str(), today.c_str(), hour.c_str(), minute.c_str());
		ofstream ehc_file(file_name);
		// Loop on the products
		for(map<string, vector<Model_Point*>>::const_iterator iter_mp = mps.begin();
				iter_mp != mps.end(); ++iter_mp)
		{
			string pCK = iter_mp->first;
			vector<Model_Point*> model_points = iter_mp->second;
			vector<vector<double>> pvs = this->get_pvs_vector_esg(pCK, summary_configuration->get_ehc_scen_pass_num(), 1, 0, index_results_map);
			int number_of_mps = model_points.size();
			vector<double> ehc_vector;
			
			double agg_real_charges = 0.;
			double agg_claims = 0.;
			double agg_dep_fee = 0.;
			double sum_of_premium = 0.;
			
			for(int i = 0; i < number_of_mps ; i++)
			{
				if (pCK == "DEU_IDB03" ||pCK =="DEU_IDB04"||pCK =="DEU_IAB03"||pCK =="DEU_IAB04"||pCK =="DEU_IAB05"||pCK =="DEU_IDB05")
				{	
					Model_Point_DEU_IADB05 *model_p = dynamic_cast<Model_Point_DEU_IADB05*>(model_points[i]);

					vector<double> pv = pvs[i];
					ehc_file << "V1.0" << ",";
					string country_code = pCK.substr(0,pCK.find("_"));
					ehc_file << country_code.c_str() << ",";
					ehc_file << model_p->product.c_str() << ",";
					ehc_file << model_p->group.c_str() << ",";
					ehc_file << pCK.c_str() << ",";
					ehc_file << model_p->policy_id.c_str() << ",";
					ehc_file << "1" << ",";
					ehc_file << "1" << ",";
					ehc_file << "1" /*model_p->Gmxb_guaranted_cost*/ << ",";
					ehc_file << model_p->Gmxb_EHC_cost << ",";
					agg_real_charges = pv[PV_REAL_CHARGES_DEU];
					agg_claims = pv[PV_CLAIMS_DEU];
					agg_dep_fee = 0.;//pv[PV_DEP_FEE_TOT_CHI];
					sum_of_premium = 0.;//pv[PV_DEP_FEE_SUM_TOT_CHI];
					ehc_file << setprecision(15) << agg_real_charges << ",";		
					ehc_file << setprecision(15) << agg_claims << ",";				
					ehc_file << setprecision(15) << agg_dep_fee+sum_of_premium ;
					ehc_file << endl;
					// calculate the EHC for each policy
					// the ehc is (PVClaims/PVCharges) * RRC
					double ehc = 0;

					if (agg_real_charges == 0)
						agg_real_charges = 0.01;

					ehc = ((agg_claims - agg_dep_fee - sum_of_premium)/agg_real_charges) * 1. /*model_p->Gmxb_guaranted_cost*/;
					ehc_vector.push_back(ehc);
				}
				else
				{
					Model_Point_DEU *model_p = dynamic_cast<Model_Point_DEU*>(model_points[i]);

					vector<double> pv = pvs[i];
					ehc_file << "V1.0" << ",";
					string country_code = pCK.substr(0,pCK.find("_"));
					ehc_file << country_code.c_str() << ",";
					ehc_file << model_p->product.c_str() << ",";
					ehc_file << model_p->group.c_str() << ",";
					ehc_file << pCK.c_str() << ",";
					ehc_file << model_p->policy_id.c_str() << ",";
					ehc_file << "1" << ",";
					ehc_file << "1" << ",";
					ehc_file << model_p->gmxb_g_c << ",";
					ehc_file << model_p->gmxb_ehc_charge << ",";
					agg_real_charges = pv[PV_REAL_CHARGES_DEU];
					agg_claims = pv[PV_CLAIMS_DEU];
					agg_dep_fee = pv[PV_DEP_FEE_TOT];
					sum_of_premium = pv[PV_DEP_FEE_SUM_TOT];
					ehc_file << setprecision(15) << agg_real_charges << ",";		
					ehc_file << setprecision(15) << agg_claims << ",";				
					ehc_file << setprecision(15) << agg_dep_fee+sum_of_premium ;
					ehc_file << endl;
					// calculate the EHC for each policy
					// the ehc is (PVClaims/PVCharges) * RRC
					if (!this->summary_configuration->get_recalculate_param_indicator())
					{
						double ehc = 0;

					
						if (agg_real_charges == 0)
							agg_real_charges = 0.01;

						ehc = ((agg_claims - agg_dep_fee - sum_of_premium)/agg_real_charges) * model_p->gmxb_g_c;
					
						ehc_vector.push_back(ehc);
					}
				}
			}
			if (!this->summary_configuration->get_recalculate_param_indicator())
				map_ehc_values[pCK] = ehc_vector;
		}
		ehc_file.close();



		if (this->summary_configuration->get_recalculate_param_indicator())
		{

			fill_ehc_map_esg(mps, map_ehc_values, index_results_map, fund_results_map, indexes_policies_1, 
				indexes_policies_0, indexes_policies_1_new, map_ehc_values_NB, map_ehc_values_recalc_old, 
				map_ehc_values_recalc_new);
		}



		// Generate .OK and .start files

		char ok_file_name[MAX_LENGTH_FILE_NAME];
		char start_file_name[MAX_LENGTH_FILE_NAME];

		sprintf_s(ok_file_name, "%s%s%s%s%s_%s%s_1_1.ok.txt", 
			this->summary_configuration->get_ehc_file_directory().c_str() , this->summary_configuration->get_ehc_file_name().c_str() 
			, year.c_str(), month.c_str(), today.c_str(),  hour.c_str(), minute.c_str());

		sprintf_s(start_file_name, "%s%s%s%s%s_%s%s_1_1.start.txt", 
			this->summary_configuration->get_ehc_file_directory().c_str() , this->summary_configuration->get_ehc_file_name().c_str() 
			, year.c_str(), month.c_str(), today.c_str(),  hour.c_str(), minute.c_str());


		ofstream ok_file(ok_file_name);
		ofstream start_file(start_file_name);

		ok_file.close();
		start_file.close();

		if (!this->summary_configuration->get_recalculate_param_indicator())
		{
			char sensitivities_file_name[MAX_LENGTH_FILE_NAME];
			sprintf(sensitivities_file_name, "%s%s.csv", this->summary_configuration->get_ehc_sensi_file_directory().c_str(), 
				this->summary_configuration->get_ehc_sensi_file_name().c_str());

			ofstream sensi_file(sensitivities_file_name);
			// sensi_file  << "scenario, pv_claims, pv_realch, pv_ehcch, pv_dep_fee, a, sigma" << endl;
			sensi_file  << "scenario, total_agg_real_charges,total_agg_ehc_chi_charges,total_dep_fees,total_sum_prem_fees,total_paid_prem_fees,total_Claims_AB,total_Claims_IB,total_Claims_DB,total_Claims_WB,total_Claims_SB, a, sigma,Total_Police_nb,DLL_Version" << endl;

			for (map<int, map<int,vector<vector<int>>>>::const_iterator iter_scen_pass_num = this->index_map_shocks_esg.begin(); 
					iter_scen_pass_num != this->index_map_shocks_esg.end(); ++iter_scen_pass_num)
			{
				int scen_pass_n = iter_scen_pass_num->first;
				for (map<int, vector<vector<int>>>::const_iterator iter_bucket = iter_scen_pass_num->second.begin(); 
					iter_bucket != iter_scen_pass_num->second.end(); ++iter_bucket)
				{
					int bucket_id = iter_bucket->first;
					vector<vector<int>> index_shock_array = iter_bucket->second;
					int size_of_index_shock_array = index_shock_array.size();
					for(int s = 0; s < size_of_index_shock_array; s++ )
					{
							int index_shock_number = this->get_shock_number(index_shock_array, s, MAX_DELTA_SHOCKS_PER_INDEX, MAXIMUM_NUMBER_OF_INDEXES);
					
							double pv_realch = 0.;
							double pv_ehcch = 0.;
							double pv_dep_fee = 0.;
							double pv_sumpremium = 0.;
							double pv_paidpremium = 0.;
							double pv_claims_ab = 0.;
							double pv_claims_ib = 0.;
							double pv_claims_db = 0.;
							double pv_claims_wb = 0.;
							double pv_claims_sb = 0.;

						// Loop on the products
						for(map<string, vector<Model_Point*>>::const_iterator iter_mp = mps.begin();
								iter_mp != mps.end(); ++iter_mp)
						{
							string pCK = iter_mp->first;
							vector<Model_Point*> model_points = iter_mp->second;
							vector<vector<double>> pvs = this->get_pvs_vector_esg(pCK, scen_pass_n, bucket_id, index_shock_number, index_results_map);
							vector<double> ehc_values = map_ehc_values[pCK];
							int number_of_mps = model_points.size();
							for(int i = 0; i < number_of_mps; i++)
							{
								if (pCK == "DEU_IDB03" ||pCK =="DEU_IDB04"||pCK =="DEU_IAB03"||pCK =="DEU_IAB04"||pCK =="DEU_IAB05"||pCK =="DEU_IDB05")
								{
									Model_Point_DEU_IADB05 *model_p = dynamic_cast<Model_Point_DEU_IADB05*>(model_points[i]);
									double ehc_value = ehc_values[i];
									vector<double> pv = pvs[i];
							
									pv_realch += pv[PV_REAL_CHARGES_DEU];
									pv_ehcch += pv[PV_REAL_CHARGES_DEU] * ehc_value;
									pv_dep_fee += pv[PV_DEP_FEE_TOT_CHI];
									pv_sumpremium += pv[PV_DEP_FEE_SUM_TOT_CHI];
									pv_paidpremium += pv[PV_HC_PP_AV_TOT_CHI];;				
									pv_claims_ab += pv[PV_GMAB_TOT];
									pv_claims_ib += pv[PV_GMIB_TOT];
									pv_claims_db += pv[PV_GMDB_TOT];
									pv_claims_wb = 0.;
									pv_claims_sb = 0.;
								}
								else
								{
									Model_Point_DEU *model_p = dynamic_cast<Model_Point_DEU*>(model_points[i]);
									double ehc_value = ehc_values[i];
									vector<double> pv = pvs[i];
							
									pv_realch += pv[PV_REAL_CHARGES_DEU];
									pv_ehcch += pv[PV_REAL_CHARGES_DEU] * ehc_value/model_p->gmxb_g_c;
									pv_dep_fee += pv[PV_DEP_FEE_TOT];
									pv_sumpremium = pv[PV_DEP_FEE_SUM_TOT];
									pv_paidpremium = 0.;					
									pv_claims_ab += pv[PV_GMAB_TOT];
									pv_claims_ib += pv[PV_GMIB_TOT];
									pv_claims_db += pv[PV_GMDB_TOT];
									pv_claims_wb = 0.;
									pv_claims_sb = 0.;
								}
							}
						}

						string scenario_name = this->list_scenario_names[Converter::convert_to_str(scen_pass_n)][0];
							// Converter::convert_to_str(scen_pass_n);
						string bucket_name = Converter::convert_to_str(bucket_id);
						string index_shock_name = Converter::convert_to_str(index_shock_number);
						string scenario_full_name;

						if (index_shock_number > 0)
						{
							index_shock_name = this->list_index_shock_names[index_shock_name.c_str()][0];
							scenario_full_name = scenario_name + " " + bucket_name + " " + index_shock_name;
						}
						else
							scenario_full_name = scenario_name + " " + bucket_name;

						double a = 0.;
						double sigma = 0.;
						map<int, map<int, vector<double>>>::const_iterator itr_calib_scen = map_calib_parameters.find(scen_pass_n);
						if(itr_calib_scen!=map_calib_parameters.end())
						{
						    map<int, vector<double>>::const_iterator iter_calib_bucket = itr_calib_scen->second.find(bucket_id);
							if(iter_calib_bucket!= itr_calib_scen->second.end())
							{
								vector<double> v_calib = iter_calib_bucket->second;
								a = v_calib[0];
								sigma = v_calib[1];
							}
						}

    				 sensi_file << scenario_full_name.c_str() << "," << setprecision(15) << pv_realch << ","  << setprecision(15) 
							<< pv_ehcch << "," << setprecision(15) << pv_dep_fee  << "," << setprecision(15) << pv_sumpremium << "," 
							<< setprecision(15) << pv_paidpremium << "," << setprecision(15)
							<< pv_claims_ab << "," << setprecision(15) << pv_claims_ib << "," << setprecision(15) << pv_claims_db 
							<< "," << setprecision(15) << pv_claims_wb << "," << setprecision(15) << pv_claims_sb << "," 
							<< setprecision(15) << a << "," << setprecision(15) << sigma << "," << this->nb_total_polices  << "," << DLL_VERSION << endl;
					}
				}
			}

			for (map<int, map<int, vector<vector<int>>>>::const_iterator iter_scen_pass_num = this->fund_map_shocks_esg.begin(); 
					iter_scen_pass_num != this->fund_map_shocks_esg.end(); ++iter_scen_pass_num)
			{
				int scen_pass_n = iter_scen_pass_num->first;

				for (map<int, vector<vector<int>>>::const_iterator iter_bucket = iter_scen_pass_num->second.begin(); 
					iter_bucket != iter_scen_pass_num->second.end(); ++iter_bucket)
				{
					int bucket_id = iter_bucket->first;
					vector<vector<int>> fund_shock_array = iter_bucket->second;
					int size_of_fund_shock_array = fund_shock_array.size();
					int number_of_funds = 0;
					if (size_of_fund_shock_array > 0)
						number_of_funds =  fund_shock_array[0].size();

					for(int s = 0; s < size_of_fund_shock_array; s++ )
					{
						int fund_shock_number = this->get_shock_number(fund_shock_array, s, MAX_DELTA_SHOCKS_PER_INDEX, number_of_funds);

							double pv_realch = 0.;
							double pv_ehcch = 0.;
							double pv_dep_fee = 0.;
							double pv_sumpremium = 0.;
							double pv_paidpremium = 0.;
							double pv_claims_ab = 0.;
							double pv_claims_ib = 0.;
							double pv_claims_db = 0.;
							double pv_claims_wb = 0.;
							double pv_claims_sb = 0.;
						
						
						// Loop on the products
						for(map<string, vector<Model_Point*>>::const_iterator iter_mp = mps.begin();
								iter_mp != mps.end(); ++iter_mp)
						{
							string pCK = iter_mp->first;
							vector<Model_Point*> model_points = iter_mp->second;
							vector<vector<double>> pvs = this->get_pvs_vector_esg(pCK, scen_pass_n, bucket_id, fund_shock_number, fund_results_map);
							vector<double> ehc_values = map_ehc_values[pCK];
							int number_of_mps = model_points.size();
							for(int i = 0; i < number_of_mps; i++)
							{
									
								if (pCK == "DEU_IDB03" ||pCK =="DEU_IDB04"||pCK =="DEU_IAB03"||pCK =="DEU_IAB04"||pCK =="DEU_IAB05"||pCK =="DEU_IDB05")
								{
									Model_Point_DEU_IADB05 *model_p = dynamic_cast<Model_Point_DEU_IADB05*>(model_points[i]);
									double ehc_value = ehc_values[i];
									vector<double> pv = pvs[i];
							
									pv_realch += pv[PV_REAL_CHARGES_DEU];
									pv_ehcch += pv[PV_REAL_CHARGES_DEU] * ehc_value;
									pv_dep_fee += pv[PV_DEP_FEE_TOT_CHI];
									pv_sumpremium += pv[PV_DEP_FEE_SUM_TOT_CHI];
									pv_paidpremium += pv[PV_HC_PP_AV_TOT_CHI];;				
									pv_claims_ab += pv[PV_GMAB_TOT];
									pv_claims_ib += pv[PV_GMIB_TOT];
									pv_claims_db += pv[PV_GMDB_TOT];
									pv_claims_wb = 0.;
									pv_claims_sb = 0.;
								}
								else
								{
									Model_Point_DEU *model_p = dynamic_cast<Model_Point_DEU*>(model_points[i]);
									double ehc_value = ehc_values[i];
									vector<double> pv = pvs[i];
							
									pv_realch += pv[PV_REAL_CHARGES_DEU];
									pv_ehcch += pv[PV_REAL_CHARGES_DEU] * ehc_value/model_p->gmxb_g_c;
									pv_dep_fee += pv[PV_DEP_FEE_TOT];
									pv_sumpremium = pv[PV_DEP_FEE_SUM_TOT];
									pv_paidpremium = 0.;					
									pv_claims_ab += pv[PV_GMAB_TOT];
									pv_claims_ib += pv[PV_GMIB_TOT];
									pv_claims_db += pv[PV_GMDB_TOT];
									pv_claims_wb = 0.;
									pv_claims_sb = 0.;
								}
							}
						}

						ostringstream oss_scen_pass_n;
						ostringstream oss_shock_n;

						string scenario_full_name;
						string scenario_name = "";
						string fund_shock_name = "";

						oss_scen_pass_n << scen_pass_n;
						oss_shock_n << fund_shock_number;
						scenario_name = this->list_scenario_names[oss_scen_pass_n.str()][0];

						// Get the fund name
						int fund_id = fund_shock_array[s][0];
						int shock_value = fund_shock_array[s][fund_shock_array[s][0]]; 

						vector<Product_configuration> products = this->summary_configuration->get_product_configurations();

						//Fund_Manager *f_mgr = Fund_Manager::getInstance();
						//string fund_name = f_mgr->get_fund_name_by_fund_id(fund_id);

						string fund_name = products[0].get_fund_name_by_fund_id(fund_id);

						ostringstream shock_value_str;
						shock_value_str << shock_value;

						fund_shock_name = fund_name + " " + shock_value_str.str() + "%";
						
						string bucket_name = Converter::convert_to_str(bucket_id);

						scenario_full_name = scenario_name + " " + bucket_name + " " + fund_shock_name;


						double a = 0.;
						double sigma = 0.;
						map<int, map<int, vector<double>>>::const_iterator itr_calib_scen = map_calib_parameters.find(scen_pass_n);
						if(itr_calib_scen!=map_calib_parameters.end())
						{
						    map<int, vector<double>>::const_iterator iter_calib_bucket = itr_calib_scen->second.find(bucket_id);
							if(iter_calib_bucket!= itr_calib_scen->second.end())
							{
								vector<double> v_calib = iter_calib_bucket->second;
								a = v_calib[0];
								sigma = v_calib[1];
							}
						}

						// write the output line
					     sensi_file << scenario_full_name.c_str() << "," << setprecision(15) << pv_realch << ","  << setprecision(15) 
						<< pv_ehcch << "," << setprecision(15) << pv_dep_fee  << "," << setprecision(15) << pv_sumpremium << "," 
						<< setprecision(15) << pv_paidpremium << "," << setprecision(15)
						<< pv_claims_ab << "," << setprecision(15) << pv_claims_ib << "," << setprecision(15) << pv_claims_db 
						<< "," << setprecision(15) << pv_claims_wb << "," << setprecision(15) << pv_claims_sb << "," 
						<< setprecision(15) << a << "," << setprecision(15) << sigma << "," << this->nb_total_polices  << "," << DLL_VERSION << endl;

					}
				}
			}
			sensi_file.close();
		}	
		else 
		{

			// Write the sensitivity file
			// Case of new business file

			map <string, vector<Model_Point*>> map_mp_NB;
			map <string, vector<Model_Point*>> map_mp_recalc_old;
			map <string, vector<Model_Point*>> map_mp_recalc_new;

			map<string, map<int, map<int,map<int, vector<vector<double>>>>>> index_results_map_NB;
			map<string, map<int, map<int,map<int, vector<vector<double>>>>>> index_results_map_recalc_old;
			map<string, map<int, map<int,map<int, vector<vector<double>>>>>> index_results_map_recalc_new;

			

			this->get_MP_vector_and_results_for_ehc_recalc_esg(mps, map_mp_NB, index_results_map,
																	index_results_map_NB, indexes_policies_1);

			this->get_MP_vector_and_results_for_ehc_recalc_esg(mps, map_mp_recalc_old, index_results_map,
																	index_results_map_recalc_old, indexes_policies_0);

			this->get_MP_vector_and_results_for_ehc_recalc_esg(mps, map_mp_recalc_new, index_results_map,
																	index_results_map_recalc_new, indexes_policies_1_new);
			


			string sensi_NB = this->summary_configuration->get_ehc_sensi_file_directory() +  
							  this->summary_configuration->get_ehc_sensi_file_name() + ".csv";

			string sensi_recalc_old = this->summary_configuration->get_ehc_sensi_file_directory() +  
							  this->summary_configuration->get_ehc_sensi_file_name() + "_recalc_old.csv";

			string sensi_recalc_new = this->summary_configuration->get_ehc_sensi_file_directory() +  
							  this->summary_configuration->get_ehc_sensi_file_name() + "_recalc_new.csv";



			write_sensi_file_esg(sensi_NB, map_mp_NB, index_results_map_NB, map_ehc_values_NB, map_calib_parameters, this->nb_of_policies_NB);

			write_sensi_file_esg(sensi_recalc_old, map_mp_recalc_old, index_results_map_recalc_old, map_ehc_values_recalc_old, map_calib_parameters, this->nb_of_policies_recalc_old);

			write_sensi_file_esg(sensi_recalc_new, map_mp_recalc_new, index_results_map_recalc_new, map_ehc_values_recalc_new, map_calib_parameters, this->nb_of_policies_recalc_new);

		}
	}

	void write_ehc_summary_file(const map<string, vector<Model_Point*>>& mps, 
		const map<string, map<int,map<int, vector<vector<double>>>>>& index_results_map,
		const map<string, map<int,map<int, vector<vector<double>>>>>& fund_results_map,
		const map<int,vector<double>>& map_calib_parameters)
	{
		map<string, vector<double>> map_ehc_values;

		map <string, vector<int>> indexes_policies_1;
		map <string, vector<int>> indexes_policies_0;
		map <string, vector<int>> indexes_policies_1_new;

		map<string, vector<double>> map_ehc_values_NB;
		map<string, vector<double>> map_ehc_values_recalc_old;
		map<string, vector<double>> map_ehc_values_recalc_new;


		// Open a file 
		char file_name[MAX_LENGTH_FILE_NAME];
		
		char dateStr [9];
		char timeStr [9];
		_strdate( dateStr);
		_strtime( timeStr );
		string month = strtok(dateStr,"/");
		string today = strtok (NULL, "/") ;
		string year = "20" + (string)strtok (NULL, "/") ;
		string hour = strtok(timeStr,":");
		string minute = strtok(NULL,":");
		
		sprintf(file_name, "%s%s%s%s%s_%s%s_1_1.txt", this->summary_configuration->get_ehc_file_directory().c_str(), 
									this->summary_configuration->get_ehc_file_name().c_str(),
									year.c_str(), month.c_str(), today.c_str(), hour.c_str(), minute.c_str());
		ofstream ehc_file(file_name);
		// Loop on the products
		for(map<string, vector<Model_Point*>>::const_iterator iter_mp = mps.begin();
				iter_mp != mps.end(); ++iter_mp)
		{
			string pCK = iter_mp->first;
			vector<Model_Point*> model_points = iter_mp->second;
			vector<vector<double>> pvs = this->get_pvs_vector(pCK, summary_configuration->get_ehc_scen_pass_num(), 0, index_results_map);
			int number_of_mps = model_points.size();
			vector<double> ehc_vector;

			double agg_real_charges = 0.;
			double agg_claims = 0.;
			double agg_dep_fee = 0.;
			double sum_of_premium = 0.;

			for(int i = 0; i < number_of_mps ; i++)
			{
				if (pCK == "DEU_IDB03" ||pCK =="DEU_IDB04"||pCK =="DEU_IAB03"||pCK =="DEU_IAB04"||pCK =="DEU_IAB05"||pCK =="DEU_IDB05")
				{	
					Model_Point_DEU_IADB05 *model_p = dynamic_cast<Model_Point_DEU_IADB05*>(model_points[i]);

					vector<double> pv = pvs[i];
					ehc_file << "V1.0" << ",";
					string country_code = pCK.substr(0,pCK.find("_"));
					ehc_file << country_code.c_str() << ",";
					ehc_file << model_p->product.c_str() << ",";
					ehc_file << model_p->group.c_str() << ",";
					ehc_file << pCK.c_str() << ",";
					ehc_file << model_p->policy_id.c_str() << ",";
					ehc_file << "1" << ",";
					ehc_file << "1" << ",";
					ehc_file << "1" /*model_p->Gmxb_guaranted_cost*/ << ",";
					ehc_file << model_p->Gmxb_EHC_cost << ",";
					agg_real_charges = pv[PV_REAL_CHARGES_DEU];
					agg_claims = pv[PV_CLAIMS_DEU];
					agg_dep_fee = 0.;//pv[PV_DEP_FEE_TOT];
					sum_of_premium = 0.;//pv[PV_DEP_FEE_SUM_TOT_CHI];
					ehc_file << setprecision(15) << agg_real_charges << ",";		
					ehc_file << setprecision(15) << agg_claims << ",";				
					ehc_file << setprecision(15) << agg_dep_fee+sum_of_premium ;
					ehc_file << endl;
					// calculate the EHC for each policy
					// the ehc is (PVClaims/PVCharges) * RRC
					double ehc = 0;

					if (agg_real_charges == 0)
						agg_real_charges = 0.01;

					ehc = ((agg_claims - agg_dep_fee - sum_of_premium)/agg_real_charges) * 1. /*model_p->Gmxb_guaranted_cost*/;
					ehc_vector.push_back(ehc);
				}
				else
				{
					Model_Point_DEU *model_p = dynamic_cast<Model_Point_DEU*>(model_points[i]);

					vector<double> pv = pvs[i];
					ehc_file << "V1.0" << ",";
					string country_code = pCK.substr(0,pCK.find("_"));
					ehc_file << country_code.c_str() << ",";
					ehc_file << model_p->product.c_str() << ",";
					ehc_file << model_p->group.c_str() << ",";
					ehc_file << pCK.c_str() << ",";
					ehc_file << model_p->policy_id.c_str() << ",";
					ehc_file << "1" << ",";
					ehc_file << "1" << ",";
					ehc_file << model_p->gmxb_g_c << ",";
					ehc_file << model_p->gmxb_ehc_charge << ",";
					agg_real_charges = pv[PV_REAL_CHARGES_DEU];
					agg_claims = pv[PV_CLAIMS_DEU];
					agg_dep_fee = pv[PV_DEP_FEE_TOT];
					sum_of_premium = pv[PV_DEP_FEE_SUM_TOT];
					ehc_file << setprecision(15) << agg_real_charges << ",";		
					ehc_file << setprecision(15) << agg_claims << ",";				
					ehc_file << setprecision(15) << agg_dep_fee+sum_of_premium ;
					ehc_file << endl;
					// calculate the EHC for each policy
					// the ehc is (PVClaims/PVCharges) * RRC
					if (!this->summary_configuration->get_recalculate_param_indicator())
					{
						double ehc = 0;

						if (agg_real_charges == 0)
							agg_real_charges = 0.01;

						ehc = ((agg_claims - agg_dep_fee - sum_of_premium)/agg_real_charges) * model_p->gmxb_g_c;
					
						ehc_vector.push_back(ehc);
					}
				}
			}
				
			if (!this->summary_configuration->get_recalculate_param_indicator())
				map_ehc_values[pCK] = ehc_vector;
		}
		ehc_file.close();



		if (this->summary_configuration->get_recalculate_param_indicator())
		{

			fill_ehc_map(mps, map_ehc_values, index_results_map, fund_results_map, indexes_policies_1, 
				indexes_policies_0, indexes_policies_1_new, map_ehc_values_NB, map_ehc_values_recalc_old, 
				map_ehc_values_recalc_new);
		}



		// Generate .OK and .start files

		char ok_file_name[MAX_LENGTH_FILE_NAME];
		char start_file_name[MAX_LENGTH_FILE_NAME];

		sprintf_s(ok_file_name, "%s%s%s%s%s_%s%s_1_1.ok.txt", 
			this->summary_configuration->get_ehc_file_directory().c_str() , this->summary_configuration->get_ehc_file_name().c_str() 
			, year.c_str(), month.c_str(), today.c_str(),  hour.c_str(), minute.c_str());

		sprintf_s(start_file_name, "%s%s%s%s%s_%s%s_1_1.start.txt", 
			this->summary_configuration->get_ehc_file_directory().c_str() , this->summary_configuration->get_ehc_file_name().c_str() 
			, year.c_str(), month.c_str(), today.c_str(),  hour.c_str(), minute.c_str());


		ofstream ok_file(ok_file_name);
		ofstream start_file(start_file_name);

		ok_file.close();
		start_file.close();

		if (!this->summary_configuration->get_recalculate_param_indicator())
		{
			char sensitivities_file_name[MAX_LENGTH_FILE_NAME];
			sprintf(sensitivities_file_name, "%s%s.csv", this->summary_configuration->get_ehc_sensi_file_directory().c_str(), 
				this->summary_configuration->get_ehc_sensi_file_name().c_str());

			ofstream sensi_file(sensitivities_file_name);
			sensi_file  << "scenario, total_agg_real_charges,total_agg_ehc_chi_charges,total_dep_fees,total_sum_prem_fees,total_paid_prem_fees,total_Claims_AB,total_Claims_IB,total_Claims_DB,total_Claims_WB,total_Claims_SB, a, sigma,Total_Police_nb,DLL_Version" << endl;
			for (map<int, vector<vector<int>>>::const_iterator iter_scen_pass_num = this->index_map_shocks.begin(); 
					iter_scen_pass_num != this->index_map_shocks.end(); ++iter_scen_pass_num)
			{
				int scen_pass_n = iter_scen_pass_num->first;
				vector<vector<int>> index_shock_array = iter_scen_pass_num->second;
				int size_of_index_shock_array = index_shock_array.size();
				for(int s = 0; s < size_of_index_shock_array; s++ )
				{

					int index_shock_number = this->get_shock_number(index_shock_array, s, MAX_DELTA_SHOCKS_PER_INDEX, MAXIMUM_NUMBER_OF_INDEXES);

					double pv_realch = 0.;
					double pv_ehcch = 0.;
					double pv_dep_fee = 0.;
					double pv_sumpremium = 0.;
					double pv_paidpremium = 0.;
					double pv_claims_ab = 0.;
					double pv_claims_ib = 0.;
					double pv_claims_db = 0.;
					double pv_claims_wb = 0.;
					double pv_claims_sb = 0.;
					// Loop on the products
					for(map<string, vector<Model_Point*>>::const_iterator iter_mp = mps.begin();
							iter_mp != mps.end(); ++iter_mp)
					{
						string pCK = iter_mp->first;
						vector<Model_Point*> model_points = iter_mp->second;
						vector<vector<double>> pvs = this->get_pvs_vector(pCK, scen_pass_n, index_shock_number, index_results_map);
						vector<double> ehc_values = map_ehc_values[pCK];
						int number_of_mps = model_points.size();
						for(int i = 0; i < number_of_mps; i++)
						{
							if (pCK == "DEU_IDB03" ||pCK =="DEU_IDB04"||pCK =="DEU_IAB03"||pCK =="DEU_IAB04"||pCK =="DEU_IAB05"||pCK =="DEU_IDB05")
							{
								Model_Point_DEU_IADB05 *model_p = dynamic_cast<Model_Point_DEU_IADB05*>(model_points[i]);
								double ehc_value = ehc_values[i];
								vector<double> pv = pvs[i];
							
								pv_realch += pv[PV_REAL_CHARGES_DEU];
								pv_ehcch += pv[PV_REAL_CHARGES_DEU] * ehc_value;
								pv_dep_fee += pv[PV_DEP_FEE_TOT_CHI];
								pv_sumpremium += pv[PV_DEP_FEE_SUM_TOT_CHI];
								pv_paidpremium += pv[PV_HC_PP_AV_TOT_CHI];;				
								pv_claims_ab += pv[PV_GMAB_TOT];
								pv_claims_ib += pv[PV_GMIB_TOT];
								pv_claims_db += pv[PV_GMDB_TOT];
								pv_claims_wb = 0.;
								pv_claims_sb = 0.;
							}
							else
							{
								Model_Point_DEU *model_p = dynamic_cast<Model_Point_DEU*>(model_points[i]);
								double ehc_value = ehc_values[i];
								vector<double> pv = pvs[i];
						
								pv_realch += pv[PV_REAL_CHARGES_DEU];
								pv_ehcch += pv[PV_REAL_CHARGES_DEU] * ehc_value/model_p->gmxb_g_c;
								pv_dep_fee += pv[PV_DEP_FEE_TOT];
								pv_sumpremium = pv[PV_DEP_FEE_SUM_TOT];
								pv_paidpremium = 0.;					
								pv_claims_ab += pv[PV_GMAB_TOT];
								pv_claims_ib += pv[PV_GMIB_TOT];
								pv_claims_db += pv[PV_GMDB_TOT];
								pv_claims_wb = 0.;
								pv_claims_sb = 0.;
							}
						}
					}

					ostringstream oss_scen_pass_n;
					ostringstream oss_shock_n;

					string scenario_full_name;
					string scenario_name = "";
					string index_shock_name = "";

					oss_scen_pass_n << scen_pass_n;
					oss_shock_n << index_shock_number;
					scenario_name = this->list_scenario_names[oss_scen_pass_n.str()][0];
					
					if (index_shock_number > 0)
					{
						index_shock_name = this->list_index_shock_names[oss_shock_n.str()][0];
						scenario_full_name = scenario_name + " " + index_shock_name;
					}
					else
						scenario_full_name = scenario_name;

					double a = 0.;
					double sigma = 0.;
					for(map<int, vector<double>>::const_iterator iter_calib = map_calib_parameters.begin();
						iter_calib != map_calib_parameters.end(); ++iter_calib)
					{
						if (iter_calib->first == scen_pass_n)
						{
							vector<double> v_calib = iter_calib->second;
							a = v_calib[0];
							sigma = v_calib[1];
						}
					}				
					// write the output line
				 sensi_file << scenario_full_name.c_str() << "," << setprecision(15) << pv_realch << ","  << setprecision(15) 
							<< pv_ehcch << "," << setprecision(15) << pv_dep_fee  << "," << setprecision(15) << pv_sumpremium << "," 
							<< setprecision(15) << pv_paidpremium << "," << setprecision(15)
							<< pv_claims_ab << "," << setprecision(15) << pv_claims_ib << "," << setprecision(15) << pv_claims_db 
							<< "," << setprecision(15) << pv_claims_wb << "," << setprecision(15) << pv_claims_sb << "," 
							<< setprecision(15) << a << "," << setprecision(15) << sigma << "," << this->nb_total_polices  << "," << DLL_VERSION << endl;
				}
			}


			for (map<int, vector<vector<int>>>::const_iterator iter_scen_pass_num = this->fund_map_shocks.begin(); 
					iter_scen_pass_num != this->fund_map_shocks.end(); ++iter_scen_pass_num)
			{
				int scen_pass_n = iter_scen_pass_num->first;
				vector<vector<int>> fund_shock_array = iter_scen_pass_num->second;
				int size_of_fund_shock_array = fund_shock_array.size();
				int number_of_funds = 0;
				if (size_of_fund_shock_array > 0)
					number_of_funds =  fund_shock_array[0].size();

				for(int s = 0; s < size_of_fund_shock_array; s++ )
				{

					int fund_shock_number = this->get_shock_number(fund_shock_array, s, MAX_DELTA_SHOCKS_PER_INDEX, number_of_funds);
					double pv_realch = 0.;
					double pv_ehcch = 0.;
					double pv_dep_fee = 0.;
					double pv_sumpremium = 0.;
					double pv_paidpremium = 0.;
					double pv_claims_ab = 0.;
					double pv_claims_ib = 0.;
					double pv_claims_db = 0.;
					double pv_claims_wb = 0.;
					double pv_claims_sb = 0.;
					// Loop on the products
					for(map<string, vector<Model_Point*>>::const_iterator iter_mp = mps.begin();
							iter_mp != mps.end(); ++iter_mp)
					{
						string pCK = iter_mp->first;
						vector<Model_Point*> model_points = iter_mp->second;
						vector<vector<double>> pvs = this->get_pvs_vector(pCK, scen_pass_n, fund_shock_number, fund_results_map);
						vector<double> ehc_values = map_ehc_values[pCK];
						int number_of_mps = model_points.size();
						for(int i = 0; i < number_of_mps; i++)
						{
							if (pCK == "DEU_IDB03" ||pCK =="DEU_IDB04"||pCK =="DEU_IAB03"||pCK =="DEU_IAB04"||pCK =="DEU_IAB05"||pCK =="DEU_IDB05")
							{
								Model_Point_DEU_IADB05 *model_p = dynamic_cast<Model_Point_DEU_IADB05*>(model_points[i]);
								double ehc_value = ehc_values[i];
								vector<double> pv = pvs[i];
							
								pv_realch += pv[PV_REAL_CHARGES_DEU];
								pv_ehcch += pv[PV_REAL_CHARGES_DEU] * ehc_value;
								pv_dep_fee += pv[PV_DEP_FEE_TOT_CHI];
								pv_sumpremium += pv[PV_DEP_FEE_SUM_TOT_CHI];
								pv_paidpremium += pv[PV_HC_PP_AV_TOT_CHI];;				
								pv_claims_ab += pv[PV_GMAB_TOT];
								pv_claims_ib += pv[PV_GMIB_TOT];
								pv_claims_db += pv[PV_GMDB_TOT];
								pv_claims_wb = 0.;
								pv_claims_sb = 0.;
							}
							else
							{
								Model_Point_DEU *model_p = dynamic_cast<Model_Point_DEU*>(model_points[i]);
								double ehc_value = ehc_values[i];
								vector<double> pv = pvs[i];
						
								pv_realch += pv[PV_REAL_CHARGES_DEU];
								pv_ehcch += pv[PV_REAL_CHARGES_DEU] * ehc_value/model_p->gmxb_g_c;
								pv_dep_fee += pv[PV_DEP_FEE_TOT];
								pv_sumpremium = pv[PV_DEP_FEE_SUM_TOT];
								pv_paidpremium = 0.;					
								pv_claims_ab += pv[PV_GMAB_TOT];
								pv_claims_ib += pv[PV_GMIB_TOT];
								pv_claims_db += pv[PV_GMDB_TOT];
								pv_claims_wb = 0.;
								pv_claims_sb = 0.;
							}
						}
					}

					ostringstream oss_scen_pass_n;
					ostringstream oss_shock_n;

					string scenario_full_name;
					string scenario_name = "";
					string fund_shock_name = "";

					oss_scen_pass_n << scen_pass_n;
					oss_shock_n << fund_shock_number;
					scenario_name = this->list_scenario_names[oss_scen_pass_n.str()][0];

					// Get the fund name
					int fund_id = fund_shock_array[s][0];
					int shock_value = fund_shock_array[s][fund_shock_array[s][0]]; 

					vector<Product_configuration> products = this->summary_configuration->get_product_configurations();

					//Fund_Manager *f_mgr = Fund_Manager::getInstance();
					//string fund_name = f_mgr->get_fund_name_by_fund_id(fund_id);

					string fund_name = products[0].get_fund_name_by_fund_id(fund_id);

					ostringstream shock_value_str;
					shock_value_str << shock_value;

					fund_shock_name = fund_name + " " + shock_value_str.str() + "%";
					
					scenario_full_name = scenario_name + " " + fund_shock_name;

					double a = 0.;
					double sigma = 0.;
					for(map<int, vector<double>>::const_iterator iter_calib = map_calib_parameters.begin();
						iter_calib != map_calib_parameters.end(); ++iter_calib)
					{
						if (iter_calib->first == scen_pass_n)
						{
							vector<double> v_calib = iter_calib->second;
							a = v_calib[0];
							sigma = v_calib[1];
						}
					}				
					// write the output line
					 sensi_file << scenario_full_name.c_str() << "," << setprecision(15) << pv_realch << ","  << setprecision(15) 
							<< pv_ehcch << "," << setprecision(15) << pv_dep_fee  << "," << setprecision(15) << pv_sumpremium << "," 
							<< setprecision(15) << pv_paidpremium << "," << setprecision(15)
							<< pv_claims_ab << "," << setprecision(15) << pv_claims_ib << "," << setprecision(15) << pv_claims_db 
							<< "," << setprecision(15) << pv_claims_wb << "," << setprecision(15) << pv_claims_sb << "," 
							<< setprecision(15) << a << "," << setprecision(15) << sigma << "," << this->nb_total_polices  << "," << DLL_VERSION << endl;
				}
			}


			sensi_file.close();
		}
		else 
		{

			// Write the sensitivity file
			// Case of new business file

			map <string, vector<Model_Point*>> map_mp_NB;
			map <string, vector<Model_Point*>> map_mp_recalc_old;
			map <string, vector<Model_Point*>> map_mp_recalc_new;

			map<string, map<int,map<int, vector<vector<double>>>>> index_results_map_NB;
			map<string, map<int,map<int, vector<vector<double>>>>> index_results_map_recalc_old;
			map<string, map<int,map<int, vector<vector<double>>>>> index_results_map_recalc_new;

			

			this->get_MP_vector_and_results_for_ehc_recalc(mps, map_mp_NB, index_results_map,
																	index_results_map_NB, indexes_policies_1);

			this->get_MP_vector_and_results_for_ehc_recalc(mps, map_mp_recalc_old, index_results_map,
																	index_results_map_recalc_old, indexes_policies_0);

			this->get_MP_vector_and_results_for_ehc_recalc(mps, map_mp_recalc_new, index_results_map,
																	index_results_map_recalc_new, indexes_policies_1_new);
			


			string sensi_NB = this->summary_configuration->get_ehc_sensi_file_directory() +  
							  this->summary_configuration->get_ehc_sensi_file_name() + ".csv";

			string sensi_recalc_old = this->summary_configuration->get_ehc_sensi_file_directory() +  
							  this->summary_configuration->get_ehc_sensi_file_name() + "_recalc_old.csv";

			string sensi_recalc_new = this->summary_configuration->get_ehc_sensi_file_directory() +  
							  this->summary_configuration->get_ehc_sensi_file_name() + "_recalc_new.csv";



			write_sensi_file(sensi_NB, map_mp_NB, index_results_map_NB, map_ehc_values_NB, map_calib_parameters, this->nb_of_policies_NB);

			write_sensi_file(sensi_recalc_old, map_mp_recalc_old, index_results_map_recalc_old, map_ehc_values_recalc_old, map_calib_parameters, this->nb_of_policies_recalc_old);

			write_sensi_file(sensi_recalc_new, map_mp_recalc_new, index_results_map_recalc_new, map_ehc_values_recalc_new, map_calib_parameters, this->nb_of_policies_recalc_new);

		}
	}


	void write_total_summary_file(const map<string, map<int, map<int, vector<double>>>>& results_map,
		const map<string, map<int, map<int, vector<double>>>>& fund_results_map,
		const map<int,vector<double>>& map_calib_parameters)
	{

		char sensitivities_file_name[MAX_LENGTH_FILE_NAME];
		sprintf(sensitivities_file_name, "%s%s.csv", this->summary_configuration->get_total_file_directory().c_str(), 
			this->summary_configuration->get_total_file_name().c_str());

		ofstream sensi_file(sensitivities_file_name);
		sensi_file  << "scenario, total_agg_real_charges,total_agg_ehc_chi_charges,total_dep_fees,total_sum_prem_fees,total_paid_prem_fees,total_Claims_AB,total_Claims_IB,total_Claims_DB,total_Claims_WB,total_Claims_SB, a, sigma, Total_Police_nb, DLL_Version" << endl;
		for (map<int, vector<vector<int>>>::const_iterator iter_scen_pass_num = this->index_map_shocks.begin(); 
			iter_scen_pass_num != this->index_map_shocks.end(); ++iter_scen_pass_num)
		{
			int scen_pass_n = iter_scen_pass_num->first;
			vector<vector<int>> shock_array = iter_scen_pass_num->second;
			int size_of_shock_array = shock_array.size();

			for(int s = 0; s < size_of_shock_array; s++ )
			{
				int shock_number = this->get_shock_number(shock_array, s, MAX_DELTA_SHOCKS_PER_INDEX, MAXIMUM_NUMBER_OF_INDEXES);
				string shock_full_name = "";
				double total_agg_real_charges=0.;
				double total_agg_ehc_chi_charges=0.;
				double total_dep_fees=0.;
				double total_sum_prem_fees=0.;
				double total_paid_prem_fees=0.;
				double total_Claims_AB=0.;
				double total_Claims_IB=0.;
				double total_Claims_DB=0.;
				double total_Claims_WB=0.;
				double total_Claims_SB=0.;

				// Loop on the products
				for(map<string, map<int, map<int, vector<double>>>>::const_iterator iter_products = results_map.begin();
					iter_products != results_map.end(); ++iter_products)
				{
					string pCK = iter_products->first;
					vector<double> pvs = this->get_pvs_vector(pCK, scen_pass_n, shock_number, results_map);
					if( pCK == "DEU_IAB01" || pCK == "DEU_IAB02" || pCK == "DEU_IDB01" || pCK == "DEU_IDB02" )
					{
						total_agg_real_charges+=pvs[PV_REAL_CHARGES_DEU];
						total_agg_ehc_chi_charges+=pvs[PV_EHC_CHARGES_DEU];
						total_dep_fees+=pvs[PV_DEP_FEE_TOT];
						total_sum_prem_fees+=pvs[PV_DEP_FEE_SUM_TOT];
						total_paid_prem_fees+=0.;
						total_Claims_AB+=pvs[PV_GMAB_TOT];
						total_Claims_IB+=pvs[PV_GMIB_TOT];
						total_Claims_DB+=pvs[PV_GMDB_TOT];
					}
					else
					{
						total_agg_real_charges+=pvs[PV_REAL_CHARGES_DEU];
						total_agg_ehc_chi_charges+=pvs[PV_EHC_CHARGES_DEU];
						total_dep_fees+=pvs[PV_DEP_FEE_TOT_CHI];
						total_sum_prem_fees+=pvs[PV_DEP_FEE_SUM_TOT_CHI];
						total_paid_prem_fees+=pvs[PV_HC_PP_AV_TOT_CHI];
						total_Claims_AB+=pvs[PV_GMAB_TOT];
						total_Claims_IB+=pvs[PV_GMIB_TOT];
						total_Claims_DB+=pvs[PV_GMDB_TOT];					
					}

					total_Claims_WB+=0.;
					total_Claims_SB+=0.;
				}

				ostringstream oss_scen_pass_n;
				ostringstream oss_shock_n;
				string scenario_full_name;
				string scenario_name = "";
				string index_shock_name = "";
				oss_scen_pass_n << scen_pass_n;
				oss_shock_n << shock_number;
				scenario_name = this->list_scenario_names[oss_scen_pass_n.str()][0];
				if (shock_number > 0)
					index_shock_name = this->list_index_shock_names[oss_shock_n.str()][0];

				scenario_full_name = scenario_name + " " + index_shock_name;

				double a = 0.;
				double sigma = 0.;

				for(map<int, vector<double>>::const_iterator iter_calib = map_calib_parameters.begin();
					iter_calib != map_calib_parameters.end(); ++iter_calib)
				{
					if (iter_calib->first == scen_pass_n)
					{
						vector<double> v_calib = iter_calib->second;
						a = v_calib[0];
						sigma = v_calib[1];
					}
				}

				// write the output line
				sensi_file << scenario_full_name.c_str() << "," << setprecision(15) << total_agg_real_charges << ","  << setprecision(15) 
					<< total_agg_ehc_chi_charges << "," << setprecision(15) << total_dep_fees  << "," << setprecision(15) << total_sum_prem_fees << "," << setprecision(15) 
					<< total_paid_prem_fees << "," << setprecision(15) << total_Claims_AB <<"," 
					<< setprecision(15) <<total_Claims_IB <<","<< setprecision(15) << total_Claims_DB <<"," 
					<< setprecision(15) << total_Claims_WB << "," <<setprecision(15) << total_Claims_SB <<","<< a << "," << setprecision(15) << sigma << "," << setprecision(15) << this->nb_total_polices << "," <<  DLL_VERSION << endl;
			}
		}
		sensi_file.close();
	}


	void write_total_summary_file_esg(const map<string, map<int, map<int, map<int, vector<double>>>>>& results_map,
		const map<string, map<int, map<int, map<int, vector<double>>>>>& fund_results_map,
		const map<int,map<int,vector<double>>>& map_calib_parameters)
	{

		char sensitivities_file_name[MAX_LENGTH_FILE_NAME];
		sprintf(sensitivities_file_name, "%s%s.csv", this->summary_configuration->get_total_file_directory().c_str(), 
			this->summary_configuration->get_total_file_name().c_str());

		ofstream sensi_file(sensitivities_file_name);
		sensi_file  << "scenario, total_agg_real_charges,total_agg_ehc_chi_charges,total_dep_fees,total_sum_prem_fees,total_paid_prem_fees,total_Claims_AB,total_Claims_IB,total_Claims_DB,total_Claims_WB,total_Claims_SB, a, sigma,Total_Police_nb,DLL_Version" << endl;
		//! loop scen
		for (map<int, map<int, vector<vector<int>>>>::const_iterator iter_scen_pass_num = this->index_map_shocks_esg.begin(); 
			iter_scen_pass_num != this->index_map_shocks_esg.end(); ++iter_scen_pass_num)
		{
			int scen_pass_n = iter_scen_pass_num->first;
			string scen_pass_n_str = Converter::convert_to_str(scen_pass_n);
			//! loop bucket
			for (map<int, vector<vector<int>>>::const_iterator iter_bucket = iter_scen_pass_num->second.begin(); 
				iter_bucket != iter_scen_pass_num->second.end(); ++iter_bucket)
			{
				int bucket_id = iter_bucket->first;
				string bucket_id_str = Converter::convert_to_str(bucket_id);
				vector<vector<int>> shock_array = iter_bucket->second;
				int size_of_shock_array = shock_array.size();
				//! loop shock
				for(int s = 0; s < size_of_shock_array; s++ )
				{
					int shock_number = this->get_shock_number(shock_array, s, MAX_DELTA_SHOCKS_PER_INDEX, MAXIMUM_NUMBER_OF_INDEXES);
					string shock_number_str = Converter::convert_to_str(shock_number);
					//string shock_full_name = "";
					double total_agg_real_charges=0.;
					double total_agg_ehc_chi_charges=0.;
					double total_dep_fees=0.;
					double total_sum_prem_fees=0.;
					double total_paid_prem_fees=0.;
					double total_Claims_AB=0.;
					double total_Claims_IB=0.;
					double total_Claims_DB=0.;
					double total_Claims_WB=0.;
					double total_Claims_SB=0.;
					//double pv_claims = 0.;
					//double pv_realch = 0.;
					//double pv_ehcch = 0.;
					//double pv_dep_fee = 0.;
					//double sum_premium = 0.;

					//! Loop products
					for(map<string, map<int, map<int, map<int, vector<double>>>>>::const_iterator iter_products = results_map.begin();
						iter_products != results_map.end(); ++iter_products)
					{
						string pCK = iter_products->first;
						vector<double> pvs = this->get_pvs_vector_esg(pCK, scen_pass_n, bucket_id, shock_number, results_map);
						if( pCK == "DEU_IAB01" || pCK == "DEU_IAB02" || pCK == "DEU_IDB01" || pCK == "DEU_IDB02" )
						{
							total_agg_real_charges+=pvs[PV_REAL_CHARGES_DEU];
							total_agg_ehc_chi_charges+=pvs[PV_EHC_CHARGES_DEU];
							total_dep_fees+=pvs[PV_DEP_FEE_TOT];
							total_sum_prem_fees+=pvs[PV_DEP_FEE_SUM_TOT];
							total_paid_prem_fees+=0.;
							total_Claims_AB+=pvs[PV_GMAB_TOT];
							total_Claims_IB+=pvs[PV_GMIB_TOT];
							total_Claims_DB+=pvs[PV_GMDB_TOT];
						}
						else
						{
							total_agg_real_charges+=pvs[PV_REAL_CHARGES_DEU];
							//total_agg_real_charges+=(pvs[PV_HC_AV]+pvs[PV_HC_AV_ADD]+pvs[PV_HC_AV_PAID_UP]+pvs[PV_HC_AV_ADD_PAID_UP]);
							//total_agg_ehc_chi_charges+=total_agg_real_charges*pvs[PV_CHI_DEU];
							total_agg_ehc_chi_charges+=pvs[PV_EHC_CHARGES_DEU];
							total_dep_fees+=pvs[PV_DEP_FEE_TOT_CHI];
							total_sum_prem_fees+=pvs[PV_DEP_FEE_SUM_TOT_CHI];
							total_paid_prem_fees+=pvs[PV_HC_PP_AV_TOT_CHI];
							total_Claims_AB+=pvs[PV_GMAB_TOT];
							total_Claims_IB+=pvs[PV_GMIB_TOT];
							total_Claims_DB+=pvs[PV_GMDB_TOT];					
						}

						total_Claims_WB+=0.;
						total_Claims_SB+=0.;
					}

					//ostringstream oss_scen_pass_n;
					//ostringstream oss_shock_n;
					//string scenario_full_name;
					//string scenario_name = "";
					//string index_shock_name = "";
					//oss_scen_pass_n << scen_pass_n;
					//oss_shock_n << shock_number;


					string scenario_name = this->list_scenario_names[scen_pass_n_str.c_str()][0];
					string index_shock_name = "";
					if (shock_number > 0)
						index_shock_name = this->list_index_shock_names[shock_number_str.c_str()][0];
					string scenario_full_name = scenario_name + " " + bucket_id_str + " " + index_shock_name;

					double a = 0.;
					double sigma = 0.;

					//for(map<int, map<int, vector<double>>>::const_iterator iter_calib = map_calib_parameters.begin();
					//	iter_calib != map_calib_parameters.end(); ++iter_calib)
					//{
					//	if (iter_calib->first == scen_pass_n)
					//	{
					//		vector<double> v_calib = iter_calib->second;
					//		a = v_calib[0];
					//		sigma = v_calib[1];
					//	}
					//}

					//! TODO add Exception
					map<int,map<int,vector<double>>>::const_iterator itr_calib_scen = map_calib_parameters.find(scen_pass_n);
					if(itr_calib_scen!= map_calib_parameters.end())
					{
						map<int, vector<double>>::const_iterator itr_calib_bucket = itr_calib_scen->second.find(bucket_id);
						if(itr_calib_bucket != itr_calib_scen->second.end())
						{
							vector<double> v_calib = itr_calib_bucket->second;
							a = v_calib[0];
							sigma = v_calib[1];
						}
					}

					// write the output line
					sensi_file << scenario_full_name.c_str() << "," << setprecision(15) << total_agg_real_charges << ","  << setprecision(15) 
						<< total_agg_ehc_chi_charges << "," << setprecision(15) << total_dep_fees  << "," << setprecision(15) << total_sum_prem_fees << "," << setprecision(15) 
						<< total_paid_prem_fees << "," << setprecision(15) << total_Claims_AB <<"," 
						<< setprecision(15) <<total_Claims_IB <<","<< setprecision(15) << total_Claims_DB <<"," 
						<< setprecision(15) << total_Claims_WB << "," <<setprecision(15) << total_Claims_SB <<","<< a << "," << setprecision(15) << sigma << "," << setprecision(15) << this->nb_total_polices << "," <<  DLL_VERSION << endl;
				}
			}
		}
		sensi_file.close();
	}


	void write_pol_by_pol(const map<string, vector<Model_Point*>>& mps, 
		const map<string, map<int,map<int, vector<vector<double>>>>>& index_results_map,
		const map<string, map<int,map<int, vector<vector<double>>>>>& fund_results_map,
		const map<string, map<int,map<string, vector<vector<double>>>>>& results_lapse,
		const map<string, map<int,map<string, vector<vector<double>>>>>& results_mort,
		const map<string, map<int, vector<vector<double>>>>& results_longevity,
		const map<string, map<int,map<string, vector<vector<double>>>>>& results_paidup,
		const map<string, map<int,map<string, vector<vector<double>>>>>& results_election)
	{

		//Shock on Indexes
		for (map<int, vector<vector<int>>>::const_iterator iter_scen_pass_num = this->index_map_shocks.begin(); 
			iter_scen_pass_num != this->index_map_shocks.end(); ++iter_scen_pass_num)
		{
			int scen_pass_n = iter_scen_pass_num->first;
			vector<vector<int>> index_shock_array = iter_scen_pass_num->second;
			int index_size_of_shock_array = index_shock_array.size();
			for(int s = 0; s < index_size_of_shock_array; s++ )
			{
				int shock_number = this->get_shock_number(index_shock_array, s, MAX_DELTA_SHOCKS_PER_INDEX, MAXIMUM_NUMBER_OF_INDEXES);

				char pol_by_pol_file_name[MAX_LENGTH_FILE_NAME];
				sprintf(pol_by_pol_file_name, "%s%s_%d_%d.csv", this->summary_configuration->get_policy_by_policy_file_directory().c_str(), 
					this->summary_configuration->get_policy_by_policy_file_name().c_str(), scen_pass_n, shock_number);

				ofstream pol_by_pol_file(pol_by_pol_file_name);

				//pol_by_pol_file  << "Version,Country,Product,Group,prod_type,POL_ID,1,1,GMXB_G_C,GMXB_H_C,agg_real_charges,pv_ehc_charge,agg_claims,agg_dep_fee,sum_of_premium,PV_GMAB,PV_GMDB,PV_GMIB,PV_GMWB,PV_GMSB,AGE_VALN,DURATION,GMXB_TYPE2,AX_GENDER,PREM_PAID,SPLIT_IDX0,SPLIT_IDX1,SPLIT_IDX2,SPLIT_IDX3,SPLIT_IDX4,SPLIT_IDX5,SPLIT_IDX6,SPLIT_IDX7,SPLIT_IDX8,SPLIT_IDX9,SPLIT_IDX10,SPLIT_IDX11" << endl;
				pol_by_pol_file  << "Version,Country,Product,Group,prod_type,POL_ID,HW_Mean_Reversion,HW_volatility,GMXB_G_C_Net,GMXB_G_C_Gross,GMXB_EHC,GMXB_CHI,agg_real_charges,agg_EHC_charges,agg_claims,pv_ehc_av_charges,agg_dep_fee,sum_of_premium,Paid_premium_Charges,PV_GMAB_Claims,PV_GMDB_Claims,PV_GMIB_Claims,PV_GMIB_Fond_Claims,PV_GMWB_Claims,";
				pol_by_pol_file  << "PV_GMSB_Claims,LOV,Policy_moneyness,AGE_VALN,DURATION,GMXB_TYPE2,AX_GENDER,PREM_PAID,SPLIT_IDX0,SPLIT_IDX1,SPLIT_IDX2,SPLIT_IDX3,SPLIT_IDX4,SPLIT_IDX5,SPLIT_IDX6,SPLIT_IDX7,SPLIT_IDX8,SPLIT_IDX9,SPLIT_IDX10,SPLIT_IDX11,GMAB1_VALN_SUMMARISE,GMAB2_VALN_SUMMARISE,GMDB1_VALN_SUMMARISE,GMDB2_VALN_SUMMARISE,GMWB1_VALN_SUMMARISE,GMWB2_VALN_SUMMARISE,GMWB_DEF_P_SUMMARISE,GMWB_RAT_P_SUMMARISE,GMXB_M_C_SUMMARISE,GMXB_A_C_SUMMARISE,AXA_ROLL_R_SUMMARISE,GMWB_WDL_RATE_SUMMARISE,AV0_SUMMARISE" << endl;

				// Loop on the products
				for(map<string, map<int, map<int, vector<vector<double>>>>>::const_iterator iter_products = index_results_map.begin();
					iter_products != index_results_map.end(); ++iter_products)
				{
					// string pCK = iter_products->first;
					//vector<vector<double>> index_pvs = this->get_pvs_vector(pCK, scen_pass_n, shock_number, index_results_map);

					for(map<string, vector<Model_Point*>>::const_iterator iter_mp = mps.begin();
						iter_mp != mps.end(); ++iter_mp)
					{
						string pCK = iter_mp->first;
						vector<Model_Point*> model_points = iter_mp->second;
						vector<vector<double>> index_pvs = this->get_pvs_vector(pCK, scen_pass_n, shock_number, index_results_map);
						int number_of_mps = model_points.size();
						for(int i = 0; i < number_of_mps ; i++)
						{
							double agg_real_charges = 0.;
							double agg_EHC_charges=0.;
							double agg_claims = 0.;
							double pv_ehc_av_charges=0.;
							double agg_dep_fee = 0.;
							double sum_of_premium = 0.;
							double Paid_premium_Charges=0.;
							if( pCK == "DEU_IAB01" || pCK == "DEU_IAB02" || pCK == "DEU_IDB01" || pCK == "DEU_IDB02" )
							{
								Model_Point_DEU *model_p = dynamic_cast<Model_Point_DEU*>(model_points[i]);

								vector<double> index_pv = index_pvs[i];

								double AV0=0;
								for(int k=0;k<MAXIMUM_NUMBER_OF_INDEXES;k++)
								{
									AV0+=model_p->av_if_array[k];
								}

								pol_by_pol_file << "V1.0" << ",";
								string country_code = pCK.substr(0,pCK.find("_"));
								pol_by_pol_file << country_code.c_str() << ",";
								pol_by_pol_file << model_p->product.c_str() << ",";
								pol_by_pol_file << model_p->group.c_str() << ",";
								pol_by_pol_file << pCK.c_str() << ",";
								pol_by_pol_file << model_p->policy_id.c_str() << ",";
								pol_by_pol_file << "1" << ",";
								pol_by_pol_file << "1" << ",";
								pol_by_pol_file << model_p->gmxb_g_c/100. << ",";

								pol_by_pol_file << model_p->gmxb_g_c_gross << ",";
								pol_by_pol_file << model_p->gmxb_ehc_charge/100. << ",";
								pol_by_pol_file << 0. << ",";
								agg_real_charges=index_pv[PV_HC_AV_TOT];
								agg_dep_fee=index_pv[PV_DEP_FEE_TOT];
								sum_of_premium=index_pv[PV_DEP_FEE_SUM_TOT];
								Paid_premium_Charges=0.;
								pv_ehc_av_charges=index_pv[PV_EHC_CHARGES_DEU];
								agg_EHC_charges=pv_ehc_av_charges+Paid_premium_Charges+sum_of_premium+agg_dep_fee;
								agg_claims=index_pv[PV_GMDB_TOT]+index_pv[PV_GMIB_TOT]+index_pv[PV_GMAB_TOT];
								pol_by_pol_file << setprecision(15) << agg_real_charges << ",";	
								pol_by_pol_file << setprecision(15) << agg_EHC_charges << ",";	
								pol_by_pol_file << setprecision(15) << agg_claims << ",";	
								pol_by_pol_file << setprecision(15) << pv_ehc_av_charges << ",";	
								pol_by_pol_file << setprecision(15) << agg_dep_fee << ",";	
								pol_by_pol_file << setprecision(15) << sum_of_premium << ",";	
								pol_by_pol_file << setprecision(15) << Paid_premium_Charges << ",";	

								pol_by_pol_file << setprecision(15) << index_pv[PV_GMAB_TOT]  << ",";
								pol_by_pol_file << setprecision(15) << index_pv[PV_GMDB_TOT]  << ",";
								pol_by_pol_file << setprecision(15) << index_pv[PV_GMIB_TOT]  << ",";
								pol_by_pol_file << setprecision(15) << index_pv[PV_GMIB_FONDS_DEU]  << ",";
								pol_by_pol_file << setprecision(15) << 0.  << ",";
								pol_by_pol_file << setprecision(15) << 0.  << ",";

								pol_by_pol_file << setprecision(15) << index_pv[PV_LOV_DEU]   << ",";
								pol_by_pol_file << setprecision(15) << index_pv[PV_ITM_DEU]  << ",";

								pol_by_pol_file << model_p->age_at_valn << ",";
								pol_by_pol_file << model_p->duration_valn << ",";
								pol_by_pol_file << 0. << ",";
								pol_by_pol_file << model_p->sex << ",";
								pol_by_pol_file << model_p->prem_paid << ",";
								pol_by_pol_file << model_p->target_av_split_valn_index0 << ",";
								pol_by_pol_file << model_p->target_av_split_valn_index1 << ",";
								pol_by_pol_file << model_p->target_av_split_valn_index2 << ",";
								pol_by_pol_file << model_p->target_av_split_valn_index3 << ",";
								pol_by_pol_file << model_p->target_av_split_valn_index4 << ",";
								pol_by_pol_file << model_p->target_av_split_valn_index5 << ",";
								pol_by_pol_file << model_p->target_av_split_valn_index6 << ",";
								pol_by_pol_file << model_p->target_av_split_valn_index7 << ",";
								pol_by_pol_file << model_p->target_av_split_valn_index8 << ",";
								pol_by_pol_file << model_p->target_av_split_valn_index9 << ",";
								pol_by_pol_file << model_p->target_av_split_valn_index10 << ",";
								pol_by_pol_file << model_p->target_av_split_valn_index11 << ",";
								pol_by_pol_file << -1 << ",";
								pol_by_pol_file << -1 << ",";
								pol_by_pol_file << -1 << ",";
								pol_by_pol_file << -1 << ",";
								pol_by_pol_file << -1 << ",";
								pol_by_pol_file << -1 << ",";
								pol_by_pol_file << -1 << ",";
								pol_by_pol_file << -1 << ",";
								pol_by_pol_file << -1 << ",";
								pol_by_pol_file << -1 << ",";
								pol_by_pol_file << -1 << ",";
								pol_by_pol_file << -1 << ",";
								pol_by_pol_file << AV0<< ",";
								// TODO display the required fields
								pol_by_pol_file << endl;
							}
							else
							{
								Model_Point_DEU_IADB05 *model_p = dynamic_cast<Model_Point_DEU_IADB05*>(model_points[i]);

								vector<double> index_pv = index_pvs[i];
								double AV0=0;
								for(int k=0;k<MAXIMUM_NUMBER_OF_INDEXES;k++)
								{
									AV0+=model_p->av_if_array[k];
								}
								pol_by_pol_file << "V1.0" << ",";
								string country_code = pCK.substr(0,pCK.find("_"));
								pol_by_pol_file << country_code.c_str() << ",";
								pol_by_pol_file << model_p->product.c_str() << ",";
								pol_by_pol_file << model_p->Group.c_str() << ",";
								pol_by_pol_file << pCK.c_str() << ",";
								pol_by_pol_file << model_p->policy_id.c_str() << ",";
								pol_by_pol_file << "1" << ",";
								pol_by_pol_file << "1" << ",";
								pol_by_pol_file << model_p->Gmxb_guaranted_cost << ",";
								pol_by_pol_file << model_p->Hc_av_brutto << ",";
								pol_by_pol_file << 0. << ",";
								pol_by_pol_file << model_p->Gmxb_EHC_cost << ",";
								//double chi=(index_pv[PV_GMDB_TOT]+index_pv[PV_GMIB_TOT]+index_pv[PV_GMAB_TOT])/(index_pv[PV_HC_AV]+index_pv[PV_HC_AV_ADD]+index_pv[PV_HC_AV_PAID_UP]+index_pv[PV_HC_AV_ADD_PAID_UP]+index_pv[PV_DEP_FEE_TOT]+index_pv[PV_DEP_FEE_SUM_TOT]+index_pv[PV_HC_PP_AV]+index_pv[PV_HC_PP_AV_ADD]+index_pv[PV_HC_PP_AV_PAID_UP]+index_pv[PV_HC_PP_ADD_AV_PAID_UP]);
								//pol_by_pol_file << (index_pv[PV_GMDB_TOT]+index_pv[PV_GMIB_TOT]+index_pv[PV_GMAB_TOT])/(index_pv[PV_HC_AV]+index_pv[PV_HC_AV_ADD]+index_pv[PV_HC_AV_PAID_UP]+index_pv[PV_HC_AV_ADD_PAID_UP]+index_pv[PV_DEP_FEE_TOT]+index_pv[PV_DEP_FEE_SUM_TOT]+index_pv[PV_HC_PP_AV]+index_pv[PV_HC_PP_AV_ADD]+index_pv[PV_HC_PP_AV_PAID_UP]+index_pv[PV_HC_PP_ADD_AV_PAID_UP]) << ",";
								agg_real_charges=(index_pv[PV_HC_AV]+index_pv[PV_HC_AV_ADD]+index_pv[PV_HC_AV_PAID_UP]+index_pv[PV_HC_AV_ADD_PAID_UP]);
								pv_ehc_av_charges=agg_real_charges*model_p->Gmxb_EHC_cost;
								agg_EHC_charges=pv_ehc_av_charges+index_pv[PV_DEP_FEE_TOT_CHI]+index_pv[PV_DEP_FEE_SUM_TOT_CHI]+index_pv[PV_HC_PP_AV_TOT_CHI];
								agg_claims=index_pv[PV_GMDB_TOT]+index_pv[PV_GMIB_TOT]+index_pv[PV_GMAB_TOT];
								pol_by_pol_file << setprecision(15) << agg_real_charges << ",";	
								pol_by_pol_file << setprecision(15) << agg_EHC_charges << ",";	
								pol_by_pol_file << setprecision(15) << agg_claims << ",";	
								pol_by_pol_file << setprecision(15) << pv_ehc_av_charges << ",";	
								pol_by_pol_file << setprecision(15) << index_pv[PV_DEP_FEE_TOT_CHI] << ",";	
								pol_by_pol_file << setprecision(15) << index_pv[PV_DEP_FEE_SUM_TOT_CHI] << ",";	
								pol_by_pol_file << setprecision(15) << index_pv[PV_HC_PP_AV_TOT_CHI] << ",";	

								pol_by_pol_file << setprecision(15) << index_pv[PV_GMAB_TOT]  << ",";
								pol_by_pol_file << setprecision(15) << index_pv[PV_GMDB_TOT]  << ",";
								pol_by_pol_file << setprecision(15) << index_pv[PV_GMIB_TOT]  << ",";
								pol_by_pol_file << setprecision(15) << index_pv[PV_GMIB_FONDS_DEU]  << ",";
								pol_by_pol_file << setprecision(15) << 0.  << ",";
								pol_by_pol_file << setprecision(15) << 0.  << ",";

								pol_by_pol_file << setprecision(15) << agg_claims- agg_EHC_charges << ",";
								pol_by_pol_file << setprecision(15) << index_pv[PV_ITM_DEU]  << ",";

								pol_by_pol_file << model_p->Age_at_valn << ",";
								pol_by_pol_file << model_p->Duration_valn<< ",";
								pol_by_pol_file << 0. << ",";
								pol_by_pol_file << model_p->Sex << ",";
								pol_by_pol_file << model_p->Prem_paid << ",";
								pol_by_pol_file << model_p->Target_av_split_valn_index0 << ",";
								pol_by_pol_file << model_p->Target_av_split_valn_index1 << ",";
								pol_by_pol_file << model_p->Target_av_split_valn_index2 << ",";
								pol_by_pol_file << model_p->Target_av_split_valn_index3 << ",";
								pol_by_pol_file << model_p->Target_av_split_valn_index4 << ",";
								pol_by_pol_file << model_p->Target_av_split_valn_index5 << ",";
								pol_by_pol_file << model_p->Target_av_split_valn_index6 << ",";
								pol_by_pol_file << model_p->Target_av_split_valn_index7 << ",";
								pol_by_pol_file << model_p->Target_av_split_valn_index8 << ",";
								pol_by_pol_file << model_p->Target_av_split_valn_index9 << ",";
								pol_by_pol_file << model_p->Target_av_split_valn_index10 << ",";
								pol_by_pol_file << model_p->Target_av_split_valn_index11 << ",";
								pol_by_pol_file << -1 << ",";
								pol_by_pol_file << -1 << ",";
								pol_by_pol_file << -1 << ",";
								pol_by_pol_file << -1 << ",";
								pol_by_pol_file << -1 << ",";
								pol_by_pol_file << -1 << ",";
								pol_by_pol_file << -1 << ",";
								pol_by_pol_file << -1 << ",";
								pol_by_pol_file << -1 << ",";
								pol_by_pol_file << -1 << ",";
								pol_by_pol_file << -1 << ",";
								pol_by_pol_file << -1 << ",";
								pol_by_pol_file << AV0<< ",";

								// TODO display the required fields
								pol_by_pol_file << endl;									

							}				
						}
					}
				}
				pol_by_pol_file.close();
			}
		}

		//Shock on funds
		for (map<int, vector<vector<int>>>::const_iterator iter_scen_pass_num = this->fund_map_shocks.begin(); 
			iter_scen_pass_num != this->fund_map_shocks.end(); ++iter_scen_pass_num)
		{
			int scen_pass_n = iter_scen_pass_num->first;
			vector<vector<int>> fund_shock_array = iter_scen_pass_num->second;
			int fund_size_of_shock_array = fund_shock_array.size();
			int number_of_funds = 0;
			if (fund_size_of_shock_array > 0)
				number_of_funds = fund_shock_array[0].size();	


			for(int s = 0; s < fund_size_of_shock_array; s++ )
			{
				int shock_number = this->get_shock_number(fund_shock_array, s, MAX_DELTA_SHOCKS_PER_INDEX, number_of_funds);

				char pol_by_pol_file_name[MAX_LENGTH_FILE_NAME];
				sprintf(pol_by_pol_file_name, "%s%s_fund_%d_%d.csv", this->summary_configuration->get_policy_by_policy_file_directory().c_str(), 
					this->summary_configuration->get_policy_by_policy_file_name().c_str(), scen_pass_n, shock_number);

				ofstream pol_by_pol_file(pol_by_pol_file_name);

				pol_by_pol_file  << "Version,Country,Product,Group,prod_type,POL_ID,HW_Mean_Reversion,HW_volatility,GMXB_G_C_Net,GMXB_G_C_Gross,GMXB_EHC,GMXB_CHI,agg_real_charges,agg_EHC_charges,agg_claims,pv_ehc_av_charges,agg_dep_fee,sum_of_premium,Paid_premium_Charges,PV_GMAB_Claims,PV_GMDB_Claims,PV_GMIB_Claims,PV_GMIB_Fond_Claims,PV_GMWB_Claims,";
				pol_by_pol_file  << "PV_GMSB_Claims,LOV,Policy_moneyness,AGE_VALN,DURATION,GMXB_TYPE2,AX_GENDER,PREM_PAID,SPLIT_IDX0,SPLIT_IDX1,SPLIT_IDX2,SPLIT_IDX3,SPLIT_IDX4,SPLIT_IDX5,SPLIT_IDX6,SPLIT_IDX7,SPLIT_IDX8,SPLIT_IDX9,SPLIT_IDX10,SPLIT_IDX11,";
				pol_by_pol_file << "GMAB1_VALN_SUMMARISE,GMAB2_VALN_SUMMARISE,GMDB1_VALN_SUMMARISE,GMDB2_VALN_SUMMARISE,GMWB1_VALN_SUMMARISE,GMWB2_VALN_SUMMARISE,GMWB_DEF_P_SUMMARISE,GMWB_RAT_P_SUMMARISE,GMXB_M_C_SUMMARISE,GMXB_A_C_SUMMARISE,AXA_ROLL_R_SUMMARISE,GMWB_WDL_RATE_SUMMARISE,AV0_SUMMARISE" << endl;

				// Loop on the products
				for(map<string, map<int, map<int, vector<vector<double>>>>>::const_iterator iter_products = fund_results_map.begin();
					iter_products != fund_results_map.end(); ++iter_products)
				{
					// string pCK = iter_products->first;
					//vector<vector<double>> fund_pvs = this->get_pvs_vector(pCK, scen_pass_n, shock_number, fund_results_map);

					for(map<string, vector<Model_Point*>>::const_iterator iter_mp = mps.begin();
						iter_mp != mps.end(); ++iter_mp)
					{
						string pCK = iter_mp->first;
						vector<Model_Point*> model_points = iter_mp->second;
						vector<vector<double>> fund_pvs = this->get_pvs_vector(pCK, scen_pass_n, shock_number, fund_results_map);
						int number_of_mps = model_points.size();
						for(int i = 0; i < number_of_mps ; i++)
						{
							double agg_real_charges = 0.;
							double agg_EHC_charges=0.;
							double agg_claims = 0.;
							double pv_ehc_av_charges=0.;
							double agg_dep_fee = 0.;
							double sum_of_premium = 0.;
							double Paid_premium_Charges=0.;
							if( pCK == "DEU_IAB01" || pCK == "DEU_IAB02" || pCK == "DEU_IDB01" || pCK == "DEU_IDB02" )
							{
								Model_Point_DEU *model_p = dynamic_cast<Model_Point_DEU*>(model_points[i]);
								vector<double> index_pv = fund_pvs[i];

								double AV0=0;
								for(int k=0;k<MAXIMUM_NUMBER_OF_INDEXES;k++)
								{
									AV0+=model_p->av_if_array[k];
								}

								pol_by_pol_file << "V1.0" << ",";
								string country_code = pCK.substr(0,pCK.find("_"));
								pol_by_pol_file << country_code.c_str() << ",";
								pol_by_pol_file << model_p->product.c_str() << ",";
								pol_by_pol_file << model_p->group.c_str() << ",";
								pol_by_pol_file << pCK.c_str() << ",";
								pol_by_pol_file << model_p->policy_id.c_str() << ",";
								pol_by_pol_file << "1" << ",";
								pol_by_pol_file << "1" << ",";
								pol_by_pol_file << model_p->gmxb_g_c / 100. << ",";
								pol_by_pol_file << model_p->gmxb_g_c_gross << ",";
								pol_by_pol_file << model_p->gmxb_ehc_charge /100. << ",";
								pol_by_pol_file << 0. << ",";
								agg_real_charges=index_pv[PV_HC_AV_TOT];
								agg_dep_fee=index_pv[PV_DEP_FEE_TOT];
								sum_of_premium=index_pv[PV_DEP_FEE_SUM_TOT];
								Paid_premium_Charges=0.;
								pv_ehc_av_charges=index_pv[PV_EHC_CHARGES_DEU];
								agg_EHC_charges=pv_ehc_av_charges+Paid_premium_Charges+sum_of_premium+agg_dep_fee;
								agg_claims=index_pv[PV_GMDB_TOT]+index_pv[PV_GMIB_TOT]+index_pv[PV_GMAB_TOT];
								pol_by_pol_file << setprecision(15) << agg_real_charges << ",";	
								pol_by_pol_file << setprecision(15) << agg_EHC_charges << ",";	
								pol_by_pol_file << setprecision(15) << agg_claims << ",";	
								pol_by_pol_file << setprecision(15) << pv_ehc_av_charges << ",";	
								pol_by_pol_file << setprecision(15) << agg_dep_fee << ",";	
								pol_by_pol_file << setprecision(15) << sum_of_premium << ",";	
								pol_by_pol_file << setprecision(15) << Paid_premium_Charges << ",";	

								pol_by_pol_file << setprecision(15) << index_pv[PV_GMAB_TOT]  << ",";
								pol_by_pol_file << setprecision(15) << index_pv[PV_GMDB_TOT]  << ",";
								pol_by_pol_file << setprecision(15) << index_pv[PV_GMIB_TOT]  << ",";
								pol_by_pol_file << setprecision(15) << index_pv[PV_GMIB_FONDS_DEU]  << ",";
								pol_by_pol_file << setprecision(15) << 0.  << ",";
								pol_by_pol_file << setprecision(15) << 0.  << ",";

								pol_by_pol_file << setprecision(15) << index_pv[PV_LOV_DEU]   << ",";
								pol_by_pol_file << setprecision(15) << index_pv[PV_ITM_DEU]  << ",";

								pol_by_pol_file << model_p->age_at_valn << ",";
								pol_by_pol_file << model_p->duration_valn << ",";
								pol_by_pol_file << 0. << ",";
								pol_by_pol_file << model_p->sex << ",";
								pol_by_pol_file << model_p->prem_paid << ",";
								pol_by_pol_file << model_p->target_av_split_valn_index0 << ",";
								pol_by_pol_file << model_p->target_av_split_valn_index1 << ",";
								pol_by_pol_file << model_p->target_av_split_valn_index2 << ",";
								pol_by_pol_file << model_p->target_av_split_valn_index3 << ",";
								pol_by_pol_file << model_p->target_av_split_valn_index4 << ",";
								pol_by_pol_file << model_p->target_av_split_valn_index5 << ",";
								pol_by_pol_file << model_p->target_av_split_valn_index6 << ",";
								pol_by_pol_file << model_p->target_av_split_valn_index7 << ",";
								pol_by_pol_file << model_p->target_av_split_valn_index8 << ",";
								pol_by_pol_file << model_p->target_av_split_valn_index9 << ",";
								pol_by_pol_file << model_p->target_av_split_valn_index10 << ",";
								pol_by_pol_file << model_p->target_av_split_valn_index11 << ",";
								// TODO display the required fields
								pol_by_pol_file << -1 << ",";
								pol_by_pol_file << -1 << ",";
								pol_by_pol_file << -1 << ",";
								pol_by_pol_file << -1 << ",";
								pol_by_pol_file << -1 << ",";
								pol_by_pol_file << -1 << ",";
								pol_by_pol_file << -1 << ",";
								pol_by_pol_file << -1 << ",";
								pol_by_pol_file << -1 << ",";
								pol_by_pol_file << -1 << ",";
								pol_by_pol_file << -1 << ",";
								pol_by_pol_file << -1 << ",";
								pol_by_pol_file << AV0<< ",";
								pol_by_pol_file << endl;
							}
							else
							{
								Model_Point_DEU_IADB05 *model_p = dynamic_cast<Model_Point_DEU_IADB05*>(model_points[i]);

								vector<double> index_pv = fund_pvs[i];

								double AV0=0;
								for(int k=0;k<MAXIMUM_NUMBER_OF_INDEXES;k++)
								{
									AV0+=model_p->av_if_array[k];
								}

								pol_by_pol_file << "V1.0" << ",";
								string country_code = pCK.substr(0,pCK.find("_"));
								pol_by_pol_file << country_code.c_str() << ",";
								pol_by_pol_file << model_p->product.c_str() << ",";
								pol_by_pol_file << model_p->Group.c_str() << ",";
								pol_by_pol_file << pCK.c_str() << ",";
								pol_by_pol_file << model_p->policy_id.c_str() << ",";
								pol_by_pol_file << "1" << ",";
								pol_by_pol_file << "1" << ",";
								pol_by_pol_file << model_p->Gmxb_guaranted_cost << ",";
								pol_by_pol_file << model_p->Hc_av_brutto << ",";
								pol_by_pol_file << 0. << ",";
								pol_by_pol_file << model_p->Gmxb_EHC_cost << ",";
								//double chi=(index_pv[PV_GMDB_TOT]+index_pv[PV_GMIB_TOT]+index_pv[PV_GMAB_TOT])/(index_pv[PV_HC_AV]+index_pv[PV_HC_AV_ADD]+index_pv[PV_HC_AV_PAID_UP]+index_pv[PV_HC_AV_ADD_PAID_UP]+index_pv[PV_DEP_FEE_TOT]+index_pv[PV_DEP_FEE_SUM_TOT]+index_pv[PV_HC_PP_AV]+index_pv[PV_HC_PP_AV_ADD]+index_pv[PV_HC_PP_AV_PAID_UP]+index_pv[PV_HC_PP_ADD_AV_PAID_UP]);
								//pol_by_pol_file << (index_pv[PV_GMDB_TOT]+index_pv[PV_GMIB_TOT]+index_pv[PV_GMAB_TOT])/(index_pv[PV_HC_AV]+index_pv[PV_HC_AV_ADD]+index_pv[PV_HC_AV_PAID_UP]+index_pv[PV_HC_AV_ADD_PAID_UP]+index_pv[PV_DEP_FEE_TOT]+index_pv[PV_DEP_FEE_SUM_TOT]+index_pv[PV_HC_PP_AV]+index_pv[PV_HC_PP_AV_ADD]+index_pv[PV_HC_PP_AV_PAID_UP]+index_pv[PV_HC_PP_ADD_AV_PAID_UP]) << ",";
								agg_real_charges=(index_pv[PV_HC_AV]+index_pv[PV_HC_AV_ADD]+index_pv[PV_HC_AV_PAID_UP]+index_pv[PV_HC_AV_ADD_PAID_UP]);
								pv_ehc_av_charges=agg_real_charges*model_p->Gmxb_EHC_cost;
								agg_EHC_charges=pv_ehc_av_charges+index_pv[PV_DEP_FEE_TOT_CHI]+index_pv[PV_DEP_FEE_SUM_TOT_CHI]+index_pv[PV_HC_PP_AV_TOT_CHI];
								agg_claims=index_pv[PV_GMDB_TOT]+index_pv[PV_GMIB_TOT]+index_pv[PV_GMAB_TOT];
								pol_by_pol_file << setprecision(15) << agg_real_charges << ",";	
								pol_by_pol_file << setprecision(15) << agg_EHC_charges << ",";	
								pol_by_pol_file << setprecision(15) << agg_claims << ",";	
								pol_by_pol_file << setprecision(15) << pv_ehc_av_charges << ",";	
								pol_by_pol_file << setprecision(15) << index_pv[PV_DEP_FEE_TOT_CHI] << ",";	
								pol_by_pol_file << setprecision(15) << index_pv[PV_DEP_FEE_SUM_TOT_CHI] << ",";	
								pol_by_pol_file << setprecision(15) << index_pv[PV_HC_PP_AV_TOT_CHI] << ",";	

								pol_by_pol_file << setprecision(15) << index_pv[PV_GMAB_TOT]  << ",";
								pol_by_pol_file << setprecision(15) << index_pv[PV_GMDB_TOT]  << ",";
								pol_by_pol_file << setprecision(15) << index_pv[PV_GMIB_TOT]  << ",";
								pol_by_pol_file << setprecision(15) << index_pv[PV_GMIB_FONDS_DEU]  << ",";
								pol_by_pol_file << setprecision(15) << 0.  << ",";
								pol_by_pol_file << setprecision(15) << 0.  << ",";

								pol_by_pol_file << setprecision(15) << agg_claims- agg_EHC_charges << ",";
								pol_by_pol_file << setprecision(15) << index_pv[PV_ITM_DEU]  << ",";

								pol_by_pol_file << model_p->Age_at_valn << ",";
								pol_by_pol_file << model_p->Duration_valn<< ",";
								pol_by_pol_file << 0. << ",";
								pol_by_pol_file << model_p->Sex << ",";
								pol_by_pol_file << model_p->Prem_paid << ",";
								pol_by_pol_file << model_p->Target_av_split_valn_index0 << ",";
								pol_by_pol_file << model_p->Target_av_split_valn_index1 << ",";
								pol_by_pol_file << model_p->Target_av_split_valn_index2 << ",";
								pol_by_pol_file << model_p->Target_av_split_valn_index3 << ",";
								pol_by_pol_file << model_p->Target_av_split_valn_index4 << ",";
								pol_by_pol_file << model_p->Target_av_split_valn_index5 << ",";
								pol_by_pol_file << model_p->Target_av_split_valn_index6 << ",";
								pol_by_pol_file << model_p->Target_av_split_valn_index7 << ",";
								pol_by_pol_file << model_p->Target_av_split_valn_index8 << ",";
								pol_by_pol_file << model_p->Target_av_split_valn_index9 << ",";
								pol_by_pol_file << model_p->Target_av_split_valn_index10 << ",";
								pol_by_pol_file << model_p->Target_av_split_valn_index11 << ",";
								pol_by_pol_file << -1 << ",";
								pol_by_pol_file << -1 << ",";
								pol_by_pol_file << -1 << ",";
								pol_by_pol_file << -1 << ",";
								pol_by_pol_file << -1 << ",";
								pol_by_pol_file << -1 << ",";
								pol_by_pol_file << -1 << ",";
								pol_by_pol_file << -1 << ",";
								pol_by_pol_file << -1 << ",";
								pol_by_pol_file << -1 << ",";
								pol_by_pol_file << -1 << ",";
								pol_by_pol_file << -1 << ",";
								pol_by_pol_file << AV0 << ",";
								// TODO display the required fields
								pol_by_pol_file << endl;									


							}				
						}
					}
				}
				pol_by_pol_file.close();
			}
		}

		//Shock on lapses

		vector<Product_configuration> v_p_c = this->summary_configuration->get_product_configurations();
		if (v_p_c.size() > 0)
		{
			for(unsigned int pC = 0; pC < v_p_c.size(); pC++)
			{
				Product_configuration p = v_p_c[pC];
				vector<Scenario_configuration> v_scen_conf = p.get_scenario_list();
				for(unsigned int sc_n = 0; sc_n < v_scen_conf.size(); sc_n++)
				{
					Scenario_configuration s = v_scen_conf[sc_n];
					vector<GMXB_Assumption_Table *> v_lapse = s.get_lapse_mult();
					int scen_pass_n = s.get_scenario_pass_number();
					for (unsigned int l = 0 ; l < v_lapse.size(); l++)
						//if (v_lapse.size() > 0)
					{
						GMXB_Assumption_Table *tab = v_lapse[l];

						string sheet_name = tab->get_sheet_name();

						char pol_by_pol_file_name[MAX_LENGTH_FILE_NAME];

						sprintf(pol_by_pol_file_name, "%s%s_%d_%s.csv", this->summary_configuration->get_policy_by_policy_file_directory().c_str(), 
							this->summary_configuration->get_policy_by_policy_file_name().c_str(), scen_pass_n, tab->get_sheet_name().c_str());

						ofstream pol_by_pol_file(pol_by_pol_file_name);
						pol_by_pol_file  << "Version,Country,Product,Group,prod_type,POL_ID,HW_Mean_Reversion,HW_volatility,GMXB_G_C_Net,GMXB_G_C_Gross,GMXB_EHC,GMXB_CHI,agg_real_charges,agg_EHC_charges,agg_claims,pv_ehc_av_charges,agg_dep_fee,sum_of_premium,Paid_premium_Charges,PV_GMAB_Claims,PV_GMDB_Claims,PV_GMIB_Claims,PV_GMIB_Fond_Claims,PV_GMWB_Claims,";
						pol_by_pol_file  << "PV_GMSB_Claims,LOV,Policy_moneyness,AGE_VALN,DURATION,GMXB_TYPE2,AX_GENDER,PREM_PAID,SPLIT_IDX0,SPLIT_IDX1,SPLIT_IDX2,SPLIT_IDX3,SPLIT_IDX4,SPLIT_IDX5,SPLIT_IDX6,SPLIT_IDX7,SPLIT_IDX8,SPLIT_IDX9,SPLIT_IDX10,SPLIT_IDX11,";
						pol_by_pol_file << "GMAB1_VALN_SUMMARISE,GMAB2_VALN_SUMMARISE,GMDB1_VALN_SUMMARISE,GMDB2_VALN_SUMMARISE,GMWB1_VALN_SUMMARISE,GMWB2_VALN_SUMMARISE,GMWB_DEF_P_SUMMARISE,GMWB_RAT_P_SUMMARISE,GMXB_M_C_SUMMARISE,GMXB_A_C_SUMMARISE,AXA_ROLL_R_SUMMARISE,GMWB_WDL_RATE_SUMMARISE,AV0_SUMMARISE" << endl;


						for(map<string, vector<Model_Point*>>::const_iterator iter_mp = mps.begin();
							iter_mp != mps.end(); ++iter_mp)
						{
							string pCK = iter_mp->first;
							vector<Model_Point*> model_points = iter_mp->second;

							vector<vector<double>> pvs;

							for(map<string, map<int,map<string, vector<vector<double>>>>>::const_iterator iter_pvs = results_lapse.begin();
								iter_pvs != results_lapse.end(); ++iter_pvs)
							{
								string prod_code_k = iter_pvs->first;
								if (prod_code_k == pCK)
								{
									map<int,map<string, vector<vector<double>>>> map_scen_pass_num = iter_pvs->second;
									for(map<int,map<string, vector<vector<double>>>>::const_iterator iter_scen_pass_num = map_scen_pass_num.begin();
										iter_scen_pass_num != map_scen_pass_num.end(); ++iter_scen_pass_num)
									{
										if (iter_scen_pass_num->first == scen_pass_n)
										{
											map<string, vector<vector<double>>> map_lapses = iter_scen_pass_num->second;

											for (map<string, vector<vector<double>>>::const_iterator iter_lapse = map_lapses.begin();
												iter_lapse != map_lapses.end(); ++iter_lapse)
											{
												string s_name = iter_lapse->first;
												if (sheet_name == s_name)
												{
													pvs = iter_lapse->second;
												}
											}
										}
									}
								}
							}
							int number_of_mps = model_points.size();
							for(int i = 0; i < number_of_mps ; i++)
							{
								double agg_real_charges = 0.;
								double agg_EHC_charges=0.;
								double agg_claims = 0.;
								double pv_ehc_av_charges=0.;
								double agg_dep_fee = 0.;
								double sum_of_premium = 0.;
								double Paid_premium_Charges=0.;
								if( pCK == "DEU_IAB01" || pCK == "DEU_IAB02" || pCK == "DEU_IDB01" || pCK == "DEU_IDB02" )
								{
									Model_Point_DEU *model_p = dynamic_cast<Model_Point_DEU*>(model_points[i]);
									vector<double> index_pv = pvs[i];

									double AV0=0;
									for(int k=0;k<MAXIMUM_NUMBER_OF_INDEXES;k++)
									{
										AV0+=model_p->av_if_array[k];
									}

									pol_by_pol_file << "V1.0" << ",";
									string country_code = pCK.substr(0,pCK.find("_"));
									pol_by_pol_file << country_code.c_str() << ",";
									pol_by_pol_file << model_p->product.c_str() << ",";
									pol_by_pol_file << model_p->group.c_str() << ",";
									pol_by_pol_file << pCK.c_str() << ",";
									pol_by_pol_file << model_p->policy_id.c_str() << ",";
									pol_by_pol_file << "1" << ",";
									pol_by_pol_file << "1" << ",";
									pol_by_pol_file << model_p->gmxb_g_c / 100. << ",";
									pol_by_pol_file << model_p->gmxb_g_c_gross << ",";
									pol_by_pol_file << model_p->gmxb_ehc_charge / 100. << ",";
									pol_by_pol_file << 0. << ",";
									agg_real_charges=index_pv[PV_HC_AV_TOT];

									agg_dep_fee=index_pv[PV_DEP_FEE_TOT];
									sum_of_premium=index_pv[PV_DEP_FEE_SUM_TOT];
									Paid_premium_Charges=0.;
									pv_ehc_av_charges=index_pv[PV_EHC_CHARGES_DEU];
									agg_EHC_charges=pv_ehc_av_charges+Paid_premium_Charges+sum_of_premium+agg_dep_fee;
									agg_claims=index_pv[PV_GMDB_TOT]+index_pv[PV_GMIB_TOT]+index_pv[PV_GMAB_TOT];
									pol_by_pol_file << setprecision(15) << agg_real_charges << ",";	
									pol_by_pol_file << setprecision(15) << agg_EHC_charges << ",";	
									pol_by_pol_file << setprecision(15) << agg_claims << ",";	
									pol_by_pol_file << setprecision(15) << pv_ehc_av_charges << ",";	
									pol_by_pol_file << setprecision(15) << agg_dep_fee << ",";	
									pol_by_pol_file << setprecision(15) << sum_of_premium << ",";	
									pol_by_pol_file << setprecision(15) << Paid_premium_Charges << ",";	

									pol_by_pol_file << setprecision(15) << index_pv[PV_GMAB_TOT]  << ",";
									pol_by_pol_file << setprecision(15) << index_pv[PV_GMDB_TOT]  << ",";
									pol_by_pol_file << setprecision(15) << index_pv[PV_GMIB_TOT]  << ",";
									pol_by_pol_file << setprecision(15) << index_pv[PV_GMIB_FONDS_DEU]  << ",";
									pol_by_pol_file << setprecision(15) << 0.  << ",";
									pol_by_pol_file << setprecision(15) << 0.  << ",";

									pol_by_pol_file << setprecision(15) << index_pv[PV_LOV_DEU]   << ",";
									pol_by_pol_file << setprecision(15) << index_pv[PV_ITM_DEU]  << ",";

									pol_by_pol_file << model_p->age_at_valn << ",";
									pol_by_pol_file << model_p->duration_valn << ",";
									pol_by_pol_file << 0. << ",";
									pol_by_pol_file << model_p->sex << ",";
									pol_by_pol_file << model_p->prem_paid << ",";
									pol_by_pol_file << model_p->target_av_split_valn_index0 << ",";
									pol_by_pol_file << model_p->target_av_split_valn_index1 << ",";
									pol_by_pol_file << model_p->target_av_split_valn_index2 << ",";
									pol_by_pol_file << model_p->target_av_split_valn_index3 << ",";
									pol_by_pol_file << model_p->target_av_split_valn_index4 << ",";
									pol_by_pol_file << model_p->target_av_split_valn_index5 << ",";
									pol_by_pol_file << model_p->target_av_split_valn_index6 << ",";
									pol_by_pol_file << model_p->target_av_split_valn_index7 << ",";
									pol_by_pol_file << model_p->target_av_split_valn_index8 << ",";
									pol_by_pol_file << model_p->target_av_split_valn_index9 << ",";
									pol_by_pol_file << model_p->target_av_split_valn_index10 << ",";
									pol_by_pol_file << model_p->target_av_split_valn_index11 << ",";
									// TODO display the required fields
									pol_by_pol_file << -1 << ",";
									pol_by_pol_file << -1 << ",";
									pol_by_pol_file << -1 << ",";
									pol_by_pol_file << -1 << ",";
									pol_by_pol_file << -1 << ",";
									pol_by_pol_file << -1 << ",";
									pol_by_pol_file << -1 << ",";
									pol_by_pol_file << -1 << ",";
									pol_by_pol_file << -1 << ",";
									pol_by_pol_file << -1 << ",";
									pol_by_pol_file << -1 << ",";
									pol_by_pol_file << -1 << ",";
									pol_by_pol_file << AV0 << ",";
									pol_by_pol_file << endl;
								}
								else
								{
									Model_Point_DEU_IADB05 *model_p = dynamic_cast<Model_Point_DEU_IADB05*>(model_points[i]);

									vector<double> index_pv = pvs[i];
									double AV0=0;
									for(int k=0;k<MAXIMUM_NUMBER_OF_INDEXES;k++)
									{
										AV0+=model_p->av_if_array[k];
									}
									pol_by_pol_file << "V1.0" << ",";
									string country_code = pCK.substr(0,pCK.find("_"));
									pol_by_pol_file << country_code.c_str() << ",";
									pol_by_pol_file << model_p->product.c_str() << ",";
									pol_by_pol_file << model_p->Group.c_str() << ",";
									pol_by_pol_file << pCK.c_str() << ",";
									pol_by_pol_file << model_p->policy_id.c_str() << ",";
									pol_by_pol_file << "1" << ",";
									pol_by_pol_file << "1" << ",";
									pol_by_pol_file << model_p->Gmxb_guaranted_cost << ",";
									pol_by_pol_file << model_p->Hc_av_brutto << ",";
									pol_by_pol_file << 0. << ",";
									pol_by_pol_file << model_p->Gmxb_EHC_cost << ",";
									//double chi=(index_pv[PV_GMDB_TOT]+index_pv[PV_GMIB_TOT]+index_pv[PV_GMAB_TOT])/(index_pv[PV_HC_AV]+index_pv[PV_HC_AV_ADD]+index_pv[PV_HC_AV_PAID_UP]+index_pv[PV_HC_AV_ADD_PAID_UP]+index_pv[PV_DEP_FEE_TOT]+index_pv[PV_DEP_FEE_SUM_TOT]+index_pv[PV_HC_PP_AV]+index_pv[PV_HC_PP_AV_ADD]+index_pv[PV_HC_PP_AV_PAID_UP]+index_pv[PV_HC_PP_ADD_AV_PAID_UP]);
									//pol_by_pol_file << (index_pv[PV_GMDB_TOT]+index_pv[PV_GMIB_TOT]+index_pv[PV_GMAB_TOT])/(index_pv[PV_HC_AV]+index_pv[PV_HC_AV_ADD]+index_pv[PV_HC_AV_PAID_UP]+index_pv[PV_HC_AV_ADD_PAID_UP]+index_pv[PV_DEP_FEE_TOT]+index_pv[PV_DEP_FEE_SUM_TOT]+index_pv[PV_HC_PP_AV]+index_pv[PV_HC_PP_AV_ADD]+index_pv[PV_HC_PP_AV_PAID_UP]+index_pv[PV_HC_PP_ADD_AV_PAID_UP]) << ",";
									agg_real_charges=(index_pv[PV_HC_AV]+index_pv[PV_HC_AV_ADD]+index_pv[PV_HC_AV_PAID_UP]+index_pv[PV_HC_AV_ADD_PAID_UP]);
									pv_ehc_av_charges=agg_real_charges*model_p->Gmxb_EHC_cost;
									agg_EHC_charges=pv_ehc_av_charges+index_pv[PV_DEP_FEE_TOT_CHI]+index_pv[PV_DEP_FEE_SUM_TOT_CHI]+index_pv[PV_HC_PP_AV_TOT_CHI];
									agg_claims=index_pv[PV_GMDB_TOT]+index_pv[PV_GMIB_TOT]+index_pv[PV_GMAB_TOT];
									pol_by_pol_file << setprecision(15) << agg_real_charges << ",";	
									pol_by_pol_file << setprecision(15) << agg_EHC_charges << ",";	
									pol_by_pol_file << setprecision(15) << agg_claims << ",";	
									pol_by_pol_file << setprecision(15) << pv_ehc_av_charges << ",";	
									pol_by_pol_file << setprecision(15) << index_pv[PV_DEP_FEE_TOT_CHI] << ",";	
									pol_by_pol_file << setprecision(15) << index_pv[PV_DEP_FEE_SUM_TOT_CHI] << ",";	
									pol_by_pol_file << setprecision(15) << index_pv[PV_HC_PP_AV_TOT_CHI] << ",";	

									pol_by_pol_file << setprecision(15) << index_pv[PV_GMAB_TOT]  << ",";
									pol_by_pol_file << setprecision(15) << index_pv[PV_GMDB_TOT]  << ",";
									pol_by_pol_file << setprecision(15) << index_pv[PV_GMIB_TOT]  << ",";
									pol_by_pol_file << setprecision(15) << index_pv[PV_GMIB_FONDS_DEU]  << ",";
									pol_by_pol_file << setprecision(15) << 0.  << ",";
									pol_by_pol_file << setprecision(15) << 0.  << ",";

									pol_by_pol_file << setprecision(15) << agg_claims- agg_EHC_charges << ",";
									pol_by_pol_file << setprecision(15) << index_pv[PV_ITM_DEU]  << ",";

									pol_by_pol_file << model_p->Age_at_valn << ",";
									pol_by_pol_file << model_p->Duration_valn<< ",";
									pol_by_pol_file << 0. << ",";
									pol_by_pol_file << model_p->Sex << ",";
									pol_by_pol_file << model_p->Prem_paid << ",";
									pol_by_pol_file << model_p->Target_av_split_valn_index0 << ",";
									pol_by_pol_file << model_p->Target_av_split_valn_index1 << ",";
									pol_by_pol_file << model_p->Target_av_split_valn_index2 << ",";
									pol_by_pol_file << model_p->Target_av_split_valn_index3 << ",";
									pol_by_pol_file << model_p->Target_av_split_valn_index4 << ",";
									pol_by_pol_file << model_p->Target_av_split_valn_index5 << ",";
									pol_by_pol_file << model_p->Target_av_split_valn_index6 << ",";
									pol_by_pol_file << model_p->Target_av_split_valn_index7 << ",";
									pol_by_pol_file << model_p->Target_av_split_valn_index8 << ",";
									pol_by_pol_file << model_p->Target_av_split_valn_index9 << ",";
									pol_by_pol_file << model_p->Target_av_split_valn_index10 << ",";
									pol_by_pol_file << model_p->Target_av_split_valn_index11 << ",";
									pol_by_pol_file << -1 << ",";
									pol_by_pol_file << -1 << ",";
									pol_by_pol_file << -1 << ",";
									pol_by_pol_file << -1 << ",";
									pol_by_pol_file << -1 << ",";
									pol_by_pol_file << -1 << ",";
									pol_by_pol_file << -1 << ",";
									pol_by_pol_file << -1 << ",";
									pol_by_pol_file << -1 << ",";
									pol_by_pol_file << -1 << ",";
									pol_by_pol_file << -1 << ",";
									pol_by_pol_file << -1 << ",";
									pol_by_pol_file << AV0 << ",";
									// TODO display the required fields
									pol_by_pol_file << endl;										


								}				
							}
						}
						pol_by_pol_file.close();

					}
				}
			}
		}

		//Shock on paid up

		if (v_p_c.size() > 0)
		{
			for(unsigned int pC = 0; pC < v_p_c.size(); pC++)
			{
				Product_configuration p = v_p_c[pC];
				vector<Scenario_configuration> v_scen_conf = p.get_scenario_list();
				for(unsigned int sc_n = 0; sc_n < v_scen_conf.size(); sc_n++)
				{
					Scenario_configuration s = v_scen_conf[sc_n];
					vector<GMXB_Assumption_Table *> v_paidup = s.get_paidup_mult();
					int scen_pass_n = s.get_scenario_pass_number();
					for (unsigned int l = 0 ; l < v_paidup.size(); l++)

					{
						GMXB_Assumption_Table *tab = v_paidup[l];

						string sheet_name = tab->get_sheet_name();

						char pol_by_pol_file_name[MAX_LENGTH_FILE_NAME];

						sprintf(pol_by_pol_file_name, "%s%s_%d_%s.csv", this->summary_configuration->get_policy_by_policy_file_directory().c_str(), 
							this->summary_configuration->get_policy_by_policy_file_name().c_str(), scen_pass_n, tab->get_sheet_name().c_str());

						ofstream pol_by_pol_file(pol_by_pol_file_name);
						pol_by_pol_file  << "Version,Country,Product,Group,prod_type,POL_ID,HW_Mean_Reversion,HW_volatility,GMXB_G_C_Net,GMXB_G_C_Gross,GMXB_EHC,GMXB_CHI,agg_real_charges,agg_EHC_charges,agg_claims,pv_ehc_av_charges,agg_dep_fee,sum_of_premium,Paid_premium_Charges,PV_GMAB_Claims,PV_GMDB_Claims,PV_GMIB_Claims,PV_GMIB_Fond_Claims,PV_GMWB_Claims,";
						pol_by_pol_file  << "PV_GMSB_Claims,LOV,Policy_moneyness,AGE_VALN,DURATION,GMXB_TYPE2,AX_GENDER,PREM_PAID,SPLIT_IDX0,SPLIT_IDX1,SPLIT_IDX2,SPLIT_IDX3,SPLIT_IDX4,SPLIT_IDX5,SPLIT_IDX6,SPLIT_IDX7,SPLIT_IDX8,SPLIT_IDX9,SPLIT_IDX10,SPLIT_IDX11,";
						pol_by_pol_file << "GMAB1_VALN_SUMMARISE,GMAB2_VALN_SUMMARISE,GMDB1_VALN_SUMMARISE,GMDB2_VALN_SUMMARISE,GMWB1_VALN_SUMMARISE,GMWB2_VALN_SUMMARISE,GMWB_DEF_P_SUMMARISE,GMWB_RAT_P_SUMMARISE,GMXB_M_C_SUMMARISE,GMXB_A_C_SUMMARISE,AXA_ROLL_R_SUMMARISE,GMWB_WDL_RATE_SUMMARISE,AV0_SUMMARISE" << endl;

						for(map<string, vector<Model_Point*>>::const_iterator iter_mp = mps.begin();
							iter_mp != mps.end(); ++iter_mp)
						{
							string pCK = iter_mp->first;
							vector<Model_Point*> model_points = iter_mp->second;

							vector<vector<double>> pvs;

							for(map<string, map<int,map<string, vector<vector<double>>>>>::const_iterator iter_pvs = results_paidup.begin();
								iter_pvs != results_paidup.end(); ++iter_pvs)
							{
								string prod_code_k = iter_pvs->first;
								if (prod_code_k == pCK)
								{
									map<int,map<string, vector<vector<double>>>> map_scen_pass_num = iter_pvs->second;
									for(map<int,map<string, vector<vector<double>>>>::const_iterator iter_scen_pass_num = map_scen_pass_num.begin();
										iter_scen_pass_num != map_scen_pass_num.end(); ++iter_scen_pass_num)
									{
										if (iter_scen_pass_num->first == scen_pass_n)
										{
											map<string, vector<vector<double>>> map_paidup = iter_scen_pass_num->second;

											for (map<string, vector<vector<double>>>::const_iterator iter_paidup = map_paidup.begin();
												iter_paidup != map_paidup.end(); ++iter_paidup)
											{
												string s_name = iter_paidup->first;
												if (sheet_name == s_name)
												{
													pvs = iter_paidup->second;
												}
											}
										}
									}
								}
							}
							int number_of_mps = model_points.size();
							for(int i = 0; i < number_of_mps ; i++)
							{
								double agg_real_charges=0.;
								double agg_EHC_charges=0.;
								double agg_claims=0.;
								double pv_ehc_av_charges=0.;
								double agg_dep_fee=0.;
								double sum_of_premium=0.;
								double Paid_premium_Charges=0.;

								if( pCK == "DEU_IAB01" || pCK == "DEU_IAB02" || pCK == "DEU_IDB01" || pCK == "DEU_IDB02" )
								{
									Model_Point_DEU *model_p = dynamic_cast<Model_Point_DEU*>(model_points[i]);

									vector<double> index_pv = pvs[i];

									double AV0=0;
									for(int k=0;k<MAXIMUM_NUMBER_OF_INDEXES;k++)
									{
										AV0+=model_p->av_if_array[k];
									}

									pol_by_pol_file << "V1.0" << ",";
									string country_code = pCK.substr(0,pCK.find("_"));
									pol_by_pol_file << country_code.c_str() << ",";
									pol_by_pol_file << model_p->product.c_str() << ",";
									pol_by_pol_file << model_p->group.c_str() << ",";
									pol_by_pol_file << pCK.c_str() << ",";
									pol_by_pol_file << model_p->policy_id.c_str() << ",";
									pol_by_pol_file << "1" << ",";
									pol_by_pol_file << "1" << ",";
									pol_by_pol_file << model_p->gmxb_g_c / 100. << ",";
									pol_by_pol_file << model_p->gmxb_g_c_gross << ",";
									pol_by_pol_file << model_p->gmxb_ehc_charge /100. << ",";
									pol_by_pol_file << 0. << ",";
									agg_real_charges=index_pv[PV_HC_AV_TOT];
									agg_dep_fee=index_pv[PV_DEP_FEE_TOT];
									sum_of_premium=index_pv[PV_DEP_FEE_SUM_TOT];
									Paid_premium_Charges=0.;
									pv_ehc_av_charges=index_pv[PV_EHC_CHARGES_DEU];
									agg_EHC_charges=pv_ehc_av_charges+Paid_premium_Charges+sum_of_premium+agg_dep_fee;
									agg_claims=index_pv[PV_GMDB_TOT]+index_pv[PV_GMIB_TOT]+index_pv[PV_GMAB_TOT];
									pol_by_pol_file << setprecision(15) << agg_real_charges << ",";	
									pol_by_pol_file << setprecision(15) << agg_EHC_charges << ",";	
									pol_by_pol_file << setprecision(15) << agg_claims << ",";	
									pol_by_pol_file << setprecision(15) << pv_ehc_av_charges << ",";	
									pol_by_pol_file << setprecision(15) << agg_dep_fee << ",";	
									pol_by_pol_file << setprecision(15) << sum_of_premium << ",";	
									pol_by_pol_file << setprecision(15) << Paid_premium_Charges << ",";	

									pol_by_pol_file << setprecision(15) << index_pv[PV_GMAB_TOT]  << ",";
									pol_by_pol_file << setprecision(15) << index_pv[PV_GMDB_TOT]  << ",";
									pol_by_pol_file << setprecision(15) << index_pv[PV_GMIB_TOT]  << ",";
									pol_by_pol_file << setprecision(15) << index_pv[PV_GMIB_FONDS_DEU]  << ",";
									pol_by_pol_file << setprecision(15) << 0.  << ",";
									pol_by_pol_file << setprecision(15) << 0.  << ",";

									pol_by_pol_file << setprecision(15) << index_pv[PV_LOV_DEU]   << ",";
									pol_by_pol_file << setprecision(15) << index_pv[PV_ITM_DEU]  << ",";

									pol_by_pol_file << model_p->age_at_valn << ",";
									pol_by_pol_file << model_p->duration_valn << ",";
									pol_by_pol_file << 0. << ",";
									pol_by_pol_file << model_p->sex << ",";
									pol_by_pol_file << model_p->prem_paid << ",";
									pol_by_pol_file << model_p->target_av_split_valn_index0 << ",";
									pol_by_pol_file << model_p->target_av_split_valn_index1 << ",";
									pol_by_pol_file << model_p->target_av_split_valn_index2 << ",";
									pol_by_pol_file << model_p->target_av_split_valn_index3 << ",";
									pol_by_pol_file << model_p->target_av_split_valn_index4 << ",";
									pol_by_pol_file << model_p->target_av_split_valn_index5 << ",";
									pol_by_pol_file << model_p->target_av_split_valn_index6 << ",";
									pol_by_pol_file << model_p->target_av_split_valn_index7 << ",";
									pol_by_pol_file << model_p->target_av_split_valn_index8 << ",";
									pol_by_pol_file << model_p->target_av_split_valn_index9 << ",";
									pol_by_pol_file << model_p->target_av_split_valn_index10 << ",";
									pol_by_pol_file << model_p->target_av_split_valn_index11 << ",";
									pol_by_pol_file << -1 << ",";
									pol_by_pol_file << -1 << ",";
									pol_by_pol_file << -1 << ",";
									pol_by_pol_file << -1 << ",";
									pol_by_pol_file << -1 << ",";
									pol_by_pol_file << -1 << ",";
									pol_by_pol_file << -1 << ",";
									pol_by_pol_file << -1 << ",";
									pol_by_pol_file << -1 << ",";
									pol_by_pol_file << -1 << ",";
									pol_by_pol_file << -1 << ",";
									pol_by_pol_file << -1 << ",";
									pol_by_pol_file << AV0 << ",";
									// TODO display the required fields
									pol_by_pol_file << endl;


								}
								else
								{
									Model_Point_DEU_IADB05 *model_p = dynamic_cast<Model_Point_DEU_IADB05*>(model_points[i]);

									vector<double> index_pv = pvs[i];
									double AV0=0;
									for(int k=0;k<MAXIMUM_NUMBER_OF_INDEXES;k++)
									{
										AV0+=model_p->av_if_array[k];
									}
									pol_by_pol_file << "V1.0" << ",";
									string country_code = pCK.substr(0,pCK.find("_"));
									pol_by_pol_file << country_code.c_str() << ",";
									pol_by_pol_file << model_p->product.c_str() << ",";
									pol_by_pol_file << model_p->Group.c_str() << ",";
									pol_by_pol_file << pCK.c_str() << ",";
									pol_by_pol_file << model_p->policy_id.c_str() << ",";
									pol_by_pol_file << "1" << ",";
									pol_by_pol_file << "1" << ",";
									pol_by_pol_file << model_p->Gmxb_guaranted_cost << ",";
									pol_by_pol_file << model_p->Hc_av_brutto << ",";
									pol_by_pol_file << 0. << ",";
									pol_by_pol_file << model_p->Gmxb_EHC_cost << ",";
									//double chi=(index_pv[PV_GMDB_TOT]+index_pv[PV_GMIB_TOT]+index_pv[PV_GMAB_TOT])/(index_pv[PV_HC_AV]+index_pv[PV_HC_AV_ADD]+index_pv[PV_HC_AV_PAID_UP]+index_pv[PV_HC_AV_ADD_PAID_UP]+index_pv[PV_DEP_FEE_TOT]+index_pv[PV_DEP_FEE_SUM_TOT]+index_pv[PV_HC_PP_AV]+index_pv[PV_HC_PP_AV_ADD]+index_pv[PV_HC_PP_AV_PAID_UP]+index_pv[PV_HC_PP_ADD_AV_PAID_UP]);
									//pol_by_pol_file << (index_pv[PV_GMDB_TOT]+index_pv[PV_GMIB_TOT]+index_pv[PV_GMAB_TOT])/(index_pv[PV_HC_AV]+index_pv[PV_HC_AV_ADD]+index_pv[PV_HC_AV_PAID_UP]+index_pv[PV_HC_AV_ADD_PAID_UP]+index_pv[PV_DEP_FEE_TOT]+index_pv[PV_DEP_FEE_SUM_TOT]+index_pv[PV_HC_PP_AV]+index_pv[PV_HC_PP_AV_ADD]+index_pv[PV_HC_PP_AV_PAID_UP]+index_pv[PV_HC_PP_ADD_AV_PAID_UP]) << ",";
									agg_real_charges=(index_pv[PV_HC_AV]+index_pv[PV_HC_AV_ADD]+index_pv[PV_HC_AV_PAID_UP]+index_pv[PV_HC_AV_ADD_PAID_UP]);
									pv_ehc_av_charges=agg_real_charges*model_p->Gmxb_EHC_cost;
									agg_EHC_charges=pv_ehc_av_charges+index_pv[PV_DEP_FEE_TOT_CHI]+index_pv[PV_DEP_FEE_SUM_TOT_CHI]+index_pv[PV_HC_PP_AV_TOT_CHI];
									agg_claims=index_pv[PV_GMDB_TOT]+index_pv[PV_GMIB_TOT]+index_pv[PV_GMAB_TOT];
									pol_by_pol_file << setprecision(15) << agg_real_charges << ",";	
									pol_by_pol_file << setprecision(15) << agg_EHC_charges << ",";	
									pol_by_pol_file << setprecision(15) << agg_claims << ",";	
									pol_by_pol_file << setprecision(15) << pv_ehc_av_charges << ",";	
									pol_by_pol_file << setprecision(15) << index_pv[PV_DEP_FEE_TOT_CHI] << ",";	
									pol_by_pol_file << setprecision(15) << index_pv[PV_DEP_FEE_SUM_TOT_CHI] << ",";	
									pol_by_pol_file << setprecision(15) << index_pv[PV_HC_PP_AV_TOT_CHI] << ",";	

									pol_by_pol_file << setprecision(15) << index_pv[PV_GMAB_TOT]  << ",";
									pol_by_pol_file << setprecision(15) << index_pv[PV_GMDB_TOT]  << ",";
									pol_by_pol_file << setprecision(15) << index_pv[PV_GMIB_TOT]  << ",";
									pol_by_pol_file << setprecision(15) << index_pv[PV_GMIB_FONDS_DEU]  << ",";
									pol_by_pol_file << setprecision(15) << 0.  << ",";
									pol_by_pol_file << setprecision(15) << 0.  << ",";

									pol_by_pol_file << setprecision(15) << agg_claims- agg_EHC_charges << ",";
									pol_by_pol_file << setprecision(15) << index_pv[PV_ITM_DEU]  << ",";

									pol_by_pol_file << model_p->Age_at_valn << ",";
									pol_by_pol_file << model_p->Duration_valn<< ",";
									pol_by_pol_file << 0. << ",";
									pol_by_pol_file << model_p->Sex << ",";
									pol_by_pol_file << model_p->Prem_paid << ",";
									pol_by_pol_file << model_p->Target_av_split_valn_index0 << ",";
									pol_by_pol_file << model_p->Target_av_split_valn_index1 << ",";
									pol_by_pol_file << model_p->Target_av_split_valn_index2 << ",";
									pol_by_pol_file << model_p->Target_av_split_valn_index3 << ",";
									pol_by_pol_file << model_p->Target_av_split_valn_index4 << ",";
									pol_by_pol_file << model_p->Target_av_split_valn_index5 << ",";
									pol_by_pol_file << model_p->Target_av_split_valn_index6 << ",";
									pol_by_pol_file << model_p->Target_av_split_valn_index7 << ",";
									pol_by_pol_file << model_p->Target_av_split_valn_index8 << ",";
									pol_by_pol_file << model_p->Target_av_split_valn_index9 << ",";
									pol_by_pol_file << model_p->Target_av_split_valn_index10 << ",";
									pol_by_pol_file << model_p->Target_av_split_valn_index11 << ",";
									pol_by_pol_file << -1 << ",";
									pol_by_pol_file << -1 << ",";
									pol_by_pol_file << -1 << ",";
									pol_by_pol_file << -1 << ",";
									pol_by_pol_file << -1 << ",";
									pol_by_pol_file << -1 << ",";
									pol_by_pol_file << -1 << ",";
									pol_by_pol_file << -1 << ",";
									pol_by_pol_file << -1 << ",";
									pol_by_pol_file << -1 << ",";
									pol_by_pol_file << -1 << ",";
									pol_by_pol_file << -1 << ",";
									pol_by_pol_file << AV0 << ",";
									// TODO display the required fields
									pol_by_pol_file << endl;										


								}				
							}
						}
						pol_by_pol_file.close();

					}
				}
			}
		}
		//Shock on election 

		if (v_p_c.size() > 0)
		{
			for(unsigned int pC = 0; pC < v_p_c.size(); pC++)
			{
				Product_configuration p = v_p_c[pC];
				vector<Scenario_configuration> v_scen_conf = p.get_scenario_list();
				for(unsigned int sc_n = 0; sc_n < v_scen_conf.size(); sc_n++)
				{
					Scenario_configuration s = v_scen_conf[sc_n];
					vector<GMXB_Assumption_Table *> v_election = s.get_election_mult();
					int scen_pass_n = s.get_scenario_pass_number();
					for (unsigned int l = 0 ; l < v_election.size(); l++)

					{
						GMXB_Assumption_Table *tab = v_election[l];

						string sheet_name = tab->get_sheet_name();

						char pol_by_pol_file_name[MAX_LENGTH_FILE_NAME];

						sprintf(pol_by_pol_file_name, "%s%s_%d_%s.csv", this->summary_configuration->get_policy_by_policy_file_directory().c_str(), 
							this->summary_configuration->get_policy_by_policy_file_name().c_str(), scen_pass_n, tab->get_sheet_name().c_str());

						ofstream pol_by_pol_file(pol_by_pol_file_name);
						pol_by_pol_file  << "Version,Country,Product,Group,prod_type,POL_ID,HW_Mean_Reversion,HW_volatility,GMXB_G_C_Net,GMXB_G_C_Gross,GMXB_EHC,GMXB_CHI,agg_real_charges,agg_EHC_charges,agg_claims,pv_ehc_av_charges,agg_dep_fee,sum_of_premium,Paid_premium_Charges,PV_GMAB_Claims,PV_GMDB_Claims,PV_GMIB_Claims,PV_GMIB_Fond_Claims,PV_GMWB_Claims,";
						pol_by_pol_file  << "PV_GMSB_Claims,LOV,Policy_moneyness,AGE_VALN,DURATION,GMXB_TYPE2,AX_GENDER,PREM_PAID,SPLIT_IDX0,SPLIT_IDX1,SPLIT_IDX2,SPLIT_IDX3,SPLIT_IDX4,SPLIT_IDX5,SPLIT_IDX6,SPLIT_IDX7,SPLIT_IDX8,SPLIT_IDX9,SPLIT_IDX10,SPLIT_IDX11,";
						pol_by_pol_file << "GMAB1_VALN_SUMMARISE,GMAB2_VALN_SUMMARISE,GMDB1_VALN_SUMMARISE,GMDB2_VALN_SUMMARISE,GMWB1_VALN_SUMMARISE,GMWB2_VALN_SUMMARISE,GMWB_DEF_P_SUMMARISE,GMWB_RAT_P_SUMMARISE,GMXB_M_C_SUMMARISE,GMXB_A_C_SUMMARISE,AXA_ROLL_R_SUMMARISE,GMWB_WDL_RATE_SUMMARISE,AV0_SUMMARISE" << endl;

						for(map<string, vector<Model_Point*>>::const_iterator iter_mp = mps.begin();
							iter_mp != mps.end(); ++iter_mp)
						{
							string pCK = iter_mp->first;
							vector<Model_Point*> model_points = iter_mp->second;

							vector<vector<double>> pvs;

							for(map<string, map<int,map<string, vector<vector<double>>>>>::const_iterator iter_pvs = results_election.begin();
								iter_pvs != results_election.end(); ++iter_pvs)
							{
								string prod_code_k = iter_pvs->first;
								if (prod_code_k == pCK)
								{
									map<int,map<string, vector<vector<double>>>> map_scen_pass_num = iter_pvs->second;
									for(map<int,map<string, vector<vector<double>>>>::const_iterator iter_scen_pass_num = map_scen_pass_num.begin();
										iter_scen_pass_num != map_scen_pass_num.end(); ++iter_scen_pass_num)
									{
										if (iter_scen_pass_num->first == scen_pass_n)
										{
											map<string, vector<vector<double>>> map_election = iter_scen_pass_num->second;

											for (map<string, vector<vector<double>>>::const_iterator iter_election = map_election.begin();
												iter_election != map_election.end(); ++iter_election)
											{
												string s_name = iter_election->first;
												if (sheet_name == s_name)
												{
													pvs = iter_election->second;
												}
											}
										}
									}
								}
							}
							int number_of_mps = model_points.size();
							for(int i = 0; i < number_of_mps ; i++)
							{
								double agg_real_charges=0.;
								double agg_EHC_charges=0.;
								double agg_claims=0.;
								double pv_ehc_av_charges=0.;
								double agg_dep_fee=0.;
								double sum_of_premium=0.;
								double Paid_premium_Charges=0.;

								if( pCK == "DEU_IAB01" || pCK == "DEU_IAB02" || pCK == "DEU_IDB01" || pCK == "DEU_IDB02" )
								{
									Model_Point_DEU *model_p = dynamic_cast<Model_Point_DEU*>(model_points[i]);

									vector<double> index_pv = pvs[i];

									double AV0=0;
									for(int k=0;k<MAXIMUM_NUMBER_OF_INDEXES;k++)
									{
										AV0+=model_p->av_if_array[k];
									}
									pol_by_pol_file << "V1.0" << ",";
									string country_code = pCK.substr(0,pCK.find("_"));
									pol_by_pol_file << country_code.c_str() << ",";
									pol_by_pol_file << model_p->product.c_str() << ",";
									pol_by_pol_file << model_p->group.c_str() << ",";
									pol_by_pol_file << pCK.c_str() << ",";
									pol_by_pol_file << model_p->policy_id.c_str() << ",";
									pol_by_pol_file << "1" << ",";
									pol_by_pol_file << "1" << ",";
									pol_by_pol_file << model_p->gmxb_g_c / 100. << ",";
									pol_by_pol_file << model_p->gmxb_g_c_gross << ",";
									pol_by_pol_file << model_p->gmxb_ehc_charge /100. << ",";
									pol_by_pol_file << 0. << ",";
									agg_real_charges=index_pv[PV_HC_AV_TOT];
									agg_dep_fee=index_pv[PV_DEP_FEE_TOT];
									sum_of_premium=index_pv[PV_DEP_FEE_SUM_TOT];
									Paid_premium_Charges=0.;
									pv_ehc_av_charges=index_pv[PV_EHC_CHARGES_DEU];
									agg_EHC_charges=pv_ehc_av_charges+Paid_premium_Charges+sum_of_premium+agg_dep_fee;
									agg_claims=index_pv[PV_GMDB_TOT]+index_pv[PV_GMIB_TOT]+index_pv[PV_GMAB_TOT];
									pol_by_pol_file << setprecision(15) << agg_real_charges << ",";	
									pol_by_pol_file << setprecision(15) << agg_EHC_charges << ",";	
									pol_by_pol_file << setprecision(15) << agg_claims << ",";	
									pol_by_pol_file << setprecision(15) << pv_ehc_av_charges << ",";	
									pol_by_pol_file << setprecision(15) << agg_dep_fee << ",";	
									pol_by_pol_file << setprecision(15) << sum_of_premium << ",";	
									pol_by_pol_file << setprecision(15) << Paid_premium_Charges << ",";	

									pol_by_pol_file << setprecision(15) << index_pv[PV_GMAB_TOT]  << ",";
									pol_by_pol_file << setprecision(15) << index_pv[PV_GMDB_TOT]  << ",";
									pol_by_pol_file << setprecision(15) << index_pv[PV_GMIB_TOT]  << ",";
									pol_by_pol_file << setprecision(15) << index_pv[PV_GMIB_FONDS_DEU]  << ",";
									pol_by_pol_file << setprecision(15) << 0.  << ",";
									pol_by_pol_file << setprecision(15) << 0.  << ",";

									pol_by_pol_file << setprecision(15) << index_pv[PV_LOV_DEU]   << ",";
									pol_by_pol_file << setprecision(15) << index_pv[PV_ITM_DEU]  << ",";

									pol_by_pol_file << model_p->age_at_valn << ",";
									pol_by_pol_file << model_p->duration_valn << ",";
									pol_by_pol_file << 0. << ",";
									pol_by_pol_file << model_p->sex << ",";
									pol_by_pol_file << model_p->prem_paid << ",";
									pol_by_pol_file << model_p->target_av_split_valn_index0 << ",";
									pol_by_pol_file << model_p->target_av_split_valn_index1 << ",";
									pol_by_pol_file << model_p->target_av_split_valn_index2 << ",";
									pol_by_pol_file << model_p->target_av_split_valn_index3 << ",";
									pol_by_pol_file << model_p->target_av_split_valn_index4 << ",";
									pol_by_pol_file << model_p->target_av_split_valn_index5 << ",";
									pol_by_pol_file << model_p->target_av_split_valn_index6 << ",";
									pol_by_pol_file << model_p->target_av_split_valn_index7 << ",";
									pol_by_pol_file << model_p->target_av_split_valn_index8 << ",";
									pol_by_pol_file << model_p->target_av_split_valn_index9 << ",";
									pol_by_pol_file << model_p->target_av_split_valn_index10 << ",";
									pol_by_pol_file << model_p->target_av_split_valn_index11 << ",";
									pol_by_pol_file << -1 << ",";
									pol_by_pol_file << -1 << ",";
									pol_by_pol_file << -1 << ",";
									pol_by_pol_file << -1 << ",";
									pol_by_pol_file << -1 << ",";
									pol_by_pol_file << -1 << ",";
									pol_by_pol_file << -1 << ",";
									pol_by_pol_file << -1 << ",";
									pol_by_pol_file << -1 << ",";
									pol_by_pol_file << -1 << ",";
									pol_by_pol_file << -1 << ",";
									pol_by_pol_file << -1 << ",";
									pol_by_pol_file << AV0 << ",";
									// TODO display the required fields
									pol_by_pol_file << endl;


								}
								else
								{
									Model_Point_DEU_IADB05 *model_p = dynamic_cast<Model_Point_DEU_IADB05*>(model_points[i]);

									vector<double> index_pv = pvs[i];
									double AV0=0;
									for(int k=0;k<MAXIMUM_NUMBER_OF_INDEXES;k++)
									{
										AV0+=model_p->av_if_array[k];
									}
									pol_by_pol_file << "V1.0" << ",";
									string country_code = pCK.substr(0,pCK.find("_"));
									pol_by_pol_file << country_code.c_str() << ",";
									pol_by_pol_file << model_p->product.c_str() << ",";
									pol_by_pol_file << model_p->Group.c_str() << ",";
									pol_by_pol_file << pCK.c_str() << ",";
									pol_by_pol_file << model_p->policy_id.c_str() << ",";
									pol_by_pol_file << "1" << ",";
									pol_by_pol_file << "1" << ",";
									pol_by_pol_file << model_p->Gmxb_guaranted_cost << ",";
									pol_by_pol_file << model_p->Hc_av_brutto << ",";
									pol_by_pol_file << 0. << ",";
									pol_by_pol_file << model_p->Gmxb_EHC_cost << ",";
									//double chi=(index_pv[PV_GMDB_TOT]+index_pv[PV_GMIB_TOT]+index_pv[PV_GMAB_TOT])/(index_pv[PV_HC_AV]+index_pv[PV_HC_AV_ADD]+index_pv[PV_HC_AV_PAID_UP]+index_pv[PV_HC_AV_ADD_PAID_UP]+index_pv[PV_DEP_FEE_TOT]+index_pv[PV_DEP_FEE_SUM_TOT]+index_pv[PV_HC_PP_AV]+index_pv[PV_HC_PP_AV_ADD]+index_pv[PV_HC_PP_AV_PAID_UP]+index_pv[PV_HC_PP_ADD_AV_PAID_UP]);
									//pol_by_pol_file << (index_pv[PV_GMDB_TOT]+index_pv[PV_GMIB_TOT]+index_pv[PV_GMAB_TOT])/(index_pv[PV_HC_AV]+index_pv[PV_HC_AV_ADD]+index_pv[PV_HC_AV_PAID_UP]+index_pv[PV_HC_AV_ADD_PAID_UP]+index_pv[PV_DEP_FEE_TOT]+index_pv[PV_DEP_FEE_SUM_TOT]+index_pv[PV_HC_PP_AV]+index_pv[PV_HC_PP_AV_ADD]+index_pv[PV_HC_PP_AV_PAID_UP]+index_pv[PV_HC_PP_ADD_AV_PAID_UP]) << ",";
									agg_real_charges=(index_pv[PV_HC_AV]+index_pv[PV_HC_AV_ADD]+index_pv[PV_HC_AV_PAID_UP]+index_pv[PV_HC_AV_ADD_PAID_UP]);
									pv_ehc_av_charges=agg_real_charges*model_p->Gmxb_EHC_cost;
									agg_EHC_charges=pv_ehc_av_charges+index_pv[PV_DEP_FEE_TOT_CHI]+index_pv[PV_DEP_FEE_SUM_TOT_CHI]+index_pv[PV_HC_PP_AV_TOT_CHI];
									agg_claims=index_pv[PV_GMDB_TOT]+index_pv[PV_GMIB_TOT]+index_pv[PV_GMAB_TOT];
									pol_by_pol_file << setprecision(15) << agg_real_charges << ",";	
									pol_by_pol_file << setprecision(15) << agg_EHC_charges << ",";	
									pol_by_pol_file << setprecision(15) << agg_claims << ",";	
									pol_by_pol_file << setprecision(15) << pv_ehc_av_charges << ",";	
									pol_by_pol_file << setprecision(15) << index_pv[PV_DEP_FEE_TOT_CHI] << ",";	
									pol_by_pol_file << setprecision(15) << index_pv[PV_DEP_FEE_SUM_TOT_CHI] << ",";	
									pol_by_pol_file << setprecision(15) << index_pv[PV_HC_PP_AV_TOT_CHI] << ",";	

									pol_by_pol_file << setprecision(15) << index_pv[PV_GMAB_TOT]  << ",";
									pol_by_pol_file << setprecision(15) << index_pv[PV_GMDB_TOT]  << ",";
									pol_by_pol_file << setprecision(15) << index_pv[PV_GMIB_TOT]  << ",";
									pol_by_pol_file << setprecision(15) << index_pv[PV_GMIB_FONDS_DEU]  << ",";
									pol_by_pol_file << setprecision(15) << 0.  << ",";
									pol_by_pol_file << setprecision(15) << 0.  << ",";

									pol_by_pol_file << setprecision(15) << agg_claims- agg_EHC_charges << ",";
									pol_by_pol_file << setprecision(15) << index_pv[PV_ITM_DEU]  << ",";

									pol_by_pol_file << model_p->Age_at_valn << ",";
									pol_by_pol_file << model_p->Duration_valn<< ",";
									pol_by_pol_file << 0. << ",";
									pol_by_pol_file << model_p->Sex << ",";
									pol_by_pol_file << model_p->Prem_paid << ",";
									pol_by_pol_file << model_p->Target_av_split_valn_index0 << ",";
									pol_by_pol_file << model_p->Target_av_split_valn_index1 << ",";
									pol_by_pol_file << model_p->Target_av_split_valn_index2 << ",";
									pol_by_pol_file << model_p->Target_av_split_valn_index3 << ",";
									pol_by_pol_file << model_p->Target_av_split_valn_index4 << ",";
									pol_by_pol_file << model_p->Target_av_split_valn_index5 << ",";
									pol_by_pol_file << model_p->Target_av_split_valn_index6 << ",";
									pol_by_pol_file << model_p->Target_av_split_valn_index7 << ",";
									pol_by_pol_file << model_p->Target_av_split_valn_index8 << ",";
									pol_by_pol_file << model_p->Target_av_split_valn_index9 << ",";
									pol_by_pol_file << model_p->Target_av_split_valn_index10 << ",";
									pol_by_pol_file << model_p->Target_av_split_valn_index11 << ",";
									pol_by_pol_file << -1 << ",";
									pol_by_pol_file << -1 << ",";
									pol_by_pol_file << -1 << ",";
									pol_by_pol_file << -1 << ",";
									pol_by_pol_file << -1 << ",";
									pol_by_pol_file << -1 << ",";
									pol_by_pol_file << -1 << ",";
									pol_by_pol_file << -1 << ",";
									pol_by_pol_file << -1 << ",";
									pol_by_pol_file << -1 << ",";
									pol_by_pol_file << -1 << ",";
									pol_by_pol_file << -1 << ",";
									pol_by_pol_file << AV0 << ",";
									// TODO display the required fields
									pol_by_pol_file << endl;									


								}				

							}
						}
						pol_by_pol_file.close();

					}
				}
			}
		}

		//Mortality

		if (v_p_c.size() > 0)
		{
			for(unsigned int pC = 0; pC < v_p_c.size(); pC++)
			{
				Product_configuration p = v_p_c[pC];
				vector<Scenario_configuration> v_scen_conf = p.get_scenario_list();
				for(unsigned int sc_n = 0; sc_n < v_scen_conf.size(); sc_n++)
				{
					Scenario_configuration s = v_scen_conf[sc_n];
					//vector<GMXB_Assumption_Table *> v_mortality = s.get_mortality_mult();
					this->v_mortality = s.get_mortality_mult();
					int scen_pass_n = s.get_scenario_pass_number();
					for (unsigned int l = 0 ; l < this->v_mortality.size(); l++)
						//if (v_lapse.size() > 0)
					{
						GMXB_Assumption_Table *tab = this->v_mortality[l];

						string sheet_name = tab->get_sheet_name();

						char pol_by_pol_file_name[MAX_LENGTH_FILE_NAME];

						sprintf(pol_by_pol_file_name, "%s%s_%d_%s.csv", this->summary_configuration->get_policy_by_policy_file_directory().c_str(), 
							this->summary_configuration->get_policy_by_policy_file_name().c_str(), scen_pass_n, tab->get_sheet_name().c_str());

						ofstream pol_by_pol_file(pol_by_pol_file_name);
						pol_by_pol_file  << "Version,Country,Product,Group,prod_type,POL_ID,HW_Mean_Reversion,HW_volatility,GMXB_G_C_Net,GMXB_G_C_Gross,GMXB_EHC,GMXB_CHI,agg_real_charges,agg_EHC_charges,agg_claims,pv_ehc_av_charges,agg_dep_fee,sum_of_premium,Paid_premium_Charges,PV_GMAB_Claims,PV_GMDB_Claims,PV_GMIB_Claims,PV_GMIB_Fond_Claims,PV_GMWB_Claims,";
						pol_by_pol_file  << "PV_GMSB_Claims,LOV,Policy_moneyness,AGE_VALN,DURATION,GMXB_TYPE2,AX_GENDER,PREM_PAID,SPLIT_IDX0,SPLIT_IDX1,SPLIT_IDX2,SPLIT_IDX3,SPLIT_IDX4,SPLIT_IDX5,SPLIT_IDX6,SPLIT_IDX7,SPLIT_IDX8,SPLIT_IDX9,SPLIT_IDX10,SPLIT_IDX11,";
						pol_by_pol_file << "GMAB1_VALN_SUMMARISE,GMAB2_VALN_SUMMARISE,GMDB1_VALN_SUMMARISE,GMDB2_VALN_SUMMARISE,GMWB1_VALN_SUMMARISE,GMWB2_VALN_SUMMARISE,GMWB_DEF_P_SUMMARISE,GMWB_RAT_P_SUMMARISE,GMXB_M_C_SUMMARISE,GMXB_A_C_SUMMARISE,AXA_ROLL_R_SUMMARISE,GMWB_WDL_RATE_SUMMARISE,AV0_SUMMARISE" << endl;

						for(map<string, vector<Model_Point*>>::const_iterator iter_mp = mps.begin();
							iter_mp != mps.end(); ++iter_mp)
						{
							string pCK = iter_mp->first;
							vector<Model_Point*> model_points = iter_mp->second;

							vector<vector<double>> pvs;

							for(map<string, map<int,map<string, vector<vector<double>>>>>::const_iterator iter_pvs = results_mort.begin();
								iter_pvs != results_mort.end(); ++iter_pvs)
							{
								string prod_code_k = iter_pvs->first;
								if (prod_code_k == pCK)
								{
									map<int,map<string, vector<vector<double>>>> map_scen_pass_num = iter_pvs->second;
									for(map<int,map<string, vector<vector<double>>>>::const_iterator iter_scen_pass_num = map_scen_pass_num.begin();
										iter_scen_pass_num != map_scen_pass_num.end(); ++iter_scen_pass_num)
									{
										if (iter_scen_pass_num->first == scen_pass_n)
										{
											map<string, vector<vector<double>>> map_mort = iter_scen_pass_num->second;

											for (map<string, vector<vector<double>>>::const_iterator iter_mort = map_mort.begin();
												iter_mort != map_mort.end(); ++iter_mort)
											{
												string s_name = iter_mort->first;
												if (sheet_name == s_name)
												{
													pvs = iter_mort->second;
												}
											}
										}
									}
								}
							}
							int number_of_mps = model_points.size();
							for(int i = 0; i < number_of_mps ; i++)
							{
								double agg_real_charges=0.;
								double agg_EHC_charges=0.;
								double agg_claims=0.;
								double pv_ehc_av_charges=0.;
								double agg_dep_fee=0.;
								double sum_of_premium=0.;
								double Paid_premium_Charges=0.;

								if( pCK == "DEU_IAB01" || pCK == "DEU_IAB02" || pCK == "DEU_IDB01" || pCK == "DEU_IDB02" )
								{
									Model_Point_DEU *model_p = dynamic_cast<Model_Point_DEU*>(model_points[i]);

									vector<double> index_pv = pvs[i];

									double AV0=0;
									for(int k=0;k<MAXIMUM_NUMBER_OF_INDEXES;k++)
									{
										AV0+=model_p->av_if_array[k];
									}

									pol_by_pol_file << "V1.0" << ",";
									string country_code = pCK.substr(0,pCK.find("_"));
									pol_by_pol_file << country_code.c_str() << ",";
									pol_by_pol_file << model_p->product.c_str() << ",";
									pol_by_pol_file << model_p->group.c_str() << ",";
									pol_by_pol_file << pCK.c_str() << ",";
									pol_by_pol_file << model_p->policy_id.c_str() << ",";
									pol_by_pol_file << "1" << ",";
									pol_by_pol_file << "1" << ",";
									pol_by_pol_file << model_p->gmxb_g_c / 100. << ",";
									pol_by_pol_file << model_p->gmxb_g_c_gross << ",";
									pol_by_pol_file << model_p->gmxb_ehc_charge / 100. << ",";
									pol_by_pol_file << 0. << ",";
									agg_real_charges=index_pv[PV_HC_AV_TOT];
									agg_dep_fee=index_pv[PV_DEP_FEE_TOT];
									sum_of_premium=index_pv[PV_DEP_FEE_SUM_TOT];
									Paid_premium_Charges=0.;
									pv_ehc_av_charges=index_pv[PV_EHC_CHARGES_DEU];
									agg_EHC_charges=pv_ehc_av_charges+Paid_premium_Charges+sum_of_premium+agg_dep_fee;
									agg_claims=index_pv[PV_GMDB_TOT]+index_pv[PV_GMIB_TOT]+index_pv[PV_GMAB_TOT];
									pol_by_pol_file << setprecision(15) << agg_real_charges << ",";	
									pol_by_pol_file << setprecision(15) << agg_EHC_charges << ",";	
									pol_by_pol_file << setprecision(15) << agg_claims << ",";	
									pol_by_pol_file << setprecision(15) << pv_ehc_av_charges << ",";	
									pol_by_pol_file << setprecision(15) << agg_dep_fee << ",";	
									pol_by_pol_file << setprecision(15) << sum_of_premium << ",";	
									pol_by_pol_file << setprecision(15) << Paid_premium_Charges << ",";	

									pol_by_pol_file << setprecision(15) << index_pv[PV_GMAB_TOT]  << ",";
									pol_by_pol_file << setprecision(15) << index_pv[PV_GMDB_TOT]  << ",";
									pol_by_pol_file << setprecision(15) << index_pv[PV_GMIB_TOT]  << ",";
									pol_by_pol_file << setprecision(15) << index_pv[PV_GMIB_FONDS_DEU]  << ",";
									pol_by_pol_file << setprecision(15) << 0.  << ",";
									pol_by_pol_file << setprecision(15) << 0.  << ",";

									pol_by_pol_file << setprecision(15) << index_pv[PV_LOV_DEU]   << ",";
									pol_by_pol_file << setprecision(15) << index_pv[PV_ITM_DEU]  << ",";

									pol_by_pol_file << model_p->age_at_valn << ",";
									pol_by_pol_file << model_p->duration_valn << ",";
									pol_by_pol_file << 0. << ",";
									pol_by_pol_file << model_p->sex << ",";
									pol_by_pol_file << model_p->prem_paid << ",";
									pol_by_pol_file << model_p->target_av_split_valn_index0 << ",";
									pol_by_pol_file << model_p->target_av_split_valn_index1 << ",";
									pol_by_pol_file << model_p->target_av_split_valn_index2 << ",";
									pol_by_pol_file << model_p->target_av_split_valn_index3 << ",";
									pol_by_pol_file << model_p->target_av_split_valn_index4 << ",";
									pol_by_pol_file << model_p->target_av_split_valn_index5 << ",";
									pol_by_pol_file << model_p->target_av_split_valn_index6 << ",";
									pol_by_pol_file << model_p->target_av_split_valn_index7 << ",";
									pol_by_pol_file << model_p->target_av_split_valn_index8 << ",";
									pol_by_pol_file << model_p->target_av_split_valn_index9 << ",";
									pol_by_pol_file << model_p->target_av_split_valn_index10 << ",";
									pol_by_pol_file << model_p->target_av_split_valn_index11 << ",";
									// TODO display the required fields
									pol_by_pol_file << -1 << ",";
									pol_by_pol_file << -1 << ",";
									pol_by_pol_file << -1 << ",";
									pol_by_pol_file << -1 << ",";
									pol_by_pol_file << -1 << ",";
									pol_by_pol_file << -1 << ",";
									pol_by_pol_file << -1 << ",";
									pol_by_pol_file << -1 << ",";
									pol_by_pol_file << -1 << ",";
									pol_by_pol_file << -1 << ",";
									pol_by_pol_file << -1 << ",";
									pol_by_pol_file << -1 << ",";
									pol_by_pol_file << AV0 << ",";
									pol_by_pol_file << endl;


								}
								else
								{
									Model_Point_DEU_IADB05 *model_p = dynamic_cast<Model_Point_DEU_IADB05*>(model_points[i]);

									vector<double> index_pv = pvs[i];
									double AV0=0;
									for(int k=0;k<MAXIMUM_NUMBER_OF_INDEXES;k++)
									{
										AV0+=model_p->av_if_array[k];
									}
									pol_by_pol_file << "V1.0" << ",";
									string country_code = pCK.substr(0,pCK.find("_"));
									pol_by_pol_file << country_code.c_str() << ",";
									pol_by_pol_file << model_p->product.c_str() << ",";
									pol_by_pol_file << model_p->Group.c_str() << ",";
									pol_by_pol_file << pCK.c_str() << ",";
									pol_by_pol_file << model_p->policy_id.c_str() << ",";
									pol_by_pol_file << "1" << ",";
									pol_by_pol_file << "1" << ",";
									pol_by_pol_file << model_p->Gmxb_guaranted_cost << ",";
									pol_by_pol_file << model_p->Hc_av_brutto << ",";
									pol_by_pol_file << 0. << ",";
									pol_by_pol_file << model_p->Gmxb_EHC_cost << ",";
									//double chi=(index_pv[PV_GMDB_TOT]+index_pv[PV_GMIB_TOT]+index_pv[PV_GMAB_TOT])/(index_pv[PV_HC_AV]+index_pv[PV_HC_AV_ADD]+index_pv[PV_HC_AV_PAID_UP]+index_pv[PV_HC_AV_ADD_PAID_UP]+index_pv[PV_DEP_FEE_TOT]+index_pv[PV_DEP_FEE_SUM_TOT]+index_pv[PV_HC_PP_AV]+index_pv[PV_HC_PP_AV_ADD]+index_pv[PV_HC_PP_AV_PAID_UP]+index_pv[PV_HC_PP_ADD_AV_PAID_UP]);
									//pol_by_pol_file << (index_pv[PV_GMDB_TOT]+index_pv[PV_GMIB_TOT]+index_pv[PV_GMAB_TOT])/(index_pv[PV_HC_AV]+index_pv[PV_HC_AV_ADD]+index_pv[PV_HC_AV_PAID_UP]+index_pv[PV_HC_AV_ADD_PAID_UP]+index_pv[PV_DEP_FEE_TOT]+index_pv[PV_DEP_FEE_SUM_TOT]+index_pv[PV_HC_PP_AV]+index_pv[PV_HC_PP_AV_ADD]+index_pv[PV_HC_PP_AV_PAID_UP]+index_pv[PV_HC_PP_ADD_AV_PAID_UP]) << ",";
									agg_real_charges=(index_pv[PV_HC_AV]+index_pv[PV_HC_AV_ADD]+index_pv[PV_HC_AV_PAID_UP]+index_pv[PV_HC_AV_ADD_PAID_UP]);
									pv_ehc_av_charges=agg_real_charges*model_p->Gmxb_EHC_cost;
									agg_EHC_charges=pv_ehc_av_charges+index_pv[PV_DEP_FEE_TOT_CHI]+index_pv[PV_DEP_FEE_SUM_TOT_CHI]+index_pv[PV_HC_PP_AV_TOT_CHI];
									agg_claims=index_pv[PV_GMDB_TOT]+index_pv[PV_GMIB_TOT]+index_pv[PV_GMAB_TOT];
									pol_by_pol_file << setprecision(15) << agg_real_charges << ",";	
									pol_by_pol_file << setprecision(15) << agg_EHC_charges << ",";	
									pol_by_pol_file << setprecision(15) << agg_claims << ",";	
									pol_by_pol_file << setprecision(15) << pv_ehc_av_charges << ",";	
									pol_by_pol_file << setprecision(15) << index_pv[PV_DEP_FEE_TOT_CHI] << ",";	
									pol_by_pol_file << setprecision(15) << index_pv[PV_DEP_FEE_SUM_TOT_CHI] << ",";	
									pol_by_pol_file << setprecision(15) << index_pv[PV_HC_PP_AV_TOT_CHI] << ",";	

									pol_by_pol_file << setprecision(15) << index_pv[PV_GMAB_TOT]  << ",";
									pol_by_pol_file << setprecision(15) << index_pv[PV_GMDB_TOT]  << ",";
									pol_by_pol_file << setprecision(15) << index_pv[PV_GMIB_TOT]  << ",";
									pol_by_pol_file << setprecision(15) << index_pv[PV_GMIB_FONDS_DEU]  << ",";
									pol_by_pol_file << setprecision(15) << 0.  << ",";
									pol_by_pol_file << setprecision(15) << 0.  << ",";

									pol_by_pol_file << setprecision(15) << agg_claims- agg_EHC_charges << ",";
									pol_by_pol_file << setprecision(15) << index_pv[PV_ITM_DEU]  << ",";

									pol_by_pol_file << model_p->Age_at_valn << ",";
									pol_by_pol_file << model_p->Duration_valn<< ",";
									pol_by_pol_file << 0. << ",";
									pol_by_pol_file << model_p->Sex << ",";
									pol_by_pol_file << model_p->Prem_paid << ",";
									pol_by_pol_file << model_p->Target_av_split_valn_index0 << ",";
									pol_by_pol_file << model_p->Target_av_split_valn_index1 << ",";
									pol_by_pol_file << model_p->Target_av_split_valn_index2 << ",";
									pol_by_pol_file << model_p->Target_av_split_valn_index3 << ",";
									pol_by_pol_file << model_p->Target_av_split_valn_index4 << ",";
									pol_by_pol_file << model_p->Target_av_split_valn_index5 << ",";
									pol_by_pol_file << model_p->Target_av_split_valn_index6 << ",";
									pol_by_pol_file << model_p->Target_av_split_valn_index7 << ",";
									pol_by_pol_file << model_p->Target_av_split_valn_index8 << ",";
									pol_by_pol_file << model_p->Target_av_split_valn_index9 << ",";
									pol_by_pol_file << model_p->Target_av_split_valn_index10 << ",";
									pol_by_pol_file << model_p->Target_av_split_valn_index11 << ",";
									pol_by_pol_file << -1 << ",";
									pol_by_pol_file << -1 << ",";
									pol_by_pol_file << -1 << ",";
									pol_by_pol_file << -1 << ",";
									pol_by_pol_file << -1 << ",";
									pol_by_pol_file << -1 << ",";
									pol_by_pol_file << -1 << ",";
									pol_by_pol_file << -1 << ",";
									pol_by_pol_file << -1 << ",";
									pol_by_pol_file << -1 << ",";
									pol_by_pol_file << -1 << ",";
									pol_by_pol_file << -1 << ",";
									pol_by_pol_file << AV0 << ",";
									// TODO display the required fields
									pol_by_pol_file << endl;										


								}				

							}
						}
						pol_by_pol_file.close();

					}
				}
			}
		}
		if (v_p_c.size() > 0)
		{
			for(unsigned int pC = 0; pC < v_p_c.size(); pC++)
			{
				Product_configuration p = v_p_c[pC];
				vector<Scenario_configuration> v_scen_conf = p.get_scenario_list();
				for(unsigned int sc_n = 0; sc_n < v_scen_conf.size(); sc_n++)
				{
					Scenario_configuration s = v_scen_conf[sc_n];

					if (s.get_load_longevity_table())
					{

						int scen_pass_n = s.get_scenario_pass_number();

						char pol_by_pol_file_name[MAX_LENGTH_FILE_NAME];

						sprintf(pol_by_pol_file_name, "%s%s_%d_longevity.csv", this->summary_configuration->get_policy_by_policy_file_directory().c_str(), 
							this->summary_configuration->get_policy_by_policy_file_name().c_str(), scen_pass_n);

						ofstream pol_by_pol_file(pol_by_pol_file_name);
						pol_by_pol_file  << "Version,Country,Product,Group,prod_type,POL_ID,HW_Mean_Reversion,HW_volatility,GMXB_G_C_Net,GMXB_G_C_Gross,GMXB_EHC,GMXB_CHI,agg_real_charges,agg_EHC_charges,agg_claims,pv_ehc_av_charges,agg_dep_fee,sum_of_premium,Paid_premium_Charges,PV_GMAB_Claims,PV_GMDB_Claims,PV_GMIB_Claims,PV_GMIB_Fond_Claims,PV_GMWB_Claims,";
						pol_by_pol_file  << "PV_GMSB_Claims,LOV,Policy_moneyness,AGE_VALN,DURATION,GMXB_TYPE2,AX_GENDER,PREM_PAID,SPLIT_IDX0,SPLIT_IDX1,SPLIT_IDX2,SPLIT_IDX3,SPLIT_IDX4,SPLIT_IDX5,SPLIT_IDX6,SPLIT_IDX7,SPLIT_IDX8,SPLIT_IDX9,SPLIT_IDX10,SPLIT_IDX11,";
						pol_by_pol_file << "GMAB1_VALN_SUMMARISE,GMAB2_VALN_SUMMARISE,GMDB1_VALN_SUMMARISE,GMDB2_VALN_SUMMARISE,GMWB1_VALN_SUMMARISE,GMWB2_VALN_SUMMARISE,GMWB_DEF_P_SUMMARISE,GMWB_RAT_P_SUMMARISE,GMXB_M_C_SUMMARISE,GMXB_A_C_SUMMARISE,AXA_ROLL_R_SUMMARISE,GMWB_WDL_RATE_SUMMARISE,AV0_SUMMARISE" << endl;

						for(map<string, vector<Model_Point*>>::const_iterator iter_mp = mps.begin();iter_mp != mps.end(); ++iter_mp)
						{
							string pCK = iter_mp->first;
							vector<Model_Point*> model_points = iter_mp->second;

							vector<vector<double>> pvs;

							for(map<string, map<int, vector<vector<double>>>>::const_iterator iter_pvs = results_longevity.begin();
								iter_pvs != results_longevity.end(); ++iter_pvs)
							{
								string prod_code_k = iter_pvs->first;
								if (prod_code_k == pCK)
								{
									map<int, vector<vector<double>>> map_scen_pass_num = iter_pvs->second;
									for(map<int, vector<vector<double>>>::const_iterator iter_scen_pass_num = map_scen_pass_num.begin();
										iter_scen_pass_num != map_scen_pass_num.end(); ++iter_scen_pass_num)
									{
										if (iter_scen_pass_num->first == scen_pass_n)
										{
											pvs = iter_scen_pass_num->second;
										}
									}
								}
							}

							int number_of_mps = model_points.size();
							for(int i = 0; i < number_of_mps ; i++)
							{
								double agg_real_charges=0.;
								double agg_EHC_charges=0.;
								double agg_claims=0.;
								double pv_ehc_av_charges=0.;
								double agg_dep_fee=0.;
								double sum_of_premium=0.;
								double Paid_premium_Charges=0.;

								if( pCK == "DEU_IAB01" || pCK == "DEU_IAB02" || pCK == "DEU_IDB01" || pCK == "DEU_IDB02" )
								{
									Model_Point_DEU *model_p = dynamic_cast<Model_Point_DEU*>(model_points[i]);

									vector<double> index_pv = pvs[i];

									double AV0=0;
									for(int k=0;k<MAXIMUM_NUMBER_OF_INDEXES;k++)
									{
										AV0+=model_p->av_if_array[k];
									}

									pol_by_pol_file << "V1.0" << ",";
									string country_code = pCK.substr(0,pCK.find("_"));
									pol_by_pol_file << country_code.c_str() << ",";
									pol_by_pol_file << model_p->product.c_str() << ",";
									pol_by_pol_file << model_p->group.c_str() << ",";
									pol_by_pol_file << pCK.c_str() << ",";
									pol_by_pol_file << model_p->policy_id.c_str() << ",";
									pol_by_pol_file << "1" << ",";
									pol_by_pol_file << "1" << ",";
									pol_by_pol_file << model_p->gmxb_g_c / 100. << ",";
									pol_by_pol_file << model_p->gmxb_g_c_gross << ",";
									pol_by_pol_file << model_p->gmxb_ehc_charge / 100. << ",";
									pol_by_pol_file << 0. << ",";
									agg_real_charges=index_pv[PV_HC_AV_TOT];
									agg_dep_fee=index_pv[PV_DEP_FEE_TOT];
									sum_of_premium=index_pv[PV_DEP_FEE_SUM_TOT];
									Paid_premium_Charges=0.;
									pv_ehc_av_charges=index_pv[PV_EHC_CHARGES_DEU];
									agg_EHC_charges=pv_ehc_av_charges+Paid_premium_Charges+sum_of_premium+agg_dep_fee;
									agg_claims=index_pv[PV_GMDB_TOT]+index_pv[PV_GMIB_TOT]+index_pv[PV_GMAB_TOT];
									pol_by_pol_file << setprecision(15) << agg_real_charges << ",";	
									pol_by_pol_file << setprecision(15) << agg_EHC_charges << ",";	
									pol_by_pol_file << setprecision(15) << agg_claims << ",";	
									pol_by_pol_file << setprecision(15) << pv_ehc_av_charges << ",";	
									pol_by_pol_file << setprecision(15) << agg_dep_fee << ",";	
									pol_by_pol_file << setprecision(15) << sum_of_premium << ",";	
									pol_by_pol_file << setprecision(15) << Paid_premium_Charges << ",";	

									pol_by_pol_file << setprecision(15) << index_pv[PV_GMAB_TOT]  << ",";
									pol_by_pol_file << setprecision(15) << index_pv[PV_GMDB_TOT]  << ",";
									pol_by_pol_file << setprecision(15) << index_pv[PV_GMIB_TOT]  << ",";
									pol_by_pol_file << setprecision(15) << index_pv[PV_GMIB_FONDS_DEU]  << ",";
									pol_by_pol_file << setprecision(15) << 0.  << ",";
									pol_by_pol_file << setprecision(15) << 0.  << ",";

									pol_by_pol_file << setprecision(15) << index_pv[PV_LOV_DEU]   << ",";
									pol_by_pol_file << setprecision(15) << index_pv[PV_ITM_DEU]  << ",";

									pol_by_pol_file << model_p->age_at_valn << ",";
									pol_by_pol_file << model_p->duration_valn << ",";
									pol_by_pol_file << 0. << ",";
									pol_by_pol_file << model_p->sex << ",";
									pol_by_pol_file << model_p->prem_paid << ",";
									pol_by_pol_file << model_p->target_av_split_valn_index0 << ",";
									pol_by_pol_file << model_p->target_av_split_valn_index1 << ",";
									pol_by_pol_file << model_p->target_av_split_valn_index2 << ",";
									pol_by_pol_file << model_p->target_av_split_valn_index3 << ",";
									pol_by_pol_file << model_p->target_av_split_valn_index4 << ",";
									pol_by_pol_file << model_p->target_av_split_valn_index5 << ",";
									pol_by_pol_file << model_p->target_av_split_valn_index6 << ",";
									pol_by_pol_file << model_p->target_av_split_valn_index7 << ",";
									pol_by_pol_file << model_p->target_av_split_valn_index8 << ",";
									pol_by_pol_file << model_p->target_av_split_valn_index9 << ",";
									pol_by_pol_file << model_p->target_av_split_valn_index10 << ",";
									pol_by_pol_file << model_p->target_av_split_valn_index11 << ",";
									// TODO display the required fields
									pol_by_pol_file << -1 << ",";
									pol_by_pol_file << -1 << ",";
									pol_by_pol_file << -1 << ",";
									pol_by_pol_file << -1 << ",";
									pol_by_pol_file << -1 << ",";
									pol_by_pol_file << -1 << ",";
									pol_by_pol_file << -1 << ",";
									pol_by_pol_file << -1 << ",";
									pol_by_pol_file << -1 << ",";
									pol_by_pol_file << -1 << ",";
									pol_by_pol_file << -1 << ",";
									pol_by_pol_file << -1 << ",";
									pol_by_pol_file << AV0 << ",";
									// TODO display the required fields
									pol_by_pol_file << endl;	


								}
								else
								{
									Model_Point_DEU_IADB05 *model_p = dynamic_cast<Model_Point_DEU_IADB05*>(model_points[i]);

									vector<double> index_pv = pvs[i];
									double AV0=0;
									for(int k=0;k<MAXIMUM_NUMBER_OF_INDEXES;k++)
									{
										AV0+=model_p->av_if_array[k];
									}
									pol_by_pol_file << "V1.0" << ",";
									string country_code = pCK.substr(0,pCK.find("_"));
									pol_by_pol_file << country_code.c_str() << ",";
									pol_by_pol_file << model_p->product.c_str() << ",";
									pol_by_pol_file << model_p->Group.c_str() << ",";
									pol_by_pol_file << pCK.c_str() << ",";
									pol_by_pol_file << model_p->policy_id.c_str() << ",";
									pol_by_pol_file << "1" << ",";
									pol_by_pol_file << "1" << ",";
									pol_by_pol_file << model_p->Gmxb_guaranted_cost << ",";
									pol_by_pol_file << model_p->Hc_av_brutto << ",";
									pol_by_pol_file << 0. << ",";
									pol_by_pol_file << model_p->Gmxb_EHC_cost << ",";
									//double chi=(index_pv[PV_GMDB_TOT]+index_pv[PV_GMIB_TOT]+index_pv[PV_GMAB_TOT])/(index_pv[PV_HC_AV]+index_pv[PV_HC_AV_ADD]+index_pv[PV_HC_AV_PAID_UP]+index_pv[PV_HC_AV_ADD_PAID_UP]+index_pv[PV_DEP_FEE_TOT]+index_pv[PV_DEP_FEE_SUM_TOT]+index_pv[PV_HC_PP_AV]+index_pv[PV_HC_PP_AV_ADD]+index_pv[PV_HC_PP_AV_PAID_UP]+index_pv[PV_HC_PP_ADD_AV_PAID_UP]);
									//pol_by_pol_file << (index_pv[PV_GMDB_TOT]+index_pv[PV_GMIB_TOT]+index_pv[PV_GMAB_TOT])/(index_pv[PV_HC_AV]+index_pv[PV_HC_AV_ADD]+index_pv[PV_HC_AV_PAID_UP]+index_pv[PV_HC_AV_ADD_PAID_UP]+index_pv[PV_DEP_FEE_TOT]+index_pv[PV_DEP_FEE_SUM_TOT]+index_pv[PV_HC_PP_AV]+index_pv[PV_HC_PP_AV_ADD]+index_pv[PV_HC_PP_AV_PAID_UP]+index_pv[PV_HC_PP_ADD_AV_PAID_UP]) << ",";
									agg_real_charges=(index_pv[PV_HC_AV]+index_pv[PV_HC_AV_ADD]+index_pv[PV_HC_AV_PAID_UP]+index_pv[PV_HC_AV_ADD_PAID_UP]);
									pv_ehc_av_charges=agg_real_charges*model_p->Gmxb_EHC_cost;
									agg_EHC_charges=pv_ehc_av_charges+index_pv[PV_DEP_FEE_TOT_CHI]+index_pv[PV_DEP_FEE_SUM_TOT_CHI]+index_pv[PV_HC_PP_AV_TOT_CHI];
									agg_claims=index_pv[PV_GMDB_TOT]+index_pv[PV_GMIB_TOT]+index_pv[PV_GMAB_TOT];
									pol_by_pol_file << setprecision(15) << agg_real_charges << ",";	
									pol_by_pol_file << setprecision(15) << agg_EHC_charges << ",";	
									pol_by_pol_file << setprecision(15) << agg_claims << ",";	
									pol_by_pol_file << setprecision(15) << pv_ehc_av_charges << ",";	
									pol_by_pol_file << setprecision(15) << index_pv[PV_DEP_FEE_TOT_CHI] << ",";	
									pol_by_pol_file << setprecision(15) << index_pv[PV_DEP_FEE_SUM_TOT_CHI] << ",";	
									pol_by_pol_file << setprecision(15) << index_pv[PV_HC_PP_AV_TOT_CHI] << ",";	

									pol_by_pol_file << setprecision(15) << index_pv[PV_GMAB_TOT]  << ",";
									pol_by_pol_file << setprecision(15) << index_pv[PV_GMDB_TOT]  << ",";
									pol_by_pol_file << setprecision(15) << index_pv[PV_GMIB_TOT]  << ",";
									pol_by_pol_file << setprecision(15) << index_pv[PV_GMIB_FONDS_DEU]  << ",";
									pol_by_pol_file << setprecision(15) << 0.  << ",";
									pol_by_pol_file << setprecision(15) << 0.  << ",";

									pol_by_pol_file << setprecision(15) << agg_claims- agg_EHC_charges << ",";
									pol_by_pol_file << setprecision(15) << index_pv[PV_ITM_DEU]  << ",";

									pol_by_pol_file << model_p->Age_at_valn << ",";
									pol_by_pol_file << model_p->Duration_valn<< ",";
									pol_by_pol_file << 0. << ",";
									pol_by_pol_file << model_p->Sex << ",";
									pol_by_pol_file << model_p->Prem_paid << ",";
									pol_by_pol_file << model_p->Target_av_split_valn_index0 << ",";
									pol_by_pol_file << model_p->Target_av_split_valn_index1 << ",";
									pol_by_pol_file << model_p->Target_av_split_valn_index2 << ",";
									pol_by_pol_file << model_p->Target_av_split_valn_index3 << ",";
									pol_by_pol_file << model_p->Target_av_split_valn_index4 << ",";
									pol_by_pol_file << model_p->Target_av_split_valn_index5 << ",";
									pol_by_pol_file << model_p->Target_av_split_valn_index6 << ",";
									pol_by_pol_file << model_p->Target_av_split_valn_index7 << ",";
									pol_by_pol_file << model_p->Target_av_split_valn_index8 << ",";
									pol_by_pol_file << model_p->Target_av_split_valn_index9 << ",";
									pol_by_pol_file << model_p->Target_av_split_valn_index10 << ",";
									pol_by_pol_file << model_p->Target_av_split_valn_index11 << ",";
									pol_by_pol_file << -1 << ",";
									pol_by_pol_file << -1 << ",";
									pol_by_pol_file << -1 << ",";
									pol_by_pol_file << -1 << ",";
									pol_by_pol_file << -1 << ",";
									pol_by_pol_file << -1 << ",";
									pol_by_pol_file << -1 << ",";
									pol_by_pol_file << -1 << ",";
									pol_by_pol_file << -1 << ",";
									pol_by_pol_file << -1 << ",";
									pol_by_pol_file << -1 << ",";
									pol_by_pol_file << -1 << ",";
									pol_by_pol_file << AV0 << ",";
									// TODO display the required fields
									pol_by_pol_file << endl;										


								}				
							}
						}
						pol_by_pol_file.close();
					}
				}
			}
		}
	}


	void write_pol_by_pol_esg(const map<string, vector<Model_Point*>>& mps, 
		const map<string, map<int,map<int,map<int, vector<vector<double>>>>>>& index_results_map,
		const map<string, map<int,map<int,map<int, vector<vector<double>>>>>>& fund_results_map,
		const map<string, map<int,map<int,map<string, vector<vector<double>>>>>>& results_lapse,
		const map<string, map<int,map<int,map<string, vector<vector<double>>>>>>& results_mort,
		const map<string, map<int,map<int, vector<vector<double>>>>>& results_longevity,
		const map<string, map<int,map<int,map<string, vector<vector<double>>>>>>& results_paidup,
		const map<string, map<int,map<int,map<string, vector<vector<double>>>>>>& results_election)
	{
		//Shock on Indexes
		for (map<int, map<int, vector<vector<int>>>>::const_iterator iter_scen_pass_num = this->index_map_shocks_esg.begin(); 
			iter_scen_pass_num != this->index_map_shocks_esg.end(); ++iter_scen_pass_num)
		{
			int scen_pass_n = iter_scen_pass_num->first;
			for (map<int, vector<vector<int>>>::const_iterator iter_bucket = iter_scen_pass_num->second.begin(); 
				iter_bucket != iter_scen_pass_num->second.end(); ++iter_bucket)
			{
				int bucket_id = iter_bucket->first;
				vector<vector<int>> index_shock_array = iter_bucket->second;
				int index_size_of_shock_array = index_shock_array.size();
				for(int s = 0; s < index_size_of_shock_array; s++ )
				{
					int shock_number = this->get_shock_number(index_shock_array, s, MAX_DELTA_SHOCKS_PER_INDEX, MAXIMUM_NUMBER_OF_INDEXES);

					char pol_by_pol_file_name[MAX_LENGTH_FILE_NAME];
					sprintf(pol_by_pol_file_name, "%s%s_%d_%d_%d.csv", this->summary_configuration->get_policy_by_policy_file_directory().c_str(), 
						this->summary_configuration->get_policy_by_policy_file_name().c_str(), scen_pass_n, bucket_id, shock_number);

					ofstream pol_by_pol_file(pol_by_pol_file_name);

					//pol_by_pol_file  << "Version,Country,Product,Group,prod_type,POL_ID,1,1,GMXB_G_C,GMXB_H_C,agg_real_charges,pv_ehc_charge,agg_claims,agg_dep_fee,sum_of_premium,PV_GMAB,PV_GMDB,PV_GMIB,PV_GMWB,PV_GMSB,AGE_VALN,DURATION,GMXB_TYPE2,AX_GENDER,PREM_PAID,SPLIT_IDX0,SPLIT_IDX1,SPLIT_IDX2,SPLIT_IDX3,SPLIT_IDX4,SPLIT_IDX5,SPLIT_IDX6,SPLIT_IDX7,SPLIT_IDX8,SPLIT_IDX9,SPLIT_IDX10,SPLIT_IDX11" << endl;
					pol_by_pol_file  << "Version,Country,Product,Group,prod_type,POL_ID,HW_Mean_Reversion,HW_volatility,GMXB_G_C_Net,GMXB_G_C_Gross,GMXB_EHC,GMXB_CHI,agg_real_charges,agg_EHC_charges,agg_claims,pv_ehc_av_charges,agg_dep_fee,sum_of_premium,Paid_premium_Charges,PV_GMAB_Claims,PV_GMDB_Claims,PV_GMIB_Claims,PV_GMIB_Fond_Claims,PV_GMWB_Claims,";
					pol_by_pol_file  << "PV_GMSB_Claims,LOV,Policy_moneyness,AGE_VALN,DURATION,GMXB_TYPE2,AX_GENDER,PREM_PAID,SPLIT_IDX0,SPLIT_IDX1,SPLIT_IDX2,SPLIT_IDX3,SPLIT_IDX4,SPLIT_IDX5,SPLIT_IDX6,SPLIT_IDX7,SPLIT_IDX8,SPLIT_IDX9,SPLIT_IDX10,SPLIT_IDX11,GMAB1_VALN_SUMMARISE,GMAB2_VALN_SUMMARISE,GMDB1_VALN_SUMMARISE,GMDB2_VALN_SUMMARISE,GMWB1_VALN_SUMMARISE,GMWB2_VALN_SUMMARISE,GMWB_DEF_P_SUMMARISE,GMWB_RAT_P_SUMMARISE,GMXB_M_C_SUMMARISE,GMXB_A_C_SUMMARISE,AXA_ROLL_R_SUMMARISE,GMWB_WDL_RATE_SUMMARISE,AV0_SUMMARISE" << endl;

					// Loop on the products
					for(map<string, map<int, map<int, map<int, vector<vector<double>>>>>>::const_iterator iter_products = index_results_map.begin();
						iter_products != index_results_map.end(); ++iter_products)
					{
						// string pCK = iter_products->first;
						//vector<vector<double>> index_pvs = this->get_pvs_vector(pCK, scen_pass_n, shock_number, index_results_map);

						for(map<string, vector<Model_Point*>>::const_iterator iter_mp = mps.begin();
							iter_mp != mps.end(); ++iter_mp)
						{
							string pCK = iter_mp->first;
							vector<Model_Point*> model_points = iter_mp->second;
							vector<vector<double>> index_pvs = this->get_pvs_vector_esg(pCK, scen_pass_n, bucket_id, shock_number, index_results_map);
							int number_of_mps = model_points.size();
							for(int i = 0; i < number_of_mps ; i++)
							{
								double agg_real_charges = 0.;
								double agg_EHC_charges=0.;
								double agg_claims = 0.;
								double pv_ehc_av_charges=0.;
								double agg_dep_fee = 0.;
								double sum_of_premium = 0.;
								double Paid_premium_Charges=0.;
								if( pCK == "DEU_IAB01" || pCK == "DEU_IAB02" || pCK == "DEU_IDB01" || pCK == "DEU_IDB02" )
								{
									Model_Point_DEU *model_p = dynamic_cast<Model_Point_DEU*>(model_points[i]);
									vector<double> index_pv = index_pvs[i];

									double AV0=0;
									for(int k=0;k<MAXIMUM_NUMBER_OF_INDEXES;k++)
									{
										AV0+=model_p->av_if_array[k];
									}
									pol_by_pol_file << "V1.0" << ",";
									string country_code = pCK.substr(0,pCK.find("_"));
									pol_by_pol_file << country_code.c_str() << ",";
									pol_by_pol_file << model_p->product.c_str() << ",";
									pol_by_pol_file << model_p->group.c_str() << ",";
									pol_by_pol_file << pCK.c_str() << ",";
									pol_by_pol_file << model_p->policy_id.c_str() << ",";
									pol_by_pol_file << "1" << ",";
									pol_by_pol_file << "1" << ",";

									pol_by_pol_file << model_p->gmxb_g_c/100. << ",";

									pol_by_pol_file << model_p->gmxb_g_c_gross << ",";
									pol_by_pol_file << model_p->gmxb_ehc_charge/100. << ",";

									pol_by_pol_file << 0. << ",";
									agg_real_charges=index_pv[PV_HC_AV_TOT];
									agg_dep_fee=index_pv[PV_DEP_FEE_TOT];
									sum_of_premium=index_pv[PV_DEP_FEE_SUM_TOT];
									Paid_premium_Charges=0.;
									pv_ehc_av_charges=index_pv[PV_EHC_CHARGES_DEU];
									agg_EHC_charges=pv_ehc_av_charges+Paid_premium_Charges+sum_of_premium+agg_dep_fee;
									agg_claims=index_pv[PV_GMDB_TOT]+index_pv[PV_GMIB_TOT]+index_pv[PV_GMAB_TOT];
									pol_by_pol_file << setprecision(15) << agg_real_charges << ",";	
									pol_by_pol_file << setprecision(15) << agg_EHC_charges << ",";	
									pol_by_pol_file << setprecision(15) << agg_claims << ",";	
									pol_by_pol_file << setprecision(15) << pv_ehc_av_charges << ",";	
									pol_by_pol_file << setprecision(15) << agg_dep_fee << ",";	
									pol_by_pol_file << setprecision(15) << sum_of_premium << ",";	
									pol_by_pol_file << setprecision(15) << Paid_premium_Charges << ",";	

									pol_by_pol_file << setprecision(15) << index_pv[PV_GMAB_TOT]  << ",";
									pol_by_pol_file << setprecision(15) << index_pv[PV_GMDB_TOT]  << ",";
									pol_by_pol_file << setprecision(15) << index_pv[PV_GMIB_TOT]  << ",";
									pol_by_pol_file << setprecision(15) << index_pv[PV_GMIB_FONDS_DEU]  << ",";
									pol_by_pol_file << setprecision(15) << 0.  << ",";
									pol_by_pol_file << setprecision(15) << 0.  << ",";

									pol_by_pol_file << setprecision(15) << index_pv[PV_LOV_DEU]   << ",";
									pol_by_pol_file << setprecision(15) << index_pv[PV_ITM_DEU]  << ",";

									pol_by_pol_file << model_p->age_at_valn << ",";
									pol_by_pol_file << model_p->duration_valn << ",";
									pol_by_pol_file << 0. << ",";
									pol_by_pol_file << model_p->sex << ",";
									pol_by_pol_file << model_p->prem_paid << ",";
									pol_by_pol_file << model_p->target_av_split_valn_index0 << ",";
									pol_by_pol_file << model_p->target_av_split_valn_index1 << ",";
									pol_by_pol_file << model_p->target_av_split_valn_index2 << ",";
									pol_by_pol_file << model_p->target_av_split_valn_index3 << ",";
									pol_by_pol_file << model_p->target_av_split_valn_index4 << ",";
									pol_by_pol_file << model_p->target_av_split_valn_index5 << ",";
									pol_by_pol_file << model_p->target_av_split_valn_index6 << ",";
									pol_by_pol_file << model_p->target_av_split_valn_index7 << ",";
									pol_by_pol_file << model_p->target_av_split_valn_index8 << ",";
									pol_by_pol_file << model_p->target_av_split_valn_index9 << ",";
									pol_by_pol_file << model_p->target_av_split_valn_index10 << ",";
									pol_by_pol_file << model_p->target_av_split_valn_index11 << ",";
									// TODO display the required fields
									pol_by_pol_file << -1 << ",";
									pol_by_pol_file << -1 << ",";
									pol_by_pol_file << -1 << ",";
									pol_by_pol_file << -1 << ",";
									pol_by_pol_file << -1 << ",";
									pol_by_pol_file << -1 << ",";
									pol_by_pol_file << -1 << ",";
									pol_by_pol_file << -1 << ",";
									pol_by_pol_file << -1 << ",";
									pol_by_pol_file << -1 << ",";
									pol_by_pol_file << -1 << ",";
									pol_by_pol_file << -1 << ",";
									pol_by_pol_file << AV0 << ",";
									pol_by_pol_file << endl;
								}
								else
								{
									Model_Point_DEU_IADB05 *model_p = dynamic_cast<Model_Point_DEU_IADB05*>(model_points[i]);

									vector<double> index_pv = index_pvs[i];
									pol_by_pol_file << "V1.0" << ",";
									string country_code = pCK.substr(0,pCK.find("_"));
									pol_by_pol_file << country_code.c_str() << ",";
									pol_by_pol_file << model_p->product.c_str() << ",";
									pol_by_pol_file << model_p->Group.c_str() << ",";
									pol_by_pol_file << pCK.c_str() << ",";
									pol_by_pol_file << model_p->policy_id.c_str() << ",";
									pol_by_pol_file << "1" << ",";
									pol_by_pol_file << "1" << ",";
									pol_by_pol_file << model_p->Gmxb_guaranted_cost << ",";
									pol_by_pol_file << model_p->Hc_av_brutto << ",";
									pol_by_pol_file << 0. << ",";
									pol_by_pol_file << model_p->Gmxb_EHC_cost << ",";
									//double chi=(index_pv[PV_GMDB_TOT]+index_pv[PV_GMIB_TOT]+index_pv[PV_GMAB_TOT])/(index_pv[PV_HC_AV]+index_pv[PV_HC_AV_ADD]+index_pv[PV_HC_AV_PAID_UP]+index_pv[PV_HC_AV_ADD_PAID_UP]+index_pv[PV_DEP_FEE_TOT]+index_pv[PV_DEP_FEE_SUM_TOT]+index_pv[PV_HC_PP_AV]+index_pv[PV_HC_PP_AV_ADD]+index_pv[PV_HC_PP_AV_PAID_UP]+index_pv[PV_HC_PP_ADD_AV_PAID_UP]);
									//pol_by_pol_file << (index_pv[PV_GMDB_TOT]+index_pv[PV_GMIB_TOT]+index_pv[PV_GMAB_TOT])/(index_pv[PV_HC_AV]+index_pv[PV_HC_AV_ADD]+index_pv[PV_HC_AV_PAID_UP]+index_pv[PV_HC_AV_ADD_PAID_UP]+index_pv[PV_DEP_FEE_TOT]+index_pv[PV_DEP_FEE_SUM_TOT]+index_pv[PV_HC_PP_AV]+index_pv[PV_HC_PP_AV_ADD]+index_pv[PV_HC_PP_AV_PAID_UP]+index_pv[PV_HC_PP_ADD_AV_PAID_UP]) << ",";
									agg_real_charges=(index_pv[PV_HC_AV]+index_pv[PV_HC_AV_ADD]+index_pv[PV_HC_AV_PAID_UP]+index_pv[PV_HC_AV_ADD_PAID_UP]);
									pv_ehc_av_charges=agg_real_charges*model_p->Gmxb_EHC_cost;
									agg_EHC_charges=pv_ehc_av_charges+index_pv[PV_DEP_FEE_TOT_CHI]+index_pv[PV_DEP_FEE_SUM_TOT_CHI]+index_pv[PV_HC_PP_AV_TOT_CHI];
									agg_claims=index_pv[PV_GMDB_TOT]+index_pv[PV_GMIB_TOT]+index_pv[PV_GMAB_TOT];
									pol_by_pol_file << setprecision(15) << agg_real_charges << ",";	
									pol_by_pol_file << setprecision(15) << agg_EHC_charges << ",";	
									pol_by_pol_file << setprecision(15) << agg_claims << ",";	
									pol_by_pol_file << setprecision(15) << pv_ehc_av_charges << ",";	
									pol_by_pol_file << setprecision(15) << index_pv[PV_DEP_FEE_TOT_CHI] << ",";	
									pol_by_pol_file << setprecision(15) << index_pv[PV_DEP_FEE_SUM_TOT_CHI] << ",";	
									pol_by_pol_file << setprecision(15) << index_pv[PV_HC_PP_AV_TOT_CHI] << ",";	

									pol_by_pol_file << setprecision(15) << index_pv[PV_GMAB_TOT]  << ",";
									pol_by_pol_file << setprecision(15) << index_pv[PV_GMDB_TOT]  << ",";
									pol_by_pol_file << setprecision(15) << index_pv[PV_GMIB_TOT]  << ",";
									pol_by_pol_file << setprecision(15) << index_pv[PV_GMIB_FONDS_DEU]  << ",";
									pol_by_pol_file << setprecision(15) << 0.  << ",";
									pol_by_pol_file << setprecision(15) << 0.  << ",";

									pol_by_pol_file << setprecision(15) << agg_claims- agg_EHC_charges << ",";
									pol_by_pol_file << setprecision(15) << index_pv[PV_ITM_DEU]  << ",";

									pol_by_pol_file << model_p->Age_at_valn << ",";
									pol_by_pol_file << model_p->Duration_valn<< ",";
									pol_by_pol_file << 0. << ",";
									pol_by_pol_file << model_p->Sex << ",";
									pol_by_pol_file << model_p->Prem_paid << ",";
									pol_by_pol_file << model_p->Target_av_split_valn_index0 << ",";
									pol_by_pol_file << model_p->Target_av_split_valn_index1 << ",";
									pol_by_pol_file << model_p->Target_av_split_valn_index2 << ",";
									pol_by_pol_file << model_p->Target_av_split_valn_index3 << ",";
									pol_by_pol_file << model_p->Target_av_split_valn_index4 << ",";
									pol_by_pol_file << model_p->Target_av_split_valn_index5 << ",";
									pol_by_pol_file << model_p->Target_av_split_valn_index6 << ",";
									pol_by_pol_file << model_p->Target_av_split_valn_index7 << ",";
									pol_by_pol_file << model_p->Target_av_split_valn_index8 << ",";
									pol_by_pol_file << model_p->Target_av_split_valn_index9 << ",";
									pol_by_pol_file << model_p->Target_av_split_valn_index10 << ",";
									pol_by_pol_file << model_p->Target_av_split_valn_index11 << ",";
									pol_by_pol_file << -1 << ",";
									pol_by_pol_file << -1 << ",";
									pol_by_pol_file << -1 << ",";
									pol_by_pol_file << -1 << ",";
									pol_by_pol_file << -1 << ",";
									pol_by_pol_file << -1 << ",";
									pol_by_pol_file << -1 << ",";
									pol_by_pol_file << -1 << ",";
									pol_by_pol_file << -1 << ",";
									pol_by_pol_file << -1 << ",";
									pol_by_pol_file << -1 << ",";
									pol_by_pol_file << -1 << ",";
									pol_by_pol_file << model_p->Av_valn_index0+model_p->Av_valn_index1+model_p->Av_valn_index2+
										model_p->Av_valn_index3+model_p->Av_valn_index4+model_p->Av_valn_index5+model_p->Av_valn_index6+
										model_p->Av_valn_index7+model_p->Av_valn_index8+model_p->Av_valn_index9+model_p->Av_valn_index10+
										model_p->Av_valn_index11 << ",";
									// TODO display the required fields
									pol_by_pol_file << endl;									

								}				
							}
						}
					}
					pol_by_pol_file.close();
				}
			}
		}


		//Shock on funds
		for (map<int, map<int, vector<vector<int>>>>::const_iterator iter_scen_pass_num = this->fund_map_shocks_esg.begin(); 
			iter_scen_pass_num != this->fund_map_shocks_esg.end(); ++iter_scen_pass_num)
		{
			int scen_pass_n = iter_scen_pass_num->first;
			for (map<int, vector<vector<int>>>::const_iterator iter_bucket = iter_scen_pass_num->second.begin(); 
				iter_bucket != iter_scen_pass_num->second.end(); ++iter_bucket)
			{
				int bucket_id = iter_bucket->first;
				vector<vector<int>> fund_shock_array = iter_bucket->second;
				int fund_size_of_shock_array = fund_shock_array.size();
				int number_of_funds = 0;
				if (fund_size_of_shock_array > 0)
					number_of_funds = fund_shock_array[0].size();	

				for(int s = 0; s < fund_size_of_shock_array; s++ )
				{
					int shock_number = this->get_shock_number(fund_shock_array, s, MAX_DELTA_SHOCKS_PER_INDEX, number_of_funds);

					char pol_by_pol_file_name[MAX_LENGTH_FILE_NAME];
					sprintf(pol_by_pol_file_name, "%s%s_fund_%d_%d_%d.csv", this->summary_configuration->get_policy_by_policy_file_directory().c_str(), 
						this->summary_configuration->get_policy_by_policy_file_name().c_str(), scen_pass_n, bucket_id, shock_number);

					ofstream pol_by_pol_file(pol_by_pol_file_name);

					pol_by_pol_file  << "Version,Country,Product,Group,prod_type,POL_ID,HW_Mean_Reversion,HW_volatility,GMXB_G_C_Net,GMXB_G_C_Gross,GMXB_EHC,GMXB_CHI,agg_real_charges,agg_EHC_charges,agg_claims,pv_ehc_av_charges,agg_dep_fee,sum_of_premium,Paid_premium_Charges,PV_GMAB_Claims,PV_GMDB_Claims,PV_GMIB_Claims,PV_GMIB_Fond_Claims,PV_GMWB_Claims,";
					pol_by_pol_file  << "PV_GMSB_Claims,LOV,Policy_moneyness,AGE_VALN,DURATION,GMXB_TYPE2,AX_GENDER,PREM_PAID,SPLIT_IDX0,SPLIT_IDX1,SPLIT_IDX2,SPLIT_IDX3,SPLIT_IDX4,SPLIT_IDX5,SPLIT_IDX6,SPLIT_IDX7,SPLIT_IDX8,SPLIT_IDX9,SPLIT_IDX10,SPLIT_IDX11,GMAB1_VALN_SUMMARISE,GMAB2_VALN_SUMMARISE,GMDB1_VALN_SUMMARISE,GMDB2_VALN_SUMMARISE,GMWB1_VALN_SUMMARISE,GMWB2_VALN_SUMMARISE,GMWB_DEF_P_SUMMARISE,GMWB_RAT_P_SUMMARISE,GMXB_M_C_SUMMARISE,GMXB_A_C_SUMMARISE,AXA_ROLL_R_SUMMARISE,GMWB_WDL_RATE_SUMMARISE,AV0_SUMMARISE" << endl;

					// Loop on the products
					for(map<string, map<int, map<int, map<int, vector<vector<double>>>>>>::const_iterator iter_products = fund_results_map.begin();
						iter_products != fund_results_map.end(); ++iter_products)
					{
						// string pCK = iter_products->first;
						//vector<vector<double>> fund_pvs = this->get_pvs_vector(pCK, scen_pass_n, shock_number, fund_results_map);

						for(map<string, vector<Model_Point*>>::const_iterator iter_mp = mps.begin();
							iter_mp != mps.end(); ++iter_mp)
						{
							string pCK = iter_mp->first;
							vector<Model_Point*> model_points = iter_mp->second;
							vector<vector<double>> fund_pvs = this->get_pvs_vector_esg(pCK, scen_pass_n, shock_number, bucket_id, fund_results_map);
							int number_of_mps = model_points.size();
							for(int i = 0; i < number_of_mps ; i++)
							{
								double agg_real_charges = 0.;
								double agg_EHC_charges=0.;
								double agg_claims = 0.;
								double pv_ehc_av_charges=0.;
								double agg_dep_fee = 0.;
								double sum_of_premium = 0.;
								double Paid_premium_Charges=0.;
								if( pCK == "DEU_IAB01" || pCK == "DEU_IAB02" || pCK == "DEU_IDB01" || pCK == "DEU_IDB02" )
								{
									Model_Point_DEU *model_p = dynamic_cast<Model_Point_DEU*>(model_points[i]);
									vector<double> index_pv = fund_pvs[i];

									double AV0=0;
									for(int k=0;k<MAXIMUM_NUMBER_OF_INDEXES;k++)
									{
										AV0+=model_p->av_if_array[k];
									}

									pol_by_pol_file << "V1.0" << ",";
									string country_code = pCK.substr(0,pCK.find("_"));
									pol_by_pol_file << country_code.c_str() << ",";
									pol_by_pol_file << model_p->product.c_str() << ",";
									pol_by_pol_file << model_p->group.c_str() << ",";
									pol_by_pol_file << pCK.c_str() << ",";
									pol_by_pol_file << model_p->policy_id.c_str() << ",";
									pol_by_pol_file << "1" << ",";
									pol_by_pol_file << "1" << ",";
									pol_by_pol_file << model_p->gmxb_g_c / 100. << ",";
									pol_by_pol_file << model_p->gmxb_g_c_gross << ",";
									pol_by_pol_file << model_p->gmxb_ehc_charge / 100. << ",";
									pol_by_pol_file << 0. << ",";
									agg_real_charges=index_pv[PV_HC_AV_TOT];
									agg_dep_fee=index_pv[PV_DEP_FEE_TOT];
									sum_of_premium=index_pv[PV_DEP_FEE_SUM_TOT];
									Paid_premium_Charges=0.;
									pv_ehc_av_charges=index_pv[PV_EHC_CHARGES_DEU];
									agg_EHC_charges=pv_ehc_av_charges+Paid_premium_Charges+sum_of_premium+agg_dep_fee;
									agg_claims=index_pv[PV_GMDB_TOT]+index_pv[PV_GMIB_TOT]+index_pv[PV_GMAB_TOT];
									pol_by_pol_file << setprecision(15) << agg_real_charges << ",";	
									pol_by_pol_file << setprecision(15) << agg_EHC_charges << ",";	
									pol_by_pol_file << setprecision(15) << agg_claims << ",";	
									pol_by_pol_file << setprecision(15) << pv_ehc_av_charges << ",";	
									pol_by_pol_file << setprecision(15) << agg_dep_fee << ",";	
									pol_by_pol_file << setprecision(15) << sum_of_premium << ",";	
									pol_by_pol_file << setprecision(15) << Paid_premium_Charges << ",";	

									pol_by_pol_file << setprecision(15) << index_pv[PV_GMAB_TOT]  << ",";
									pol_by_pol_file << setprecision(15) << index_pv[PV_GMDB_TOT]  << ",";
									pol_by_pol_file << setprecision(15) << index_pv[PV_GMIB_TOT]  << ",";
									pol_by_pol_file << setprecision(15) << index_pv[PV_GMIB_FONDS_DEU]  << ",";
									pol_by_pol_file << setprecision(15) << 0.  << ",";
									pol_by_pol_file << setprecision(15) << 0.  << ",";

									pol_by_pol_file << setprecision(15) << index_pv[PV_LOV_DEU]   << ",";
									pol_by_pol_file << setprecision(15) << index_pv[PV_ITM_DEU]  << ",";

									pol_by_pol_file << model_p->age_at_valn << ",";
									pol_by_pol_file << model_p->duration_valn << ",";
									pol_by_pol_file << 0. << ",";
									pol_by_pol_file << model_p->sex << ",";
									pol_by_pol_file << model_p->prem_paid << ",";
									pol_by_pol_file << model_p->target_av_split_valn_index0 << ",";
									pol_by_pol_file << model_p->target_av_split_valn_index1 << ",";
									pol_by_pol_file << model_p->target_av_split_valn_index2 << ",";
									pol_by_pol_file << model_p->target_av_split_valn_index3 << ",";
									pol_by_pol_file << model_p->target_av_split_valn_index4 << ",";
									pol_by_pol_file << model_p->target_av_split_valn_index5 << ",";
									pol_by_pol_file << model_p->target_av_split_valn_index6 << ",";
									pol_by_pol_file << model_p->target_av_split_valn_index7 << ",";
									pol_by_pol_file << model_p->target_av_split_valn_index8 << ",";
									pol_by_pol_file << model_p->target_av_split_valn_index9 << ",";
									pol_by_pol_file << model_p->target_av_split_valn_index10 << ",";
									pol_by_pol_file << model_p->target_av_split_valn_index11 << ",";
									pol_by_pol_file << -1 << ",";
									pol_by_pol_file << -1 << ",";
									pol_by_pol_file << -1 << ",";
									pol_by_pol_file << -1 << ",";
									pol_by_pol_file << -1 << ",";
									pol_by_pol_file << -1 << ",";
									pol_by_pol_file << -1 << ",";
									pol_by_pol_file << -1 << ",";
									pol_by_pol_file << -1 << ",";
									pol_by_pol_file << -1 << ",";
									pol_by_pol_file << -1 << ",";
									pol_by_pol_file << -1 << ",";
									pol_by_pol_file << AV0 << ",";
									// TODO display the required fields
									pol_by_pol_file << endl;


								}
								else
								{
									Model_Point_DEU_IADB05 *model_p = dynamic_cast<Model_Point_DEU_IADB05*>(model_points[i]);

									vector<double> index_pv = fund_pvs[i];
									pol_by_pol_file << "V1.0" << ",";
									string country_code = pCK.substr(0,pCK.find("_"));
									pol_by_pol_file << country_code.c_str() << ",";
									pol_by_pol_file << model_p->product.c_str() << ",";
									pol_by_pol_file << model_p->Group.c_str() << ",";
									pol_by_pol_file << pCK.c_str() << ",";
									pol_by_pol_file << model_p->policy_id.c_str() << ",";
									pol_by_pol_file << "1" << ",";
									pol_by_pol_file << "1" << ",";
									pol_by_pol_file << model_p->Gmxb_guaranted_cost << ",";
									pol_by_pol_file << model_p->Hc_av_brutto << ",";
									pol_by_pol_file << 0. << ",";
									pol_by_pol_file << model_p->Gmxb_EHC_cost << ",";
									//double chi=(index_pv[PV_GMDB_TOT]+index_pv[PV_GMIB_TOT]+index_pv[PV_GMAB_TOT])/(index_pv[PV_HC_AV]+index_pv[PV_HC_AV_ADD]+index_pv[PV_HC_AV_PAID_UP]+index_pv[PV_HC_AV_ADD_PAID_UP]+index_pv[PV_DEP_FEE_TOT]+index_pv[PV_DEP_FEE_SUM_TOT]+index_pv[PV_HC_PP_AV]+index_pv[PV_HC_PP_AV_ADD]+index_pv[PV_HC_PP_AV_PAID_UP]+index_pv[PV_HC_PP_ADD_AV_PAID_UP]);
									//pol_by_pol_file << (index_pv[PV_GMDB_TOT]+index_pv[PV_GMIB_TOT]+index_pv[PV_GMAB_TOT])/(index_pv[PV_HC_AV]+index_pv[PV_HC_AV_ADD]+index_pv[PV_HC_AV_PAID_UP]+index_pv[PV_HC_AV_ADD_PAID_UP]+index_pv[PV_DEP_FEE_TOT]+index_pv[PV_DEP_FEE_SUM_TOT]+index_pv[PV_HC_PP_AV]+index_pv[PV_HC_PP_AV_ADD]+index_pv[PV_HC_PP_AV_PAID_UP]+index_pv[PV_HC_PP_ADD_AV_PAID_UP]) << ",";
									agg_real_charges=(index_pv[PV_HC_AV]+index_pv[PV_HC_AV_ADD]+index_pv[PV_HC_AV_PAID_UP]+index_pv[PV_HC_AV_ADD_PAID_UP]);
									pv_ehc_av_charges=agg_real_charges*model_p->Gmxb_EHC_cost;
									agg_EHC_charges=pv_ehc_av_charges+index_pv[PV_DEP_FEE_TOT_CHI]+index_pv[PV_DEP_FEE_SUM_TOT_CHI]+index_pv[PV_HC_PP_AV_TOT_CHI];
									agg_claims=index_pv[PV_GMDB_TOT]+index_pv[PV_GMIB_TOT]+index_pv[PV_GMAB_TOT];
									pol_by_pol_file << setprecision(15) << agg_real_charges << ",";	
									pol_by_pol_file << setprecision(15) << agg_EHC_charges << ",";	
									pol_by_pol_file << setprecision(15) << agg_claims << ",";	
									pol_by_pol_file << setprecision(15) << pv_ehc_av_charges << ",";	
									pol_by_pol_file << setprecision(15) << index_pv[PV_DEP_FEE_TOT_CHI] << ",";	
									pol_by_pol_file << setprecision(15) << index_pv[PV_DEP_FEE_SUM_TOT_CHI] << ",";	
									pol_by_pol_file << setprecision(15) << index_pv[PV_HC_PP_AV_TOT_CHI] << ",";	

									pol_by_pol_file << setprecision(15) << index_pv[PV_GMAB_TOT]  << ",";
									pol_by_pol_file << setprecision(15) << index_pv[PV_GMDB_TOT]  << ",";
									pol_by_pol_file << setprecision(15) << index_pv[PV_GMIB_TOT]  << ",";
									pol_by_pol_file << setprecision(15) << index_pv[PV_GMIB_FONDS_DEU]  << ",";
									pol_by_pol_file << setprecision(15) << 0.  << ",";
									pol_by_pol_file << setprecision(15) << 0.  << ",";

									pol_by_pol_file << setprecision(15) << agg_claims- agg_EHC_charges << ",";
									pol_by_pol_file << setprecision(15) << index_pv[PV_ITM_DEU]  << ",";

									pol_by_pol_file << model_p->Age_at_valn << ",";
									pol_by_pol_file << model_p->Duration_valn<< ",";
									pol_by_pol_file << 0. << ",";
									pol_by_pol_file << model_p->Sex << ",";
									pol_by_pol_file << model_p->Prem_paid << ",";
									pol_by_pol_file << model_p->Target_av_split_valn_index0 << ",";
									pol_by_pol_file << model_p->Target_av_split_valn_index1 << ",";
									pol_by_pol_file << model_p->Target_av_split_valn_index2 << ",";
									pol_by_pol_file << model_p->Target_av_split_valn_index3 << ",";
									pol_by_pol_file << model_p->Target_av_split_valn_index4 << ",";
									pol_by_pol_file << model_p->Target_av_split_valn_index5 << ",";
									pol_by_pol_file << model_p->Target_av_split_valn_index6 << ",";
									pol_by_pol_file << model_p->Target_av_split_valn_index7 << ",";
									pol_by_pol_file << model_p->Target_av_split_valn_index8 << ",";
									pol_by_pol_file << model_p->Target_av_split_valn_index9 << ",";
									pol_by_pol_file << model_p->Target_av_split_valn_index10 << ",";
									pol_by_pol_file << model_p->Target_av_split_valn_index11 << ",";
									pol_by_pol_file << -1 << ",";
									pol_by_pol_file << -1 << ",";
									pol_by_pol_file << -1 << ",";
									pol_by_pol_file << -1 << ",";
									pol_by_pol_file << -1 << ",";
									pol_by_pol_file << -1 << ",";
									pol_by_pol_file << -1 << ",";
									pol_by_pol_file << -1 << ",";
									pol_by_pol_file << -1 << ",";
									pol_by_pol_file << -1 << ",";
									pol_by_pol_file << -1 << ",";
									pol_by_pol_file << -1 << ",";
									pol_by_pol_file << model_p->Av_valn_index0+model_p->Av_valn_index1+model_p->Av_valn_index2+
										model_p->Av_valn_index3+model_p->Av_valn_index4+model_p->Av_valn_index5+model_p->Av_valn_index6+
										model_p->Av_valn_index7+model_p->Av_valn_index8+model_p->Av_valn_index9+model_p->Av_valn_index10+
										model_p->Av_valn_index11 << ",";
									// TODO display the required fields
									pol_by_pol_file << endl;									


								}				
							}
						}
					}
					pol_by_pol_file.close();
				}
			}
		}



		//! lapse  
		for(map<int, map<int,vector<string>>>::const_iterator iter_scen_pass_num = this->lapse_map_shocks_esg.begin(); 
			iter_scen_pass_num != this->lapse_map_shocks_esg.end(); ++iter_scen_pass_num)
		{
			int scen_pass_n = iter_scen_pass_num->first;

			for(map<int,vector<string>>::const_iterator iter_bucket = iter_scen_pass_num->second.begin(); 
				iter_bucket != iter_scen_pass_num->second.end(); ++iter_bucket)
			{
				int bucket_id = iter_bucket->first;
				vector<string> v_lapse_names = iter_bucket->second;

				for(unsigned int iter_lapse = 0; iter_lapse < v_lapse_names.size(); ++ iter_lapse)
				{
					string sheet_name = v_lapse_names[iter_lapse];
					char pol_by_pol_file_name[MAX_LENGTH_FILE_NAME];

					sprintf(pol_by_pol_file_name, "%s%s_%d_%d_%s.csv", this->summary_configuration->get_policy_by_policy_file_directory().c_str(), 
						this->summary_configuration->get_policy_by_policy_file_name().c_str(), scen_pass_n, bucket_id, sheet_name.c_str());

					ofstream pol_by_pol_file(pol_by_pol_file_name);
					pol_by_pol_file  << "Version,Country,Product,Group,prod_type,POL_ID,HW_Mean_Reversion,HW_volatility,GMXB_G_C_Net,GMXB_G_C_Gross,GMXB_EHC,GMXB_CHI,agg_real_charges,agg_EHC_charges,agg_claims,pv_ehc_av_charges,agg_dep_fee,sum_of_premium,Paid_premium_Charges,PV_GMAB_Claims,PV_GMDB_Claims,PV_GMIB_Claims,PV_GMIB_Fond_Claims,PV_GMWB_Claims,";
					pol_by_pol_file  << "PV_GMSB_Claims,LOV,Policy_moneyness,AGE_VALN,DURATION,GMXB_TYPE2,AX_GENDER,PREM_PAID,SPLIT_IDX0,SPLIT_IDX1,SPLIT_IDX2,SPLIT_IDX3,SPLIT_IDX4,SPLIT_IDX5,SPLIT_IDX6,SPLIT_IDX7,SPLIT_IDX8,SPLIT_IDX9,SPLIT_IDX10,SPLIT_IDX11,GMAB1_VALN_SUMMARISE,GMAB2_VALN_SUMMARISE,GMDB1_VALN_SUMMARISE,GMDB2_VALN_SUMMARISE,GMWB1_VALN_SUMMARISE,GMWB2_VALN_SUMMARISE,GMWB_DEF_P_SUMMARISE,GMWB_RAT_P_SUMMARISE,GMXB_M_C_SUMMARISE,GMXB_A_C_SUMMARISE,AXA_ROLL_R_SUMMARISE,GMWB_WDL_RATE_SUMMARISE,AV0_SUMMARISE" << endl;


					for(map<string, vector<Model_Point*>>::const_iterator iter_mp = mps.begin();
						iter_mp != mps.end(); ++iter_mp)
					{
						string pCK = iter_mp->first;
						vector<Model_Point*> model_points = iter_mp->second;

						vector<vector<double>> pvs = get_pvs_vector_esg2(pCK,
							scen_pass_n,
							bucket_id,
							sheet_name, 
							results_lapse);

						int number_of_mps = model_points.size();
						for(int i = 0; i < number_of_mps ; i++)
						{
							double agg_real_charges = 0.;
							double agg_EHC_charges=0.;
							double agg_claims = 0.;
							double pv_ehc_av_charges=0.;
							double agg_dep_fee = 0.;
							double sum_of_premium = 0.;
							double Paid_premium_Charges=0.;
							if( pCK == "DEU_IAB01" || pCK == "DEU_IAB02" || pCK == "DEU_IDB01" || pCK == "DEU_IDB02" )
							{
								Model_Point_DEU *model_p = dynamic_cast<Model_Point_DEU*>(model_points[i]);
								vector<double> index_pv = pvs[i];

								double AV0=0;
								for(int k=0;k<MAXIMUM_NUMBER_OF_INDEXES;k++)
								{
									AV0+=model_p->av_if_array[k];
								}

								pol_by_pol_file << "V1.0" << ",";
								string country_code = pCK.substr(0,pCK.find("_"));
								pol_by_pol_file << country_code.c_str() << ",";
								pol_by_pol_file << model_p->product.c_str() << ",";
								pol_by_pol_file << model_p->group.c_str() << ",";
								pol_by_pol_file << pCK.c_str() << ",";
								pol_by_pol_file << model_p->policy_id.c_str() << ",";
								pol_by_pol_file << "1" << ",";
								pol_by_pol_file << "1" << ",";
								pol_by_pol_file << model_p->gmxb_g_c / 100. << ",";
								pol_by_pol_file << model_p->gmxb_g_c_gross << ",";
								pol_by_pol_file << model_p->gmxb_ehc_charge / 100. << ",";
								pol_by_pol_file << 0. << ",";
								agg_real_charges=index_pv[PV_HC_AV_TOT];

								agg_dep_fee=index_pv[PV_DEP_FEE_TOT];
								sum_of_premium=index_pv[PV_DEP_FEE_SUM_TOT];
								Paid_premium_Charges=0.;
								pv_ehc_av_charges=index_pv[PV_EHC_CHARGES_DEU];
								agg_EHC_charges=pv_ehc_av_charges+Paid_premium_Charges+sum_of_premium+agg_dep_fee;
								agg_claims=index_pv[PV_GMDB_TOT]+index_pv[PV_GMIB_TOT]+index_pv[PV_GMAB_TOT];
								pol_by_pol_file << setprecision(15) << agg_real_charges << ",";	
								pol_by_pol_file << setprecision(15) << agg_EHC_charges << ",";	
								pol_by_pol_file << setprecision(15) << agg_claims << ",";	
								pol_by_pol_file << setprecision(15) << pv_ehc_av_charges << ",";	
								pol_by_pol_file << setprecision(15) << agg_dep_fee << ",";	
								pol_by_pol_file << setprecision(15) << sum_of_premium << ",";	
								pol_by_pol_file << setprecision(15) << Paid_premium_Charges << ",";	

								pol_by_pol_file << setprecision(15) << index_pv[PV_GMAB_TOT]  << ",";
								pol_by_pol_file << setprecision(15) << index_pv[PV_GMDB_TOT]  << ",";
								pol_by_pol_file << setprecision(15) << index_pv[PV_GMIB_TOT]  << ",";
								pol_by_pol_file << setprecision(15) << index_pv[PV_GMIB_FONDS_DEU]  << ",";
								pol_by_pol_file << setprecision(15) << 0.  << ",";
								pol_by_pol_file << setprecision(15) << 0.  << ",";

								pol_by_pol_file << setprecision(15) << index_pv[PV_LOV_DEU]   << ",";
								pol_by_pol_file << setprecision(15) << index_pv[PV_ITM_DEU]  << ",";

								pol_by_pol_file << model_p->age_at_valn << ",";
								pol_by_pol_file << model_p->duration_valn << ",";
								pol_by_pol_file << 0. << ",";
								pol_by_pol_file << model_p->sex << ",";
								pol_by_pol_file << model_p->prem_paid << ",";
								pol_by_pol_file << model_p->target_av_split_valn_index0 << ",";
								pol_by_pol_file << model_p->target_av_split_valn_index1 << ",";
								pol_by_pol_file << model_p->target_av_split_valn_index2 << ",";
								pol_by_pol_file << model_p->target_av_split_valn_index3 << ",";
								pol_by_pol_file << model_p->target_av_split_valn_index4 << ",";
								pol_by_pol_file << model_p->target_av_split_valn_index5 << ",";
								pol_by_pol_file << model_p->target_av_split_valn_index6 << ",";
								pol_by_pol_file << model_p->target_av_split_valn_index7 << ",";
								pol_by_pol_file << model_p->target_av_split_valn_index8 << ",";
								pol_by_pol_file << model_p->target_av_split_valn_index9 << ",";
								pol_by_pol_file << model_p->target_av_split_valn_index10 << ",";
								pol_by_pol_file << model_p->target_av_split_valn_index11 << ",";
								pol_by_pol_file << -1 << ",";
								pol_by_pol_file << -1 << ",";
								pol_by_pol_file << -1 << ",";
								pol_by_pol_file << -1 << ",";
								pol_by_pol_file << -1 << ",";
								pol_by_pol_file << -1 << ",";
								pol_by_pol_file << -1 << ",";
								pol_by_pol_file << -1 << ",";
								pol_by_pol_file << -1 << ",";
								pol_by_pol_file << -1 << ",";
								pol_by_pol_file << -1 << ",";
								pol_by_pol_file << -1 << ",";
								pol_by_pol_file << AV0 << ",";
								// TODO display the required fields
								pol_by_pol_file << endl;
							}
							else
							{
								Model_Point_DEU_IADB05 *model_p = dynamic_cast<Model_Point_DEU_IADB05*>(model_points[i]);

								vector<double> index_pv = pvs[i];
								pol_by_pol_file << "V1.0" << ",";
								string country_code = pCK.substr(0,pCK.find("_"));
								pol_by_pol_file << country_code.c_str() << ",";
								pol_by_pol_file << model_p->product.c_str() << ",";
								pol_by_pol_file << model_p->Group.c_str() << ",";
								pol_by_pol_file << pCK.c_str() << ",";
								pol_by_pol_file << model_p->policy_id.c_str() << ",";
								pol_by_pol_file << "1" << ",";
								pol_by_pol_file << "1" << ",";
								pol_by_pol_file << model_p->Gmxb_guaranted_cost << ",";
								pol_by_pol_file << model_p->Hc_av_brutto << ",";
								pol_by_pol_file << 0. << ",";
								pol_by_pol_file << model_p->Gmxb_EHC_cost << ",";
								//double chi=(index_pv[PV_GMDB_TOT]+index_pv[PV_GMIB_TOT]+index_pv[PV_GMAB_TOT])/(index_pv[PV_HC_AV]+index_pv[PV_HC_AV_ADD]+index_pv[PV_HC_AV_PAID_UP]+index_pv[PV_HC_AV_ADD_PAID_UP]+index_pv[PV_DEP_FEE_TOT]+index_pv[PV_DEP_FEE_SUM_TOT]+index_pv[PV_HC_PP_AV]+index_pv[PV_HC_PP_AV_ADD]+index_pv[PV_HC_PP_AV_PAID_UP]+index_pv[PV_HC_PP_ADD_AV_PAID_UP]);
								//pol_by_pol_file << (index_pv[PV_GMDB_TOT]+index_pv[PV_GMIB_TOT]+index_pv[PV_GMAB_TOT])/(index_pv[PV_HC_AV]+index_pv[PV_HC_AV_ADD]+index_pv[PV_HC_AV_PAID_UP]+index_pv[PV_HC_AV_ADD_PAID_UP]+index_pv[PV_DEP_FEE_TOT]+index_pv[PV_DEP_FEE_SUM_TOT]+index_pv[PV_HC_PP_AV]+index_pv[PV_HC_PP_AV_ADD]+index_pv[PV_HC_PP_AV_PAID_UP]+index_pv[PV_HC_PP_ADD_AV_PAID_UP]) << ",";
								agg_real_charges=(index_pv[PV_HC_AV]+index_pv[PV_HC_AV_ADD]+index_pv[PV_HC_AV_PAID_UP]+index_pv[PV_HC_AV_ADD_PAID_UP]);
								pv_ehc_av_charges=agg_real_charges*model_p->Gmxb_EHC_cost;
								agg_EHC_charges=pv_ehc_av_charges+index_pv[PV_DEP_FEE_TOT_CHI]+index_pv[PV_DEP_FEE_SUM_TOT_CHI]+index_pv[PV_HC_PP_AV_TOT_CHI];
								agg_claims=index_pv[PV_GMDB_TOT]+index_pv[PV_GMIB_TOT]+index_pv[PV_GMAB_TOT];
								pol_by_pol_file << setprecision(15) << agg_real_charges << ",";	
								pol_by_pol_file << setprecision(15) << agg_EHC_charges << ",";	
								pol_by_pol_file << setprecision(15) << agg_claims << ",";	
								pol_by_pol_file << setprecision(15) << pv_ehc_av_charges << ",";	
								pol_by_pol_file << setprecision(15) << index_pv[PV_DEP_FEE_TOT_CHI] << ",";	
								pol_by_pol_file << setprecision(15) << index_pv[PV_DEP_FEE_SUM_TOT_CHI] << ",";	
								pol_by_pol_file << setprecision(15) << index_pv[PV_HC_PP_AV_TOT_CHI] << ",";	

								pol_by_pol_file << setprecision(15) << index_pv[PV_GMAB_TOT]  << ",";
								pol_by_pol_file << setprecision(15) << index_pv[PV_GMDB_TOT]  << ",";
								pol_by_pol_file << setprecision(15) << index_pv[PV_GMIB_TOT]  << ",";
								pol_by_pol_file << setprecision(15) << index_pv[PV_GMIB_FONDS_DEU]  << ",";
								pol_by_pol_file << setprecision(15) << 0.  << ",";
								pol_by_pol_file << setprecision(15) << 0.  << ",";

								pol_by_pol_file << setprecision(15) << agg_claims- agg_EHC_charges << ",";
								pol_by_pol_file << setprecision(15) << index_pv[PV_ITM_DEU]  << ",";

								pol_by_pol_file << model_p->Age_at_valn << ",";
								pol_by_pol_file << model_p->Duration_valn<< ",";
								pol_by_pol_file << 0. << ",";
								pol_by_pol_file << model_p->Sex << ",";
								pol_by_pol_file << model_p->Prem_paid << ",";
								pol_by_pol_file << model_p->Target_av_split_valn_index0 << ",";
								pol_by_pol_file << model_p->Target_av_split_valn_index1 << ",";
								pol_by_pol_file << model_p->Target_av_split_valn_index2 << ",";
								pol_by_pol_file << model_p->Target_av_split_valn_index3 << ",";
								pol_by_pol_file << model_p->Target_av_split_valn_index4 << ",";
								pol_by_pol_file << model_p->Target_av_split_valn_index5 << ",";
								pol_by_pol_file << model_p->Target_av_split_valn_index6 << ",";
								pol_by_pol_file << model_p->Target_av_split_valn_index7 << ",";
								pol_by_pol_file << model_p->Target_av_split_valn_index8 << ",";
								pol_by_pol_file << model_p->Target_av_split_valn_index9 << ",";
								pol_by_pol_file << model_p->Target_av_split_valn_index10 << ",";
								pol_by_pol_file << model_p->Target_av_split_valn_index11 << ",";
								pol_by_pol_file << -1 << ",";
								pol_by_pol_file << -1 << ",";
								pol_by_pol_file << -1 << ",";
								pol_by_pol_file << -1 << ",";
								pol_by_pol_file << -1 << ",";
								pol_by_pol_file << -1 << ",";
								pol_by_pol_file << -1 << ",";
								pol_by_pol_file << -1 << ",";
								pol_by_pol_file << -1 << ",";
								pol_by_pol_file << -1 << ",";
								pol_by_pol_file << -1 << ",";
								pol_by_pol_file << -1 << ",";
								pol_by_pol_file << model_p->Av_valn_index0+model_p->Av_valn_index1+model_p->Av_valn_index2+
									model_p->Av_valn_index3+model_p->Av_valn_index4+model_p->Av_valn_index5+model_p->Av_valn_index6+
									model_p->Av_valn_index7+model_p->Av_valn_index8+model_p->Av_valn_index9+model_p->Av_valn_index10+
									model_p->Av_valn_index11 << ",";
								// TODO display the required fields
								pol_by_pol_file << endl;										


							}				
						}
					}
					// Close the file
					pol_by_pol_file.close();
				}
			}
		}


		//! Paidup
		for(map<int, map<int,vector<string>>>::const_iterator iter_scen_pass_num = this->paidup_map_shocks_esg.begin(); 
			iter_scen_pass_num != this->paidup_map_shocks_esg.end(); ++iter_scen_pass_num)
		{
			int scen_pass_n = iter_scen_pass_num->first;

			for(map<int,vector<string>>::const_iterator iter_bucket = iter_scen_pass_num->second.begin(); 
				iter_bucket != iter_scen_pass_num->second.end(); ++iter_bucket)
			{
				int bucket_id = iter_bucket->first;
				vector<string> v_paidup_names = iter_bucket->second;

				for(unsigned int iter_paidup = 0; iter_paidup < v_paidup_names.size(); ++ iter_paidup)
				{
					string sheet_name = v_paidup_names[iter_paidup];
					char pol_by_pol_file_name[MAX_LENGTH_FILE_NAME];

					sprintf(pol_by_pol_file_name, "%s%s_%d_%d_%s.csv", this->summary_configuration->get_policy_by_policy_file_directory().c_str(), 
						this->summary_configuration->get_policy_by_policy_file_name().c_str(), scen_pass_n, bucket_id, sheet_name.c_str());

					ofstream pol_by_pol_file(pol_by_pol_file_name);
					pol_by_pol_file  << "Version,Country,Product,Group,prod_type,POL_ID,HW_Mean_Reversion,HW_volatility,GMXB_G_C_Net,GMXB_G_C_Gross,GMXB_EHC,GMXB_CHI,agg_real_charges,agg_EHC_charges,agg_claims,pv_ehc_av_charges,agg_dep_fee,sum_of_premium,Paid_premium_Charges,PV_GMAB_Claims,PV_GMDB_Claims,PV_GMIB_Claims,PV_GMIB_Fond_Claims,PV_GMWB_Claims,";
					pol_by_pol_file  << "PV_GMSB_Claims,LOV,Policy_moneyness,AGE_VALN,DURATION,GMXB_TYPE2,AX_GENDER,PREM_PAID,SPLIT_IDX0,SPLIT_IDX1,SPLIT_IDX2,SPLIT_IDX3,SPLIT_IDX4,SPLIT_IDX5,SPLIT_IDX6,SPLIT_IDX7,SPLIT_IDX8,SPLIT_IDX9,SPLIT_IDX10,SPLIT_IDX11,GMAB1_VALN_SUMMARISE,GMAB2_VALN_SUMMARISE,GMDB1_VALN_SUMMARISE,GMDB2_VALN_SUMMARISE,GMWB1_VALN_SUMMARISE,GMWB2_VALN_SUMMARISE,GMWB_DEF_P_SUMMARISE,GMWB_RAT_P_SUMMARISE,GMXB_M_C_SUMMARISE,GMXB_A_C_SUMMARISE,AXA_ROLL_R_SUMMARISE,GMWB_WDL_RATE_SUMMARISE,AV0_SUMMARISE" << endl;

					for(map<string, vector<Model_Point*>>::const_iterator iter_mp = mps.begin();
						iter_mp != mps.end(); ++iter_mp)
					{
						string pCK = iter_mp->first;
						vector<Model_Point*> model_points = iter_mp->second;

						vector<vector<double>> pvs = get_pvs_vector_esg2(pCK,
							scen_pass_n,
							bucket_id,
							sheet_name, 
							results_paidup);

						int number_of_mps = model_points.size();
						for(int i = 0; i < number_of_mps ; i++)
						{
							double agg_real_charges=0.;
							double agg_EHC_charges=0.;
							double agg_claims=0.;
							double pv_ehc_av_charges=0.;
							double agg_dep_fee=0.;
							double sum_of_premium=0.;
							double Paid_premium_Charges=0.;

							if( pCK == "DEU_IAB01" || pCK == "DEU_IAB02" || pCK == "DEU_IDB01" || pCK == "DEU_IDB02" )
							{
								Model_Point_DEU *model_p = dynamic_cast<Model_Point_DEU*>(model_points[i]);

								vector<double> index_pv = pvs[i];


								double AV0=0;
								for(int k=0;k<MAXIMUM_NUMBER_OF_INDEXES;k++)
								{
									AV0+=model_p->av_if_array[k];
								}

								pol_by_pol_file << "V1.0" << ",";
								string country_code = pCK.substr(0,pCK.find("_"));
								pol_by_pol_file << country_code.c_str() << ",";
								pol_by_pol_file << model_p->product.c_str() << ",";
								pol_by_pol_file << model_p->group.c_str() << ",";
								pol_by_pol_file << pCK.c_str() << ",";
								pol_by_pol_file << model_p->policy_id.c_str() << ",";
								pol_by_pol_file << "1" << ",";
								pol_by_pol_file << "1" << ",";
								pol_by_pol_file << model_p->gmxb_g_c / 100. << ",";
								pol_by_pol_file << model_p->gmxb_g_c_gross << ",";
								pol_by_pol_file << model_p->gmxb_ehc_charge / 100. << ",";
								pol_by_pol_file << 0. << ",";
								agg_real_charges=index_pv[PV_HC_AV_TOT];
								agg_dep_fee=index_pv[PV_DEP_FEE_TOT];
								sum_of_premium=index_pv[PV_DEP_FEE_SUM_TOT];
								Paid_premium_Charges=0.;
								pv_ehc_av_charges=index_pv[PV_EHC_CHARGES_DEU];
								agg_EHC_charges=pv_ehc_av_charges+Paid_premium_Charges+sum_of_premium+agg_dep_fee;
								agg_claims=index_pv[PV_GMDB_TOT]+index_pv[PV_GMIB_TOT]+index_pv[PV_GMAB_TOT];
								pol_by_pol_file << setprecision(15) << agg_real_charges << ",";	
								pol_by_pol_file << setprecision(15) << agg_EHC_charges << ",";	
								pol_by_pol_file << setprecision(15) << agg_claims << ",";	
								pol_by_pol_file << setprecision(15) << pv_ehc_av_charges << ",";	
								pol_by_pol_file << setprecision(15) << agg_dep_fee << ",";	
								pol_by_pol_file << setprecision(15) << sum_of_premium << ",";	
								pol_by_pol_file << setprecision(15) << Paid_premium_Charges << ",";	

								pol_by_pol_file << setprecision(15) << index_pv[PV_GMAB_TOT]  << ",";
								pol_by_pol_file << setprecision(15) << index_pv[PV_GMDB_TOT]  << ",";
								pol_by_pol_file << setprecision(15) << index_pv[PV_GMIB_TOT]  << ",";
								pol_by_pol_file << setprecision(15) << index_pv[PV_GMIB_FONDS_DEU]  << ",";
								pol_by_pol_file << setprecision(15) << 0.  << ",";
								pol_by_pol_file << setprecision(15) << 0.  << ",";

								pol_by_pol_file << setprecision(15) << index_pv[PV_LOV_DEU]   << ",";
								pol_by_pol_file << setprecision(15) << index_pv[PV_ITM_DEU]  << ",";

								pol_by_pol_file << model_p->age_at_valn << ",";
								pol_by_pol_file << model_p->duration_valn << ",";
								pol_by_pol_file << 0. << ",";
								pol_by_pol_file << model_p->sex << ",";
								pol_by_pol_file << model_p->prem_paid << ",";
								pol_by_pol_file << model_p->target_av_split_valn_index0 << ",";
								pol_by_pol_file << model_p->target_av_split_valn_index1 << ",";
								pol_by_pol_file << model_p->target_av_split_valn_index2 << ",";
								pol_by_pol_file << model_p->target_av_split_valn_index3 << ",";
								pol_by_pol_file << model_p->target_av_split_valn_index4 << ",";
								pol_by_pol_file << model_p->target_av_split_valn_index5 << ",";
								pol_by_pol_file << model_p->target_av_split_valn_index6 << ",";
								pol_by_pol_file << model_p->target_av_split_valn_index7 << ",";
								pol_by_pol_file << model_p->target_av_split_valn_index8 << ",";
								pol_by_pol_file << model_p->target_av_split_valn_index9 << ",";
								pol_by_pol_file << model_p->target_av_split_valn_index10 << ",";
								pol_by_pol_file << model_p->target_av_split_valn_index11 << ",";
								pol_by_pol_file << -1 << ",";
								pol_by_pol_file << -1 << ",";
								pol_by_pol_file << -1 << ",";
								pol_by_pol_file << -1 << ",";
								pol_by_pol_file << -1 << ",";
								pol_by_pol_file << -1 << ",";
								pol_by_pol_file << -1 << ",";
								pol_by_pol_file << -1 << ",";
								pol_by_pol_file << -1 << ",";
								pol_by_pol_file << -1 << ",";
								pol_by_pol_file << -1 << ",";
								pol_by_pol_file << -1 << ",";
								pol_by_pol_file << AV0 << ",";
								// TODO display the required fields
								pol_by_pol_file << endl;


							}
							else
							{
								Model_Point_DEU_IADB05 *model_p = dynamic_cast<Model_Point_DEU_IADB05*>(model_points[i]);

								vector<double> index_pv = pvs[i];
								pol_by_pol_file << "V1.0" << ",";
								string country_code = pCK.substr(0,pCK.find("_"));
								pol_by_pol_file << country_code.c_str() << ",";
								pol_by_pol_file << model_p->product.c_str() << ",";
								pol_by_pol_file << model_p->Group.c_str() << ",";
								pol_by_pol_file << pCK.c_str() << ",";
								pol_by_pol_file << model_p->policy_id.c_str() << ",";
								pol_by_pol_file << "1" << ",";
								pol_by_pol_file << "1" << ",";
								pol_by_pol_file << model_p->Gmxb_guaranted_cost << ",";
								pol_by_pol_file << model_p->Hc_av_brutto << ",";
								pol_by_pol_file << 0. << ",";
								pol_by_pol_file << model_p->Gmxb_EHC_cost << ",";
								//double chi=(index_pv[PV_GMDB_TOT]+index_pv[PV_GMIB_TOT]+index_pv[PV_GMAB_TOT])/(index_pv[PV_HC_AV]+index_pv[PV_HC_AV_ADD]+index_pv[PV_HC_AV_PAID_UP]+index_pv[PV_HC_AV_ADD_PAID_UP]+index_pv[PV_DEP_FEE_TOT]+index_pv[PV_DEP_FEE_SUM_TOT]+index_pv[PV_HC_PP_AV]+index_pv[PV_HC_PP_AV_ADD]+index_pv[PV_HC_PP_AV_PAID_UP]+index_pv[PV_HC_PP_ADD_AV_PAID_UP]);
								//pol_by_pol_file << (index_pv[PV_GMDB_TOT]+index_pv[PV_GMIB_TOT]+index_pv[PV_GMAB_TOT])/(index_pv[PV_HC_AV]+index_pv[PV_HC_AV_ADD]+index_pv[PV_HC_AV_PAID_UP]+index_pv[PV_HC_AV_ADD_PAID_UP]+index_pv[PV_DEP_FEE_TOT]+index_pv[PV_DEP_FEE_SUM_TOT]+index_pv[PV_HC_PP_AV]+index_pv[PV_HC_PP_AV_ADD]+index_pv[PV_HC_PP_AV_PAID_UP]+index_pv[PV_HC_PP_ADD_AV_PAID_UP]) << ",";
								agg_real_charges=(index_pv[PV_HC_AV]+index_pv[PV_HC_AV_ADD]+index_pv[PV_HC_AV_PAID_UP]+index_pv[PV_HC_AV_ADD_PAID_UP]);
								pv_ehc_av_charges=agg_real_charges*model_p->Gmxb_EHC_cost;
								agg_EHC_charges=pv_ehc_av_charges+index_pv[PV_DEP_FEE_TOT_CHI]+index_pv[PV_DEP_FEE_SUM_TOT_CHI]+index_pv[PV_HC_PP_AV_TOT_CHI];
								agg_claims=index_pv[PV_GMDB_TOT]+index_pv[PV_GMIB_TOT]+index_pv[PV_GMAB_TOT];
								pol_by_pol_file << setprecision(15) << agg_real_charges << ",";	
								pol_by_pol_file << setprecision(15) << agg_EHC_charges << ",";	
								pol_by_pol_file << setprecision(15) << agg_claims << ",";	
								pol_by_pol_file << setprecision(15) << pv_ehc_av_charges << ",";	
								pol_by_pol_file << setprecision(15) << index_pv[PV_DEP_FEE_TOT_CHI] << ",";	
								pol_by_pol_file << setprecision(15) << index_pv[PV_DEP_FEE_SUM_TOT_CHI] << ",";	
								pol_by_pol_file << setprecision(15) << index_pv[PV_HC_PP_AV_TOT_CHI] << ",";	

								pol_by_pol_file << setprecision(15) << index_pv[PV_GMAB_TOT]  << ",";
								pol_by_pol_file << setprecision(15) << index_pv[PV_GMDB_TOT]  << ",";
								pol_by_pol_file << setprecision(15) << index_pv[PV_GMIB_TOT]  << ",";
								pol_by_pol_file << setprecision(15) << index_pv[PV_GMIB_FONDS_DEU]  << ",";
								pol_by_pol_file << setprecision(15) << 0.  << ",";
								pol_by_pol_file << setprecision(15) << 0.  << ",";

								pol_by_pol_file << setprecision(15) << agg_claims- agg_EHC_charges << ",";
								pol_by_pol_file << setprecision(15) << index_pv[PV_ITM_DEU]  << ",";

								pol_by_pol_file << model_p->Age_at_valn << ",";
								pol_by_pol_file << model_p->Duration_valn<< ",";
								pol_by_pol_file << 0. << ",";
								pol_by_pol_file << model_p->Sex << ",";
								pol_by_pol_file << model_p->Prem_paid << ",";
								pol_by_pol_file << model_p->Target_av_split_valn_index0 << ",";
								pol_by_pol_file << model_p->Target_av_split_valn_index1 << ",";
								pol_by_pol_file << model_p->Target_av_split_valn_index2 << ",";
								pol_by_pol_file << model_p->Target_av_split_valn_index3 << ",";
								pol_by_pol_file << model_p->Target_av_split_valn_index4 << ",";
								pol_by_pol_file << model_p->Target_av_split_valn_index5 << ",";
								pol_by_pol_file << model_p->Target_av_split_valn_index6 << ",";
								pol_by_pol_file << model_p->Target_av_split_valn_index7 << ",";
								pol_by_pol_file << model_p->Target_av_split_valn_index8 << ",";
								pol_by_pol_file << model_p->Target_av_split_valn_index9 << ",";
								pol_by_pol_file << model_p->Target_av_split_valn_index10 << ",";
								pol_by_pol_file << model_p->Target_av_split_valn_index11 << ",";
								pol_by_pol_file << -1 << ",";
								pol_by_pol_file << -1 << ",";
								pol_by_pol_file << -1 << ",";
								pol_by_pol_file << -1 << ",";
								pol_by_pol_file << -1 << ",";
								pol_by_pol_file << -1 << ",";
								pol_by_pol_file << -1 << ",";
								pol_by_pol_file << -1 << ",";
								pol_by_pol_file << -1 << ",";
								pol_by_pol_file << -1 << ",";
								pol_by_pol_file << -1 << ",";
								pol_by_pol_file << -1 << ",";
								pol_by_pol_file << model_p->Av_valn_index0+model_p->Av_valn_index1+model_p->Av_valn_index2+
									model_p->Av_valn_index3+model_p->Av_valn_index4+model_p->Av_valn_index5+model_p->Av_valn_index6+
									model_p->Av_valn_index7+model_p->Av_valn_index8+model_p->Av_valn_index9+model_p->Av_valn_index10+
									model_p->Av_valn_index11 << ",";
								// TODO display the required fields
								pol_by_pol_file << endl;										
							}				
						}
					}
					// Close the file
					pol_by_pol_file.close();
				}
			}
		}



		//electoion
		for(map<int, map<int,vector<string>>>::const_iterator iter_scen_pass_num = this->election_map_shocks_esg.begin(); 
			iter_scen_pass_num != this->election_map_shocks_esg.end(); ++iter_scen_pass_num)
		{
			int scen_pass_n = iter_scen_pass_num->first;

			for(map<int,vector<string>>::const_iterator iter_bucket = iter_scen_pass_num->second.begin(); 
				iter_bucket != iter_scen_pass_num->second.end(); ++iter_bucket)
			{
				int bucket_id = iter_bucket->first;
				vector<string> v_election_names = iter_bucket->second;

				for(unsigned int iter_election = 0; iter_election < v_election_names.size(); ++ iter_election)
				{
					string sheet_name = v_election_names[iter_election];
					char pol_by_pol_file_name[MAX_LENGTH_FILE_NAME];

					sprintf(pol_by_pol_file_name, "%s%s_%d_%d_%s.csv", this->summary_configuration->get_policy_by_policy_file_directory().c_str(), 
						this->summary_configuration->get_policy_by_policy_file_name().c_str(), scen_pass_n, bucket_id, sheet_name.c_str());

					ofstream pol_by_pol_file(pol_by_pol_file_name);
					pol_by_pol_file  << "Version,Country,Product,Group,prod_type,POL_ID,HW_Mean_Reversion,HW_volatility,GMXB_G_C_Net,GMXB_G_C_Gross,GMXB_EHC,GMXB_CHI,agg_real_charges,agg_EHC_charges,agg_claims,pv_ehc_av_charges,agg_dep_fee,sum_of_premium,Paid_premium_Charges,PV_GMAB_Claims,PV_GMDB_Claims,PV_GMIB_Claims,PV_GMIB_Fond_Claims,PV_GMWB_Claims,";
					pol_by_pol_file  << "PV_GMSB_Claims,LOV,Policy_moneyness,AGE_VALN,DURATION,GMXB_TYPE2,AX_GENDER,PREM_PAID,SPLIT_IDX0,SPLIT_IDX1,SPLIT_IDX2,SPLIT_IDX3,SPLIT_IDX4,SPLIT_IDX5,SPLIT_IDX6,SPLIT_IDX7,SPLIT_IDX8,SPLIT_IDX9,SPLIT_IDX10,SPLIT_IDX11,GMAB1_VALN_SUMMARISE,GMAB2_VALN_SUMMARISE,GMDB1_VALN_SUMMARISE,GMDB2_VALN_SUMMARISE,GMWB1_VALN_SUMMARISE,GMWB2_VALN_SUMMARISE,GMWB_DEF_P_SUMMARISE,GMWB_RAT_P_SUMMARISE,GMXB_M_C_SUMMARISE,GMXB_A_C_SUMMARISE,AXA_ROLL_R_SUMMARISE,GMWB_WDL_RATE_SUMMARISE,AV0_SUMMARISE" << endl;

					for(map<string, vector<Model_Point*>>::const_iterator iter_mp = mps.begin();
						iter_mp != mps.end(); ++iter_mp)
					{
						string pCK = iter_mp->first;
						vector<Model_Point*> model_points = iter_mp->second;

						vector<vector<double>> pvs = get_pvs_vector_esg2(pCK,
							scen_pass_n,
							bucket_id,
							sheet_name, 
							results_election);

						int number_of_mps = model_points.size();
						for(int i = 0; i < number_of_mps ; i++)
						{
							double agg_real_charges=0.;
							double agg_EHC_charges=0.;
							double agg_claims=0.;
							double pv_ehc_av_charges=0.;
							double agg_dep_fee=0.;
							double sum_of_premium=0.;
							double Paid_premium_Charges=0.;

							if( pCK == "DEU_IAB01" || pCK == "DEU_IAB02" || pCK == "DEU_IDB01" || pCK == "DEU_IDB02" )
							{
								Model_Point_DEU *model_p = dynamic_cast<Model_Point_DEU*>(model_points[i]);

								vector<double> index_pv = pvs[i];

								double AV0=0;
								for(int k=0;k<MAXIMUM_NUMBER_OF_INDEXES;k++)
								{
									AV0+=model_p->av_if_array[k];
								}

								pol_by_pol_file << "V1.0" << ",";
								string country_code = pCK.substr(0,pCK.find("_"));
								pol_by_pol_file << country_code.c_str() << ",";
								pol_by_pol_file << model_p->product.c_str() << ",";
								pol_by_pol_file << model_p->group.c_str() << ",";
								pol_by_pol_file << pCK.c_str() << ",";
								pol_by_pol_file << model_p->policy_id.c_str() << ",";
								pol_by_pol_file << "1" << ",";
								pol_by_pol_file << "1" << ",";
								pol_by_pol_file << model_p->gmxb_g_c / 100. << ",";
								pol_by_pol_file << model_p->gmxb_g_c_gross << ",";
								pol_by_pol_file << model_p->gmxb_ehc_charge / 100. << ",";
								pol_by_pol_file << 0. << ",";
								agg_real_charges=index_pv[PV_HC_AV_TOT];
								agg_dep_fee=index_pv[PV_DEP_FEE_TOT];
								sum_of_premium=index_pv[PV_DEP_FEE_SUM_TOT];
								Paid_premium_Charges=0.;
								pv_ehc_av_charges=index_pv[PV_EHC_CHARGES_DEU];
								agg_EHC_charges=pv_ehc_av_charges+Paid_premium_Charges+sum_of_premium+agg_dep_fee;
								agg_claims=index_pv[PV_GMDB_TOT]+index_pv[PV_GMIB_TOT]+index_pv[PV_GMAB_TOT];
								pol_by_pol_file << setprecision(15) << agg_real_charges << ",";	
								pol_by_pol_file << setprecision(15) << agg_EHC_charges << ",";	
								pol_by_pol_file << setprecision(15) << agg_claims << ",";	
								pol_by_pol_file << setprecision(15) << pv_ehc_av_charges << ",";	
								pol_by_pol_file << setprecision(15) << agg_dep_fee << ",";	
								pol_by_pol_file << setprecision(15) << sum_of_premium << ",";	
								pol_by_pol_file << setprecision(15) << Paid_premium_Charges << ",";	

								pol_by_pol_file << setprecision(15) << index_pv[PV_GMAB_TOT]  << ",";
								pol_by_pol_file << setprecision(15) << index_pv[PV_GMDB_TOT]  << ",";
								pol_by_pol_file << setprecision(15) << index_pv[PV_GMIB_TOT]  << ",";
								pol_by_pol_file << setprecision(15) << index_pv[PV_GMIB_FONDS_DEU]  << ",";
								pol_by_pol_file << setprecision(15) << 0.  << ",";
								pol_by_pol_file << setprecision(15) << 0.  << ",";

								pol_by_pol_file << setprecision(15) << index_pv[PV_LOV_DEU]   << ",";
								pol_by_pol_file << setprecision(15) << index_pv[PV_ITM_DEU]  << ",";

								pol_by_pol_file << model_p->age_at_valn << ",";
								pol_by_pol_file << model_p->duration_valn << ",";
								pol_by_pol_file << 0. << ",";
								pol_by_pol_file << model_p->sex << ",";
								pol_by_pol_file << model_p->prem_paid << ",";
								pol_by_pol_file << model_p->target_av_split_valn_index0 << ",";
								pol_by_pol_file << model_p->target_av_split_valn_index1 << ",";
								pol_by_pol_file << model_p->target_av_split_valn_index2 << ",";
								pol_by_pol_file << model_p->target_av_split_valn_index3 << ",";
								pol_by_pol_file << model_p->target_av_split_valn_index4 << ",";
								pol_by_pol_file << model_p->target_av_split_valn_index5 << ",";
								pol_by_pol_file << model_p->target_av_split_valn_index6 << ",";
								pol_by_pol_file << model_p->target_av_split_valn_index7 << ",";
								pol_by_pol_file << model_p->target_av_split_valn_index8 << ",";
								pol_by_pol_file << model_p->target_av_split_valn_index9 << ",";
								pol_by_pol_file << model_p->target_av_split_valn_index10 << ",";
								pol_by_pol_file << model_p->target_av_split_valn_index11 << ",";
								pol_by_pol_file << -1 << ",";
								pol_by_pol_file << -1 << ",";
								pol_by_pol_file << -1 << ",";
								pol_by_pol_file << -1 << ",";
								pol_by_pol_file << -1 << ",";
								pol_by_pol_file << -1 << ",";
								pol_by_pol_file << -1 << ",";
								pol_by_pol_file << -1 << ",";
								pol_by_pol_file << -1 << ",";
								pol_by_pol_file << -1 << ",";
								pol_by_pol_file << -1 << ",";
								pol_by_pol_file << -1 << ",";
								pol_by_pol_file << AV0 << ",";
								// TODO display the required fields
								pol_by_pol_file << endl;


							}
							else
							{
								Model_Point_DEU_IADB05 *model_p = dynamic_cast<Model_Point_DEU_IADB05*>(model_points[i]);

								vector<double> index_pv = pvs[i];
								pol_by_pol_file << "V1.0" << ",";
								string country_code = pCK.substr(0,pCK.find("_"));
								pol_by_pol_file << country_code.c_str() << ",";
								pol_by_pol_file << model_p->product.c_str() << ",";
								pol_by_pol_file << model_p->Group.c_str() << ",";
								pol_by_pol_file << pCK.c_str() << ",";
								pol_by_pol_file << model_p->policy_id.c_str() << ",";
								pol_by_pol_file << "1" << ",";
								pol_by_pol_file << "1" << ",";
								pol_by_pol_file << model_p->Gmxb_guaranted_cost << ",";
								pol_by_pol_file << model_p->Hc_av_brutto << ",";
								pol_by_pol_file << 0. << ",";
								pol_by_pol_file << model_p->Gmxb_EHC_cost << ",";
								//double chi=(index_pv[PV_GMDB_TOT]+index_pv[PV_GMIB_TOT]+index_pv[PV_GMAB_TOT])/(index_pv[PV_HC_AV]+index_pv[PV_HC_AV_ADD]+index_pv[PV_HC_AV_PAID_UP]+index_pv[PV_HC_AV_ADD_PAID_UP]+index_pv[PV_DEP_FEE_TOT]+index_pv[PV_DEP_FEE_SUM_TOT]+index_pv[PV_HC_PP_AV]+index_pv[PV_HC_PP_AV_ADD]+index_pv[PV_HC_PP_AV_PAID_UP]+index_pv[PV_HC_PP_ADD_AV_PAID_UP]);
								//pol_by_pol_file << (index_pv[PV_GMDB_TOT]+index_pv[PV_GMIB_TOT]+index_pv[PV_GMAB_TOT])/(index_pv[PV_HC_AV]+index_pv[PV_HC_AV_ADD]+index_pv[PV_HC_AV_PAID_UP]+index_pv[PV_HC_AV_ADD_PAID_UP]+index_pv[PV_DEP_FEE_TOT]+index_pv[PV_DEP_FEE_SUM_TOT]+index_pv[PV_HC_PP_AV]+index_pv[PV_HC_PP_AV_ADD]+index_pv[PV_HC_PP_AV_PAID_UP]+index_pv[PV_HC_PP_ADD_AV_PAID_UP]) << ",";
								agg_real_charges=(index_pv[PV_HC_AV]+index_pv[PV_HC_AV_ADD]+index_pv[PV_HC_AV_PAID_UP]+index_pv[PV_HC_AV_ADD_PAID_UP]);
								pv_ehc_av_charges=agg_real_charges*model_p->Gmxb_EHC_cost;
								agg_EHC_charges=pv_ehc_av_charges+index_pv[PV_DEP_FEE_TOT_CHI]+index_pv[PV_DEP_FEE_SUM_TOT_CHI]+index_pv[PV_HC_PP_AV_TOT_CHI];
								agg_claims=index_pv[PV_GMDB_TOT]+index_pv[PV_GMIB_TOT]+index_pv[PV_GMAB_TOT];
								pol_by_pol_file << setprecision(15) << agg_real_charges << ",";	
								pol_by_pol_file << setprecision(15) << agg_EHC_charges << ",";	
								pol_by_pol_file << setprecision(15) << agg_claims << ",";	
								pol_by_pol_file << setprecision(15) << pv_ehc_av_charges << ",";	
								pol_by_pol_file << setprecision(15) << index_pv[PV_DEP_FEE_TOT_CHI] << ",";	
								pol_by_pol_file << setprecision(15) << index_pv[PV_DEP_FEE_SUM_TOT_CHI] << ",";	
								pol_by_pol_file << setprecision(15) << index_pv[PV_HC_PP_AV_TOT_CHI] << ",";	

								pol_by_pol_file << setprecision(15) << index_pv[PV_GMAB_TOT]  << ",";
								pol_by_pol_file << setprecision(15) << index_pv[PV_GMDB_TOT]  << ",";
								pol_by_pol_file << setprecision(15) << index_pv[PV_GMIB_TOT]  << ",";
								pol_by_pol_file << setprecision(15) << index_pv[PV_GMIB_FONDS_DEU]  << ",";
								pol_by_pol_file << setprecision(15) << 0.  << ",";
								pol_by_pol_file << setprecision(15) << 0.  << ",";

								pol_by_pol_file << setprecision(15) << agg_claims- agg_EHC_charges << ",";
								pol_by_pol_file << setprecision(15) << index_pv[PV_ITM_DEU]  << ",";

								pol_by_pol_file << model_p->Age_at_valn << ",";
								pol_by_pol_file << model_p->Duration_valn<< ",";
								pol_by_pol_file << 0. << ",";
								pol_by_pol_file << model_p->Sex << ",";
								pol_by_pol_file << model_p->Prem_paid << ",";
								pol_by_pol_file << model_p->Target_av_split_valn_index0 << ",";
								pol_by_pol_file << model_p->Target_av_split_valn_index1 << ",";
								pol_by_pol_file << model_p->Target_av_split_valn_index2 << ",";
								pol_by_pol_file << model_p->Target_av_split_valn_index3 << ",";
								pol_by_pol_file << model_p->Target_av_split_valn_index4 << ",";
								pol_by_pol_file << model_p->Target_av_split_valn_index5 << ",";
								pol_by_pol_file << model_p->Target_av_split_valn_index6 << ",";
								pol_by_pol_file << model_p->Target_av_split_valn_index7 << ",";
								pol_by_pol_file << model_p->Target_av_split_valn_index8 << ",";
								pol_by_pol_file << model_p->Target_av_split_valn_index9 << ",";
								pol_by_pol_file << model_p->Target_av_split_valn_index10 << ",";
								pol_by_pol_file << model_p->Target_av_split_valn_index11 << ",";
								pol_by_pol_file << -1 << ",";
								pol_by_pol_file << -1 << ",";
								pol_by_pol_file << -1 << ",";
								pol_by_pol_file << -1 << ",";
								pol_by_pol_file << -1 << ",";
								pol_by_pol_file << -1 << ",";
								pol_by_pol_file << -1 << ",";
								pol_by_pol_file << -1 << ",";
								pol_by_pol_file << -1 << ",";
								pol_by_pol_file << -1 << ",";
								pol_by_pol_file << -1 << ",";
								pol_by_pol_file << -1 << ",";
								pol_by_pol_file << model_p->Av_valn_index0+model_p->Av_valn_index1+model_p->Av_valn_index2+
									model_p->Av_valn_index3+model_p->Av_valn_index4+model_p->Av_valn_index5+model_p->Av_valn_index6+
									model_p->Av_valn_index7+model_p->Av_valn_index8+model_p->Av_valn_index9+model_p->Av_valn_index10+
									model_p->Av_valn_index11 << ",";
								// TODO display the required fields
								pol_by_pol_file << endl;									


							}				
						}
					}
					// Close the file
					pol_by_pol_file.close();
				}
			}
		}



		//! Mortality
		for(map<int, map<int,vector<string>>>::const_iterator iter_scen_pass_num = this->mortality_map_shocks_esg.begin(); 
			iter_scen_pass_num != this->mortality_map_shocks_esg.end(); ++iter_scen_pass_num)
		{
			int scen_pass_n = iter_scen_pass_num->first;

			for(map<int,vector<string>>::const_iterator iter_bucket = iter_scen_pass_num->second.begin(); 
				iter_bucket != iter_scen_pass_num->second.end(); ++iter_bucket)
			{
				int bucket_id = iter_bucket->first;
				vector<string> v_mortality_names = iter_bucket->second;

				for(unsigned int iter_mortality = 0; iter_mortality < v_mortality_names.size(); ++ iter_mortality)
				{
					string sheet_name = v_mortality_names[iter_mortality];
					char pol_by_pol_file_name[MAX_LENGTH_FILE_NAME];

					sprintf(pol_by_pol_file_name, "%s%s_%d_%d_%s.csv", this->summary_configuration->get_policy_by_policy_file_directory().c_str(), 
						this->summary_configuration->get_policy_by_policy_file_name().c_str(), scen_pass_n, bucket_id, sheet_name.c_str());

					ofstream pol_by_pol_file(pol_by_pol_file_name);
					pol_by_pol_file  << "Version,Country,Product,Group,prod_type,POL_ID,HW_Mean_Reversion,HW_volatility,GMXB_G_C_Net,GMXB_G_C_Gross,GMXB_EHC,GMXB_CHI,agg_real_charges,agg_EHC_charges,agg_claims,pv_ehc_av_charges,agg_dep_fee,sum_of_premium,Paid_premium_Charges,PV_GMAB_Claims,PV_GMDB_Claims,PV_GMIB_Claims,PV_GMIB_Fond_Claims,PV_GMWB_Claims,";
					pol_by_pol_file  << "PV_GMSB_Claims,LOV,Policy_moneyness,AGE_VALN,DURATION,GMXB_TYPE2,AX_GENDER,PREM_PAID,SPLIT_IDX0,SPLIT_IDX1,SPLIT_IDX2,SPLIT_IDX3,SPLIT_IDX4,SPLIT_IDX5,SPLIT_IDX6,SPLIT_IDX7,SPLIT_IDX8,SPLIT_IDX9,SPLIT_IDX10,SPLIT_IDX11,GMAB1_VALN_SUMMARISE,GMAB2_VALN_SUMMARISE,GMDB1_VALN_SUMMARISE,GMDB2_VALN_SUMMARISE,GMWB1_VALN_SUMMARISE,GMWB2_VALN_SUMMARISE,GMWB_DEF_P_SUMMARISE,GMWB_RAT_P_SUMMARISE,GMXB_M_C_SUMMARISE,GMXB_A_C_SUMMARISE,AXA_ROLL_R_SUMMARISE,GMWB_WDL_RATE_SUMMARISE,AV0_SUMMARISE" << endl;

					for(map<string, vector<Model_Point*>>::const_iterator iter_mp = mps.begin();
						iter_mp != mps.end(); ++iter_mp)
					{
						string pCK = iter_mp->first;
						vector<Model_Point*> model_points = iter_mp->second;

						vector<vector<double>> pvs = get_pvs_vector_esg2(pCK,
							scen_pass_n,
							bucket_id,
							sheet_name, 
							results_mort);

						int number_of_mps = model_points.size();
						for(int i = 0; i < number_of_mps ; i++)
						{
							double agg_real_charges=0.;
							double agg_EHC_charges=0.;
							double agg_claims=0.;
							double pv_ehc_av_charges=0.;
							double agg_dep_fee=0.;
							double sum_of_premium=0.;
							double Paid_premium_Charges=0.;

							if( pCK == "DEU_IAB01" || pCK == "DEU_IAB02" || pCK == "DEU_IDB01" || pCK == "DEU_IDB02" )
							{
								Model_Point_DEU *model_p = dynamic_cast<Model_Point_DEU*>(model_points[i]);

								vector<double> index_pv = pvs[i];

								double AV0=0;
								for(int k=0;k<MAXIMUM_NUMBER_OF_INDEXES;k++)
								{
									AV0+=model_p->av_if_array[k];
								}

								pol_by_pol_file << "V1.0" << ",";
								string country_code = pCK.substr(0,pCK.find("_"));
								pol_by_pol_file << country_code.c_str() << ",";
								pol_by_pol_file << model_p->product.c_str() << ",";
								pol_by_pol_file << model_p->group.c_str() << ",";
								pol_by_pol_file << pCK.c_str() << ",";
								pol_by_pol_file << model_p->policy_id.c_str() << ",";
								pol_by_pol_file << "1" << ",";
								pol_by_pol_file << "1" << ",";
								pol_by_pol_file << model_p->gmxb_g_c / 100. << ",";
								pol_by_pol_file << model_p->gmxb_g_c_gross << ",";
								pol_by_pol_file << model_p->gmxb_ehc_charge / 100. << ",";
								pol_by_pol_file << 0. << ",";
								agg_real_charges=index_pv[PV_HC_AV_TOT];
								agg_dep_fee=index_pv[PV_DEP_FEE_TOT];
								sum_of_premium=index_pv[PV_DEP_FEE_SUM_TOT];
								Paid_premium_Charges=0.;
								pv_ehc_av_charges=index_pv[PV_EHC_CHARGES_DEU];
								agg_EHC_charges=pv_ehc_av_charges+Paid_premium_Charges+sum_of_premium+agg_dep_fee;
								agg_claims=index_pv[PV_GMDB_TOT]+index_pv[PV_GMIB_TOT]+index_pv[PV_GMAB_TOT];
								pol_by_pol_file << setprecision(15) << agg_real_charges << ",";	
								pol_by_pol_file << setprecision(15) << agg_EHC_charges << ",";	
								pol_by_pol_file << setprecision(15) << agg_claims << ",";	
								pol_by_pol_file << setprecision(15) << pv_ehc_av_charges << ",";	
								pol_by_pol_file << setprecision(15) << agg_dep_fee << ",";	
								pol_by_pol_file << setprecision(15) << sum_of_premium << ",";	
								pol_by_pol_file << setprecision(15) << Paid_premium_Charges << ",";	

								pol_by_pol_file << setprecision(15) << index_pv[PV_GMAB_TOT]  << ",";
								pol_by_pol_file << setprecision(15) << index_pv[PV_GMDB_TOT]  << ",";
								pol_by_pol_file << setprecision(15) << index_pv[PV_GMIB_TOT]  << ",";
								pol_by_pol_file << setprecision(15) << index_pv[PV_GMIB_FONDS_DEU]  << ",";
								pol_by_pol_file << setprecision(15) << 0.  << ",";
								pol_by_pol_file << setprecision(15) << 0.  << ",";

								pol_by_pol_file << setprecision(15) << index_pv[PV_LOV_DEU]   << ",";
								pol_by_pol_file << setprecision(15) << index_pv[PV_ITM_DEU]  << ",";

								pol_by_pol_file << model_p->age_at_valn << ",";
								pol_by_pol_file << model_p->duration_valn << ",";
								pol_by_pol_file << 0. << ",";
								pol_by_pol_file << model_p->sex << ",";
								pol_by_pol_file << model_p->prem_paid << ",";
								pol_by_pol_file << model_p->target_av_split_valn_index0 << ",";
								pol_by_pol_file << model_p->target_av_split_valn_index1 << ",";
								pol_by_pol_file << model_p->target_av_split_valn_index2 << ",";
								pol_by_pol_file << model_p->target_av_split_valn_index3 << ",";
								pol_by_pol_file << model_p->target_av_split_valn_index4 << ",";
								pol_by_pol_file << model_p->target_av_split_valn_index5 << ",";
								pol_by_pol_file << model_p->target_av_split_valn_index6 << ",";
								pol_by_pol_file << model_p->target_av_split_valn_index7 << ",";
								pol_by_pol_file << model_p->target_av_split_valn_index8 << ",";
								pol_by_pol_file << model_p->target_av_split_valn_index9 << ",";
								pol_by_pol_file << model_p->target_av_split_valn_index10 << ",";
								pol_by_pol_file << model_p->target_av_split_valn_index11 << ",";
								pol_by_pol_file << -1 << ",";
								pol_by_pol_file << -1 << ",";
								pol_by_pol_file << -1 << ",";
								pol_by_pol_file << -1 << ",";
								pol_by_pol_file << -1 << ",";
								pol_by_pol_file << -1 << ",";
								pol_by_pol_file << -1 << ",";
								pol_by_pol_file << -1 << ",";
								pol_by_pol_file << -1 << ",";
								pol_by_pol_file << -1 << ",";
								pol_by_pol_file << -1 << ",";
								pol_by_pol_file << -1 << ",";
								pol_by_pol_file << AV0 << ",";
								// TODO display the required fields
								pol_by_pol_file << endl;


							}
							else
							{
								Model_Point_DEU_IADB05 *model_p = dynamic_cast<Model_Point_DEU_IADB05*>(model_points[i]);

								vector<double> index_pv = pvs[i];
								pol_by_pol_file << "V1.0" << ",";
								string country_code = pCK.substr(0,pCK.find("_"));
								pol_by_pol_file << country_code.c_str() << ",";
								pol_by_pol_file << model_p->product.c_str() << ",";
								pol_by_pol_file << model_p->Group.c_str() << ",";
								pol_by_pol_file << pCK.c_str() << ",";
								pol_by_pol_file << model_p->policy_id.c_str() << ",";
								pol_by_pol_file << "1" << ",";
								pol_by_pol_file << "1" << ",";
								pol_by_pol_file << model_p->Gmxb_guaranted_cost << ",";
								pol_by_pol_file << model_p->Hc_av_brutto << ",";
								pol_by_pol_file << 0. << ",";
								pol_by_pol_file << model_p->Gmxb_EHC_cost << ",";
								//double chi=(index_pv[PV_GMDB_TOT]+index_pv[PV_GMIB_TOT]+index_pv[PV_GMAB_TOT])/(index_pv[PV_HC_AV]+index_pv[PV_HC_AV_ADD]+index_pv[PV_HC_AV_PAID_UP]+index_pv[PV_HC_AV_ADD_PAID_UP]+index_pv[PV_DEP_FEE_TOT]+index_pv[PV_DEP_FEE_SUM_TOT]+index_pv[PV_HC_PP_AV]+index_pv[PV_HC_PP_AV_ADD]+index_pv[PV_HC_PP_AV_PAID_UP]+index_pv[PV_HC_PP_ADD_AV_PAID_UP]);
								//pol_by_pol_file << (index_pv[PV_GMDB_TOT]+index_pv[PV_GMIB_TOT]+index_pv[PV_GMAB_TOT])/(index_pv[PV_HC_AV]+index_pv[PV_HC_AV_ADD]+index_pv[PV_HC_AV_PAID_UP]+index_pv[PV_HC_AV_ADD_PAID_UP]+index_pv[PV_DEP_FEE_TOT]+index_pv[PV_DEP_FEE_SUM_TOT]+index_pv[PV_HC_PP_AV]+index_pv[PV_HC_PP_AV_ADD]+index_pv[PV_HC_PP_AV_PAID_UP]+index_pv[PV_HC_PP_ADD_AV_PAID_UP]) << ",";
								agg_real_charges=(index_pv[PV_HC_AV]+index_pv[PV_HC_AV_ADD]+index_pv[PV_HC_AV_PAID_UP]+index_pv[PV_HC_AV_ADD_PAID_UP]);
								pv_ehc_av_charges=agg_real_charges*model_p->Gmxb_EHC_cost;
								agg_EHC_charges=pv_ehc_av_charges+index_pv[PV_DEP_FEE_TOT_CHI]+index_pv[PV_DEP_FEE_SUM_TOT_CHI]+index_pv[PV_HC_PP_AV_TOT_CHI];
								agg_claims=index_pv[PV_GMDB_TOT]+index_pv[PV_GMIB_TOT]+index_pv[PV_GMAB_TOT];
								pol_by_pol_file << setprecision(15) << agg_real_charges << ",";	
								pol_by_pol_file << setprecision(15) << agg_EHC_charges << ",";	
								pol_by_pol_file << setprecision(15) << agg_claims << ",";	
								pol_by_pol_file << setprecision(15) << pv_ehc_av_charges << ",";	
								pol_by_pol_file << setprecision(15) << index_pv[PV_DEP_FEE_TOT_CHI] << ",";	
								pol_by_pol_file << setprecision(15) << index_pv[PV_DEP_FEE_SUM_TOT_CHI] << ",";	
								pol_by_pol_file << setprecision(15) << index_pv[PV_HC_PP_AV_TOT_CHI] << ",";	

								pol_by_pol_file << setprecision(15) << index_pv[PV_GMAB_TOT]  << ",";
								pol_by_pol_file << setprecision(15) << index_pv[PV_GMDB_TOT]  << ",";
								pol_by_pol_file << setprecision(15) << index_pv[PV_GMIB_TOT]  << ",";
								pol_by_pol_file << setprecision(15) << index_pv[PV_GMIB_FONDS_DEU]  << ",";
								pol_by_pol_file << setprecision(15) << 0.  << ",";
								pol_by_pol_file << setprecision(15) << 0.  << ",";

								pol_by_pol_file << setprecision(15) << agg_claims- agg_EHC_charges << ",";
								pol_by_pol_file << setprecision(15) << index_pv[PV_ITM_DEU]  << ",";

								pol_by_pol_file << model_p->Age_at_valn << ",";
								pol_by_pol_file << model_p->Duration_valn<< ",";
								pol_by_pol_file << 0. << ",";
								pol_by_pol_file << model_p->Sex << ",";
								pol_by_pol_file << model_p->Prem_paid << ",";
								pol_by_pol_file << model_p->Target_av_split_valn_index0 << ",";
								pol_by_pol_file << model_p->Target_av_split_valn_index1 << ",";
								pol_by_pol_file << model_p->Target_av_split_valn_index2 << ",";
								pol_by_pol_file << model_p->Target_av_split_valn_index3 << ",";
								pol_by_pol_file << model_p->Target_av_split_valn_index4 << ",";
								pol_by_pol_file << model_p->Target_av_split_valn_index5 << ",";
								pol_by_pol_file << model_p->Target_av_split_valn_index6 << ",";
								pol_by_pol_file << model_p->Target_av_split_valn_index7 << ",";
								pol_by_pol_file << model_p->Target_av_split_valn_index8 << ",";
								pol_by_pol_file << model_p->Target_av_split_valn_index9 << ",";
								pol_by_pol_file << model_p->Target_av_split_valn_index10 << ",";
								pol_by_pol_file << model_p->Target_av_split_valn_index11 << ",";
								pol_by_pol_file << -1 << ",";
								pol_by_pol_file << -1 << ",";
								pol_by_pol_file << -1 << ",";
								pol_by_pol_file << -1 << ",";
								pol_by_pol_file << -1 << ",";
								pol_by_pol_file << -1 << ",";
								pol_by_pol_file << -1 << ",";
								pol_by_pol_file << -1 << ",";
								pol_by_pol_file << -1 << ",";
								pol_by_pol_file << -1 << ",";
								pol_by_pol_file << -1 << ",";
								pol_by_pol_file << -1 << ",";
								pol_by_pol_file << model_p->Av_valn_index0+model_p->Av_valn_index1+model_p->Av_valn_index2+
									model_p->Av_valn_index3+model_p->Av_valn_index4+model_p->Av_valn_index5+model_p->Av_valn_index6+
									model_p->Av_valn_index7+model_p->Av_valn_index8+model_p->Av_valn_index9+model_p->Av_valn_index10+
									model_p->Av_valn_index11 << ",";
								// TODO display the required fields
								pol_by_pol_file << endl;											
							}				
						}
					}
					// Close the file
					pol_by_pol_file.close();
				}
			}
		}


		//longetivity
		for(map<int, map<int,bool>>::const_iterator iter_scen_pass_num = this->longevity_map_esg.begin(); 
			iter_scen_pass_num != this->longevity_map_esg.end(); ++iter_scen_pass_num)
		{
			int scen_pass_n = iter_scen_pass_num->first;
			map<int,bool> v_bucket = iter_scen_pass_num->second;

			for(map<int,bool>::const_iterator iter_bucket = iter_scen_pass_num->second.begin(); iter_bucket!= iter_scen_pass_num->second.end(); ++iter_bucket)
			{

				int bucket_id = iter_bucket->first;

				if (iter_bucket->second)
				{

					char pol_by_pol_file_name[MAX_LENGTH_FILE_NAME];
					sprintf(pol_by_pol_file_name, "%s%s_%d_%d_longevity.csv", this->summary_configuration->get_policy_by_policy_file_directory().c_str(), 
						this->summary_configuration->get_policy_by_policy_file_name().c_str(), scen_pass_n, bucket_id);

					ofstream pol_by_pol_file(pol_by_pol_file_name);
					pol_by_pol_file  << "Version,Country,Product,Group,prod_type,POL_ID,HW_Mean_Reversion,HW_volatility,GMXB_G_C_Net,GMXB_G_C_Gross,GMXB_EHC,GMXB_CHI,agg_real_charges,agg_EHC_charges,agg_claims,pv_ehc_av_charges,agg_dep_fee,sum_of_premium,Paid_premium_Charges,PV_GMAB_Claims,PV_GMDB_Claims,PV_GMIB_Claims,PV_GMIB_Fond_Claims,PV_GMWB_Claims,";
					pol_by_pol_file  << "PV_GMSB_Claims,LOV,Policy_moneyness,AGE_VALN,DURATION,GMXB_TYPE2,AX_GENDER,PREM_PAID,SPLIT_IDX0,SPLIT_IDX1,SPLIT_IDX2,SPLIT_IDX3,SPLIT_IDX4,SPLIT_IDX5,SPLIT_IDX6,SPLIT_IDX7,SPLIT_IDX8,SPLIT_IDX9,SPLIT_IDX10,SPLIT_IDX11,GMAB1_VALN_SUMMARISE,GMAB2_VALN_SUMMARISE,GMDB1_VALN_SUMMARISE,GMDB2_VALN_SUMMARISE,GMWB1_VALN_SUMMARISE,GMWB2_VALN_SUMMARISE,GMWB_DEF_P_SUMMARISE,GMWB_RAT_P_SUMMARISE,GMXB_M_C_SUMMARISE,GMXB_A_C_SUMMARISE,AXA_ROLL_R_SUMMARISE,GMWB_WDL_RATE_SUMMARISE,AV0_SUMMARISE" << endl;

					for(map<string, vector<Model_Point*>>::const_iterator iter_mp = mps.begin();
						iter_mp != mps.end(); ++iter_mp)
					{
						string pCK = iter_mp->first;
						vector<Model_Point*> model_points = iter_mp->second;

						vector<vector<double>> pvs = get_pvs_vector_esg3(pCK,
							scen_pass_n,
							bucket_id,
							results_longevity);

						int number_of_mps = model_points.size();
						for(int i = 0; i < number_of_mps ; i++)
						{
							double agg_real_charges=0.;
							double agg_EHC_charges=0.;
							double agg_claims=0.;
							double pv_ehc_av_charges=0.;
							double agg_dep_fee=0.;
							double sum_of_premium=0.;
							double Paid_premium_Charges=0.;

							if( pCK == "DEU_IAB01" || pCK == "DEU_IAB02" || pCK == "DEU_IDB01" || pCK == "DEU_IDB02" )
							{
								Model_Point_DEU *model_p = dynamic_cast<Model_Point_DEU*>(model_points[i]);

								vector<double> index_pv = pvs[i];

								double AV0=0;
								for(int k=0;k<MAXIMUM_NUMBER_OF_INDEXES;k++)
								{
									AV0+=model_p->av_if_array[k];
								}

								pol_by_pol_file << "V1.0" << ",";
								string country_code = pCK.substr(0,pCK.find("_"));
								pol_by_pol_file << country_code.c_str() << ",";
								pol_by_pol_file << model_p->product.c_str() << ",";
								pol_by_pol_file << model_p->group.c_str() << ",";
								pol_by_pol_file << pCK.c_str() << ",";
								pol_by_pol_file << model_p->policy_id.c_str() << ",";
								pol_by_pol_file << "1" << ",";
								pol_by_pol_file << "1" << ",";
								pol_by_pol_file << model_p->gmxb_g_c / 100. << ",";
								pol_by_pol_file << model_p->gmxb_g_c_gross << ",";
								pol_by_pol_file << model_p->gmxb_ehc_charge / 100. << ",";
								pol_by_pol_file << 0. << ",";
								agg_real_charges=index_pv[PV_HC_AV_TOT];
								agg_dep_fee=index_pv[PV_DEP_FEE_TOT];
								sum_of_premium=index_pv[PV_DEP_FEE_SUM_TOT];
								Paid_premium_Charges=0.;
								pv_ehc_av_charges=index_pv[PV_EHC_CHARGES_DEU];
								agg_EHC_charges=pv_ehc_av_charges+Paid_premium_Charges+sum_of_premium+agg_dep_fee;
								agg_claims=index_pv[PV_GMDB_TOT]+index_pv[PV_GMIB_TOT]+index_pv[PV_GMAB_TOT];
								pol_by_pol_file << setprecision(15) << agg_real_charges << ",";	
								pol_by_pol_file << setprecision(15) << agg_EHC_charges << ",";	
								pol_by_pol_file << setprecision(15) << agg_claims << ",";	
								pol_by_pol_file << setprecision(15) << pv_ehc_av_charges << ",";	
								pol_by_pol_file << setprecision(15) << agg_dep_fee << ",";	
								pol_by_pol_file << setprecision(15) << sum_of_premium << ",";	
								pol_by_pol_file << setprecision(15) << Paid_premium_Charges << ",";	

								pol_by_pol_file << setprecision(15) << index_pv[PV_GMAB_TOT]  << ",";
								pol_by_pol_file << setprecision(15) << index_pv[PV_GMDB_TOT]  << ",";
								pol_by_pol_file << setprecision(15) << index_pv[PV_GMIB_TOT]  << ",";
								pol_by_pol_file << setprecision(15) << index_pv[PV_GMIB_FONDS_DEU]  << ",";
								pol_by_pol_file << setprecision(15) << 0.  << ",";
								pol_by_pol_file << setprecision(15) << 0.  << ",";

								pol_by_pol_file << setprecision(15) << index_pv[PV_LOV_DEU]   << ",";
								pol_by_pol_file << setprecision(15) << index_pv[PV_ITM_DEU]  << ",";

								pol_by_pol_file << model_p->age_at_valn << ",";
								pol_by_pol_file << model_p->duration_valn << ",";
								pol_by_pol_file << 0. << ",";
								pol_by_pol_file << model_p->sex << ",";
								pol_by_pol_file << model_p->prem_paid << ",";
								pol_by_pol_file << model_p->target_av_split_valn_index0 << ",";
								pol_by_pol_file << model_p->target_av_split_valn_index1 << ",";
								pol_by_pol_file << model_p->target_av_split_valn_index2 << ",";
								pol_by_pol_file << model_p->target_av_split_valn_index3 << ",";
								pol_by_pol_file << model_p->target_av_split_valn_index4 << ",";
								pol_by_pol_file << model_p->target_av_split_valn_index5 << ",";
								pol_by_pol_file << model_p->target_av_split_valn_index6 << ",";
								pol_by_pol_file << model_p->target_av_split_valn_index7 << ",";
								pol_by_pol_file << model_p->target_av_split_valn_index8 << ",";
								pol_by_pol_file << model_p->target_av_split_valn_index9 << ",";
								pol_by_pol_file << model_p->target_av_split_valn_index10 << ",";
								pol_by_pol_file << model_p->target_av_split_valn_index11 << ",";
								pol_by_pol_file << -1 << ",";
								pol_by_pol_file << -1 << ",";
								pol_by_pol_file << -1 << ",";
								pol_by_pol_file << -1 << ",";
								pol_by_pol_file << -1 << ",";
								pol_by_pol_file << -1 << ",";
								pol_by_pol_file << -1 << ",";
								pol_by_pol_file << -1 << ",";
								pol_by_pol_file << -1 << ",";
								pol_by_pol_file << -1 << ",";
								pol_by_pol_file << -1 << ",";
								pol_by_pol_file << -1 << ",";
								pol_by_pol_file << AV0 << ",";
								// TODO display the required fields
								pol_by_pol_file << endl;


							}
							else
							{
								Model_Point_DEU_IADB05 *model_p = dynamic_cast<Model_Point_DEU_IADB05*>(model_points[i]);

								vector<double> index_pv = pvs[i];
								pol_by_pol_file << "V1.0" << ",";
								string country_code = pCK.substr(0,pCK.find("_"));
								pol_by_pol_file << country_code.c_str() << ",";
								pol_by_pol_file << model_p->product.c_str() << ",";
								pol_by_pol_file << model_p->Group.c_str() << ",";
								pol_by_pol_file << pCK.c_str() << ",";
								pol_by_pol_file << model_p->policy_id.c_str() << ",";
								pol_by_pol_file << "1" << ",";
								pol_by_pol_file << "1" << ",";
								pol_by_pol_file << model_p->Gmxb_guaranted_cost << ",";
								pol_by_pol_file << model_p->Hc_av_brutto << ",";
								pol_by_pol_file << 0. << ",";
								pol_by_pol_file << model_p->Gmxb_EHC_cost << ",";
								//double chi=(index_pv[PV_GMDB_TOT]+index_pv[PV_GMIB_TOT]+index_pv[PV_GMAB_TOT])/(index_pv[PV_HC_AV]+index_pv[PV_HC_AV_ADD]+index_pv[PV_HC_AV_PAID_UP]+index_pv[PV_HC_AV_ADD_PAID_UP]+index_pv[PV_DEP_FEE_TOT]+index_pv[PV_DEP_FEE_SUM_TOT]+index_pv[PV_HC_PP_AV]+index_pv[PV_HC_PP_AV_ADD]+index_pv[PV_HC_PP_AV_PAID_UP]+index_pv[PV_HC_PP_ADD_AV_PAID_UP]);
								//pol_by_pol_file << (index_pv[PV_GMDB_TOT]+index_pv[PV_GMIB_TOT]+index_pv[PV_GMAB_TOT])/(index_pv[PV_HC_AV]+index_pv[PV_HC_AV_ADD]+index_pv[PV_HC_AV_PAID_UP]+index_pv[PV_HC_AV_ADD_PAID_UP]+index_pv[PV_DEP_FEE_TOT]+index_pv[PV_DEP_FEE_SUM_TOT]+index_pv[PV_HC_PP_AV]+index_pv[PV_HC_PP_AV_ADD]+index_pv[PV_HC_PP_AV_PAID_UP]+index_pv[PV_HC_PP_ADD_AV_PAID_UP]) << ",";
								agg_real_charges=(index_pv[PV_HC_AV]+index_pv[PV_HC_AV_ADD]+index_pv[PV_HC_AV_PAID_UP]+index_pv[PV_HC_AV_ADD_PAID_UP]);
								pv_ehc_av_charges=agg_real_charges*model_p->Gmxb_EHC_cost;
								agg_EHC_charges=pv_ehc_av_charges+index_pv[PV_DEP_FEE_TOT_CHI]+index_pv[PV_DEP_FEE_SUM_TOT_CHI]+index_pv[PV_HC_PP_AV_TOT_CHI];
								agg_claims=index_pv[PV_GMDB_TOT]+index_pv[PV_GMIB_TOT]+index_pv[PV_GMAB_TOT];
								pol_by_pol_file << setprecision(15) << agg_real_charges << ",";	
								pol_by_pol_file << setprecision(15) << agg_EHC_charges << ",";	
								pol_by_pol_file << setprecision(15) << agg_claims << ",";	
								pol_by_pol_file << setprecision(15) << pv_ehc_av_charges << ",";	
								pol_by_pol_file << setprecision(15) << index_pv[PV_DEP_FEE_TOT_CHI] << ",";	
								pol_by_pol_file << setprecision(15) << index_pv[PV_DEP_FEE_SUM_TOT_CHI] << ",";	
								pol_by_pol_file << setprecision(15) << index_pv[PV_HC_PP_AV_TOT_CHI] << ",";	

								pol_by_pol_file << setprecision(15) << index_pv[PV_GMAB_TOT]  << ",";
								pol_by_pol_file << setprecision(15) << index_pv[PV_GMDB_TOT]  << ",";
								pol_by_pol_file << setprecision(15) << index_pv[PV_GMIB_TOT]  << ",";
								pol_by_pol_file << setprecision(15) << index_pv[PV_GMIB_FONDS_DEU]  << ",";
								pol_by_pol_file << setprecision(15) << 0.  << ",";
								pol_by_pol_file << setprecision(15) << 0.  << ",";

								pol_by_pol_file << setprecision(15) << agg_claims- agg_EHC_charges << ",";
								pol_by_pol_file << setprecision(15) << index_pv[PV_ITM_DEU]  << ",";

								pol_by_pol_file << model_p->Age_at_valn << ",";
								pol_by_pol_file << model_p->Duration_valn<< ",";
								pol_by_pol_file << 0. << ",";
								pol_by_pol_file << model_p->Sex << ",";
								pol_by_pol_file << model_p->Prem_paid << ",";
								pol_by_pol_file << model_p->Target_av_split_valn_index0 << ",";
								pol_by_pol_file << model_p->Target_av_split_valn_index1 << ",";
								pol_by_pol_file << model_p->Target_av_split_valn_index2 << ",";
								pol_by_pol_file << model_p->Target_av_split_valn_index3 << ",";
								pol_by_pol_file << model_p->Target_av_split_valn_index4 << ",";
								pol_by_pol_file << model_p->Target_av_split_valn_index5 << ",";
								pol_by_pol_file << model_p->Target_av_split_valn_index6 << ",";
								pol_by_pol_file << model_p->Target_av_split_valn_index7 << ",";
								pol_by_pol_file << model_p->Target_av_split_valn_index8 << ",";
								pol_by_pol_file << model_p->Target_av_split_valn_index9 << ",";
								pol_by_pol_file << model_p->Target_av_split_valn_index10 << ",";
								pol_by_pol_file << model_p->Target_av_split_valn_index11 << ",";
								pol_by_pol_file << -1 << ",";
								pol_by_pol_file << -1 << ",";
								pol_by_pol_file << -1 << ",";
								pol_by_pol_file << -1 << ",";
								pol_by_pol_file << -1 << ",";
								pol_by_pol_file << -1 << ",";
								pol_by_pol_file << -1 << ",";
								pol_by_pol_file << -1 << ",";
								pol_by_pol_file << -1 << ",";
								pol_by_pol_file << -1 << ",";
								pol_by_pol_file << -1 << ",";
								pol_by_pol_file << -1 << ",";
								pol_by_pol_file << model_p->Av_valn_index0+model_p->Av_valn_index1+model_p->Av_valn_index2+
									model_p->Av_valn_index3+model_p->Av_valn_index4+model_p->Av_valn_index5+model_p->Av_valn_index6+
									model_p->Av_valn_index7+model_p->Av_valn_index8+model_p->Av_valn_index9+model_p->Av_valn_index10+
									model_p->Av_valn_index11 << ",";
								// TODO display the required fields
								pol_by_pol_file << endl;										
							}				
						}	
					}
					// Close the file
					pol_by_pol_file.close();
				}
			}
		}

	}



	void init_greek_map(map<int, map<int, map<int, vector<double>>>>& map_of_greek, int mp_number_total, int base_no)
	{	    
		for (map<int, vector<vector<int>>>::const_iterator iter_scen_pass_num = this->index_map_shocks.begin(); 
			iter_scen_pass_num != this->index_map_shocks.end(); ++iter_scen_pass_num)
		{
			int scen_pass_n = iter_scen_pass_num->first;
			if ((scen_pass_n<=SCN_TOTAL*(base_no+1))&&(scen_pass_n>SCN_TOTAL*(base_no)))
			{
				vector<vector<int>> index_shock_array = iter_scen_pass_num->second;
				int index_size_of_shock_array = index_shock_array.size();

				for (int mp_number = 1; mp_number <= mp_number_total; mp_number++)
				{
					for(int s = 0; s < index_size_of_shock_array; s++ )
					{
						int shock_number = this->get_shock_number(index_shock_array, s, MAX_DELTA_SHOCKS_PER_INDEX, MAXIMUM_NUMBER_OF_INDEXES);
						vector<double> v(SIZE_OF_GREEK_SUMMARY_FILE);
						map_of_greek[scen_pass_n][mp_number][shock_number] = v;
					}
				}
			}
		}
	}

	void calculate_EHC(map<int, map<int, map<int, vector<double>>>>& map_of_greek,map<int, map<int, vector<vector<string>>>>& map_of_summary_file,int mp_number_total, int base_no)
	{
		try{
			for (int mp_number = 1; mp_number <= mp_number_total; mp_number++)
			{
				double EHC;


				for (map<int, vector<vector<int>>>::const_iterator iter_scen_pass_num = this->index_map_shocks.begin(); 
					iter_scen_pass_num != this->index_map_shocks.end(); ++iter_scen_pass_num)
				{
					int scen_pass_n = iter_scen_pass_num->first;
					if ((scen_pass_n<=SCN_TOTAL*(base_no+1))&&(scen_pass_n>SCN_TOTAL*(base_no)))
					{
						vector<string> baseline_vector = map_of_summary_file[SCN_TOTAL*base_no+1][0][mp_number];
						string pCK = baseline_vector[PROD_TYPE_SUMMARISE].c_str();
						if(pCK == "DEU_IAB01" || pCK == "DEU_IAB02" || pCK == "DEU_IDB01" || pCK == "DEU_IDB02")
							EHC = (atof(baseline_vector[AGG_CLAIMS_SUMMARISE].c_str())-atof(baseline_vector[AGG_DEP_FEE_SUMMARISE].c_str())-atof(baseline_vector[AGG_SUM_PREM_FEE_SUMMARISE].c_str()))/ atof(baseline_vector[AGG_REAL_CHARGES_SUMMARISE].c_str()) * (atof(baseline_vector[GMXB_G_C_SUMMARISE].c_str()));
						else
							EHC = atof(baseline_vector[AGG_CLAIMS_SUMMARISE].c_str())/ atof(baseline_vector[AGG_EHC_CHARGES_SUMMARISE].c_str());

						vector<vector<int>> index_shock_array = iter_scen_pass_num->second;
						int index_size_of_shock_array = index_shock_array.size();
						for(int s = 0; s < index_size_of_shock_array; s++ )
						{
							int shock_number = this->get_shock_number(index_shock_array, s, MAX_DELTA_SHOCKS_PER_INDEX, MAXIMUM_NUMBER_OF_INDEXES);
							double IR_shock=get_IR_shock(scen_pass_n, base_no);
							double IR_volshock=get_IR_vol_shock(scen_pass_n, base_no);
							double EQ_volshock=get_EQ_vol_shock(scen_pass_n, base_no);
							double Bucket_year=get_bucket_shock(scen_pass_n, base_no);
							map_of_greek[scen_pass_n][mp_number][shock_number][EHC_BASELINE_GREEK_SUM] = EHC;
							map_of_greek[scen_pass_n][mp_number][shock_number][IR_SHOCK_GREEK_SUM]=IR_shock;
							map_of_greek[scen_pass_n][mp_number][shock_number][RHO_BUCKET_SHOCK]=Bucket_year;
							map_of_greek[scen_pass_n][mp_number][shock_number][IR_VOL_SHOCK]=IR_volshock;
							map_of_greek[scen_pass_n][mp_number][shock_number][EQ_VOL_SHOCK]=EQ_volshock;
						}
					}
				}
			}
		}
		catch (exception& e)
		{
			cout<<"Error in Calculate_EHC(Germany_Summary_File_Writer: )"<<e.what()<<endl;
		}
	}

	void rho_calculate_esg(vector<vector<double>>& IR_shock_list, map<int, map<int, map<int, vector<double>>>>& map_of_greek, int mp_number_total, int base_no)
	{
		map<int, vector<vector<int>>> index_shocks;
		map_shock_esg_to_map_shock(index_map_shocks_esg,index_shocks);
		for (map<int, vector<vector<int>>>::const_iterator iter_scen_pass_num = index_shocks.begin(); 
			iter_scen_pass_num != index_shocks.end(); ++iter_scen_pass_num)
		{
			int scen_pass_n = iter_scen_pass_num->first;
			if ((scen_pass_n<=SCN_TOTAL*(base_no+1))&&(scen_pass_n>SCN_TOTAL*(base_no)))
			{
				vector<vector<int>> index_shock_array = iter_scen_pass_num->second;
				int index_size_of_shock_array = index_shock_array.size();

				for (int mp_number = 1; mp_number <= mp_number_total; mp_number++)
				{
					int scen_pass_n_p, scen_pass_n_m;
					double shock_size = 0;

					calculate_parameters_for_rho(scen_pass_n, scen_pass_n_p, scen_pass_n_m, shock_size,IR_shock_list,base_no);

					if (shock_size != 0)
					{
						if ((IsExist_Scn(index_map_shocks,scen_pass_n_p))&&(IsExist_Scn(index_map_shocks,scen_pass_n_m)))
						{						
							for(int s = 0; s < index_size_of_shock_array; s++ )
							{
								int shock_number = this->get_shock_number(index_shock_array, s, MAX_DELTA_SHOCKS_PER_INDEX, MAXIMUM_NUMBER_OF_INDEXES);
								if ((!map_of_greek[scen_pass_n_p][mp_number][shock_number].empty())&&(!map_of_greek[scen_pass_n_m][mp_number][shock_number].empty()))
								{
									double OV_p = map_of_greek[scen_pass_n_p][mp_number][shock_number][OPTION_VALUE_GREEK_SUM];
									double OV_m = map_of_greek[scen_pass_n_m][mp_number][shock_number][OPTION_VALUE_GREEK_SUM];
									double rho = (OV_p - OV_m) / (2 * shock_size);
									map_of_greek[scen_pass_n][mp_number][shock_number][RHO_GREEK_SUM] = rho;
								}
							}
						}
					}
				}
			}
		}

	}

	void rhoconv_calculate_esg(vector<vector<double>>& IR_shock_list, map<int, map<int, map<int, vector<double>>>>& map_of_greek, int mp_number_total, int base_no)
	{
		map<int, vector<vector<int>>> index_shocks;
		map_shock_esg_to_map_shock(index_map_shocks_esg,index_shocks);
		for (map<int, vector<vector<int>>>::const_iterator iter_scen_pass_num = index_shocks.begin(); 
			iter_scen_pass_num != index_shocks.end(); ++iter_scen_pass_num)
		{
			int scen_pass_n = iter_scen_pass_num->first;
			if ((scen_pass_n<=SCN_TOTAL*(base_no+1))&&(scen_pass_n>SCN_TOTAL*(base_no)))
			{
				vector<vector<int>> index_shock_array = iter_scen_pass_num->second;
				int index_size_of_shock_array = index_shock_array.size();

				for (int mp_number = 1; mp_number <= mp_number_total; mp_number++)
				{
					int scen_pass_n_p, scen_pass_n_m;
					double shock_size = 0;

					//calculate_parameters_for_rho_convexity(scen_pass_n, scen_pass_n_p, scen_pass_n_m, shock_size);
					calculate_parameters_for_rho(scen_pass_n, scen_pass_n_p, scen_pass_n_m, shock_size,IR_shock_list,base_no);

					if (shock_size != 0)
					{
						if ((IsExist_Scn(index_map_shocks,scen_pass_n_p))&&(IsExist_Scn(index_map_shocks,scen_pass_n_m)))
						{
							for(int s = 0; s < index_size_of_shock_array; s++ )
							{
								int shock_number = this->get_shock_number(index_shock_array, s, MAX_DELTA_SHOCKS_PER_INDEX, MAXIMUM_NUMBER_OF_INDEXES);

								/*
								double rho_p = map_of_greek[scen_pass_n_p][mp_number][shock_number][RHO_GREEK_SUM];
								double rho_m = map_of_greek[scen_pass_n_m][mp_number][shock_number][RHO_GREEK_SUM];
								double rho_convexity = (rho_p - rho_m) / (2 * shock_size);
								*/
								if ((!map_of_greek[scen_pass_n_p][mp_number][shock_number].empty())&&(!map_of_greek[scen_pass_n_m][mp_number][shock_number].empty()))
								{
									double ov_p=map_of_greek[scen_pass_n_p][mp_number][shock_number][OPTION_VALUE_GREEK_SUM];
									double ov_m=map_of_greek[scen_pass_n_m][mp_number][shock_number][OPTION_VALUE_GREEK_SUM];
									double ov=map_of_greek[scen_pass_n][mp_number][shock_number][OPTION_VALUE_GREEK_SUM];
									double rho_convexity=(ov_p+ov_m-2*ov)/(shock_size*shock_size);
									map_of_greek[scen_pass_n][mp_number][shock_number][RHOCONV_GREEK_SUM] = rho_convexity;
								}
							}
						}
					}
				}
			}
		}

	}

	void rho_bucket_calc_esg(vector<vector<double>>& IR_shock_list, map<int, map<int, map<int, vector<double>>>>& map_of_greek, int mp_number_total, int base_no)
	{
		map<int, vector<vector<int>>> index_shocks;
		map_shock_esg_to_map_shock(index_map_shocks_esg,index_shocks);
		for (map<int, vector<vector<int>>>::const_iterator iter_scen_pass_num = index_shocks.begin(); 
			iter_scen_pass_num != index_shocks.end(); ++iter_scen_pass_num)
		{
			int scen_pass_n = iter_scen_pass_num->first;

			if ((scen_pass_n<=SCN_TOTAL*(base_no+1))&&(scen_pass_n>SCN_TOTAL*(base_no)))
			{
				vector<vector<int>> index_shock_array = iter_scen_pass_num->second;
				int index_size_of_shock_array = index_shock_array.size();

				for (int mp_number = 1; mp_number <= mp_number_total; mp_number++)
				{
					int scen_pass_n_p, scen_pass_n_m;
					double shock_size = 0;

					calculate_parameters_for_bucket(scen_pass_n, scen_pass_n_p, scen_pass_n_m, shock_size, base_no);

					if (shock_size != 0)
					{
						if ((IsExist_Scn(index_map_shocks,scen_pass_n_p))&&(IsExist_Scn(index_map_shocks,scen_pass_n_m)))
						{						
							for(int s = 0; s < index_size_of_shock_array; s++ )
							{
								int shock_number = this->get_shock_number(index_shock_array, s, MAX_DELTA_SHOCKS_PER_INDEX, MAXIMUM_NUMBER_OF_INDEXES);

								double OV_p = map_of_greek[scen_pass_n_p][mp_number][shock_number][OPTION_VALUE_GREEK_SUM];
								double OV_m = map_of_greek[scen_pass_n_m][mp_number][shock_number][OPTION_VALUE_GREEK_SUM];
								double rho = (OV_p - OV_m) / (2 * shock_size);
								map_of_greek[scen_pass_n][mp_number][shock_number][RHO_BUCKET_SUM] = rho;
							}
						}
					}
				}
			}
		}
	}

	void init_greek_map_esg(map<int, map<int, map<int, vector<double>>>>& map_of_greek, int mp_number_total, int base_no)
	{	    
		map<int, vector<vector<int>>> index_shocks;
		map_shock_esg_to_map_shock(index_map_shocks_esg,index_shocks);
		for (map<int, vector<vector<int>>>::const_iterator iter_scen_pass_num = index_shocks.begin(); 
			iter_scen_pass_num != index_shocks.end(); ++iter_scen_pass_num)
		{
			int scen_pass_n = iter_scen_pass_num->first;
			if ((scen_pass_n<=SCN_TOTAL*(base_no+1))&&(scen_pass_n>SCN_TOTAL*(base_no)))
			{
				vector<vector<int>> index_shock_array = iter_scen_pass_num->second;
				int index_size_of_shock_array = index_shock_array.size();

				for (int mp_number = 1; mp_number <= mp_number_total; mp_number++)
				{
					for(int s = 0; s < index_size_of_shock_array; s++ )
					{
						int shock_number = this->get_shock_number(index_shock_array, s, MAX_DELTA_SHOCKS_PER_INDEX, MAXIMUM_NUMBER_OF_INDEXES);
						vector<double> v(SIZE_OF_GREEK_SUMMARY_FILE);
						map_of_greek[scen_pass_n][mp_number][shock_number] = v;
					}
				}
			}
		}
	}

	void calculate_EHC_esg(map<int, map<int, map<int, vector<double>>>>& map_of_greek,map<int, map<int, vector<vector<string>>>>& map_of_summary_file,int mp_number_total, int base_no)
	{
		try{
			map<int, vector<vector<int>>> index_shocks;
			map<int, map<int, vector<vector<int>>>> ::const_iterator iter = index_map_shocks_esg.begin(); 
			index_shocks = iter->second;
			for (int mp_number = 1; mp_number <= mp_number_total; mp_number++)
			{
				double EHC;


				for (map<int, vector<vector<int>>>::const_iterator iter_scen_pass_num = index_shocks.begin(); 
					iter_scen_pass_num != index_shocks.end(); ++iter_scen_pass_num)
				{
					int scen_pass_n = iter_scen_pass_num->first;
					if ((scen_pass_n<=SCN_TOTAL*(base_no+1))&&(scen_pass_n>SCN_TOTAL*(base_no)))
					{
						vector<string> baseline_vector = map_of_summary_file[SCN_TOTAL*base_no+1][0][mp_number];
						string pCK = baseline_vector[PROD_TYPE_SUMMARISE].c_str();
						if(pCK == "DEU_IAB01" || pCK == "DEU_IAB02" || pCK == "DEU_IDB01" || pCK == "DEU_IDB02")
							EHC = (atof(baseline_vector[AGG_CLAIMS_SUMMARISE].c_str())-atof(baseline_vector[AGG_DEP_FEE_SUMMARISE].c_str())-atof(baseline_vector[AGG_SUM_PREM_FEE_SUMMARISE].c_str()))/ atof(baseline_vector[AGG_REAL_CHARGES_SUMMARISE].c_str()) * (atof(baseline_vector[GMXB_G_C_SUMMARISE].c_str()));
						else
							EHC = atof(baseline_vector[AGG_CLAIMS_SUMMARISE].c_str())/ atof(baseline_vector[AGG_EHC_CHARGES_SUMMARISE].c_str());

						vector<vector<int>> index_shock_array = iter_scen_pass_num->second;
						int index_size_of_shock_array = index_shock_array.size();
						for(int s = 0; s < index_size_of_shock_array; s++ )
						{
							int shock_number = this->get_shock_number(index_shock_array, s, MAX_DELTA_SHOCKS_PER_INDEX, MAXIMUM_NUMBER_OF_INDEXES);
							double IR_shock=get_IR_shock(scen_pass_n, base_no);
							double IR_volshock=get_IR_vol_shock(scen_pass_n, base_no);
							double EQ_volshock=get_EQ_vol_shock(scen_pass_n, base_no);
							double Bucket_year=get_bucket_shock(scen_pass_n, base_no);
							map_of_greek[scen_pass_n][mp_number][shock_number][EHC_BASELINE_GREEK_SUM] = EHC;
							map_of_greek[scen_pass_n][mp_number][shock_number][IR_SHOCK_GREEK_SUM]=IR_shock;
							map_of_greek[scen_pass_n][mp_number][shock_number][RHO_BUCKET_SHOCK]=Bucket_year;
							map_of_greek[scen_pass_n][mp_number][shock_number][IR_VOL_SHOCK]=IR_volshock;
							map_of_greek[scen_pass_n][mp_number][shock_number][EQ_VOL_SHOCK]=EQ_volshock;
						}
					}
				}
			}
		}
		catch (exception& e)
		{
			cout<<"Error in Calculate_EHC(Germany_Summary_File_Writer: )"<<e.what()<<endl;
		}
	}
	void init_IR_shock_esg(vector<vector<double>>& IR_shock_list, int base_no)
	{
		map<int, vector<vector<int>>> index_shocks;
		map_shock_esg_to_map_shock(index_map_shocks_esg,index_shocks);
		const int total_shock=30;
		const int init_no=1;
		for(int IR_idx=(init_no+SCN_TOTAL*base_no);IR_idx<(SCN_TOTAL*base_no+total_shock+init_no+2);IR_idx++)
		{
			if (IsExist_Scn(index_shocks,IR_idx))
			{
				vector<double> temp_shoc;
				temp_shoc.push_back(get_IR_shock(IR_idx, base_no));
				temp_shoc.push_back(double(IR_idx));
				IR_shock_list.push_back(temp_shoc); 
			}
		}

		sort (IR_shock_list.begin(),IR_shock_list.end());
		vector<vector<double>>::iterator it_temp;
		it_temp=unique(IR_shock_list.begin(),IR_shock_list.end(),compare_irshoc);
		IR_shock_list.resize(it_temp - IR_shock_list.begin());

	}


};