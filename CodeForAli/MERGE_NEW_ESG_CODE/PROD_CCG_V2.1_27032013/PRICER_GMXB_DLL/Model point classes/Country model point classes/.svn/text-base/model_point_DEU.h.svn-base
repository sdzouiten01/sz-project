#ifndef __MODEL_POINT_DEU_H_
#define __MODEL_POINT_DEU_H_
#include "stdafx.h"
#include <string>
#include <map>
#include "GMXBParameters.h"
#include "tinyxml.h"
#include "tinystr.h"
#include <vector>
#include <time.h>
#include <fstream>

#include "model_point_head_DEU.h"
#include "GMXBLogger.h"
#include "GMXBException.h"

using namespace std;

class Model_Point_DEU : public Model_Point
{
public:

		
		double age_at_valn ;
		double duration_valn ;
		double policy_duration ;
		string	prod_code ;
		string	policy_id ;
		double	policies_curr ;
		
		
		double	fpw_accum_total;
		double	av_valn_index0 ;
		double	av_valn_index1 ;
		double	av_valn_index2 ;
		double	av_valn_index3 ;
		double	av_valn_index4 ;
		double	av_valn_index5 ;
		double	av_valn_index6;
		double	av_valn_index7 ;
		double	av_valn_index8 ;
		double	av_valn_index9 ;
		double	av_valn_index10 ;
		double	av_valn_index11 ;
		double	target_av_split_valn_index0 ;
		double	target_av_split_valn_index1 ;
		double	target_av_split_valn_index2 ;
		double	target_av_split_valn_index3;
		double	target_av_split_valn_index4 ;
		double	target_av_split_valn_index5 ;
		double	target_av_split_valn_index6 ;
		double	target_av_split_valn_index7 ;
		double	target_av_split_valn_index8 ;
		double	target_av_split_valn_index9 ;
		double	target_av_split_valn_index10 ;
		double	target_av_split_valn_index11 ;
		double	gmab_valn ;
		double	gmdb_av_valn;
		double	gmdb_prem_valn;
		double	gmib_ratchet_valn;
		double	gmib_rollup_valn ;
		double	gmxb_chg_perc ;
		double	management_fee_perc ;
		
		double	m_and_e_fee_perc ;
		
		double	gmib_rollup_rate_at_valn ;
		double	ger_product_number ;
		int	ger_distribution_channel ;
		int	deferment_age ;
		int	ger_prem_duration ;
		double	ger_prem_hedge_charge ;
		double	commission_acct ;
		int	tax_layer ;
		
		double	ger_prem_fixed_fee ;
		double	ger_gmib_fixed_fee ;
		
		double	last_year_bonus ;
		int	ger_riester_step_08 ;
		double	guaranteed_interest_rate ;
		int	ger_prem_elapsed_months ;
		double	ger_gpp ;
		int	riester_type ;
		int	ger_abrufphase ;
		string	ongoing_single_prem_ind ;
		int	ger_riester_month_bef_08 ; 
	
		double	acqu_ch_t0 ;
		double	acqu_ch_t1 ;
		double	acqu_ch_t2 ;
		double	acqu_ch_t3;
		double	acqu_ch_t4 ;
		double	acqu_ch_t5 ;
		double	acqu_ch_t6 ;
		double	acqu_ch_t7 ;
		double	acqu_ch_t8 ;
		double	acqu_ch_t9 ;
		double	dist_factor_sb ;
		double guaranteed_interest_rate_paidup;
		double	tot_prem ;
		double	av_add ;
		double	av_add_inforce ;
		double	hc_add ;
		double	bb_add ;
		double	pay_status ;
		double	prem_period_ini;
		double	prem_curr_ini;
		
		//other german variable
		double prorata_first_year;
		
		double av_total_init;
		int age_at_issue;
		double ger_prem_admin_loading;
		double ger_min_invested_amount;
		double  acqu_ch[10]; //additional vector to set acquisition charges used for aging inforce
							// Changed by Ali, No impact on other German classes
		double frequency_factor; //HE
		int T_Max;
		int ger_lapse_dist_group;
		int remain_duration;
		double acquisition_cost_rate;//Riester
		double bonus_paid;//Riester
		
		double hc_paid_premium;  // product 2010
		double hc_add_paid_premium; // product 2010
		double sum_prem_add;//product 2010
		double staffel_hc_max;//product 2010
		double staffel_hc_min;//product 2010
		double hc_av_brutto;//product 2010
		int Calc_Valn_month;
		int Calc_Valn_year;
		int Const_Omega;
		int Calc_Unisex;
		double gmxb_g_c_gross;
		/*stat inforces*/
		double realized_RRC;
		double admin_charges;
		double up_front_g_c; 
		int year_last_bonus;
		char * issue_date;
		int issue_day;
		int issue_month;
		int issue_year_inforce;
		char * last_premium_date;
		int last_premium_day;
		int last_premium_month;
		int last_premium_year;
		double Bonus_weight;


		Model_Point_DEU(vector<string>& row, int rank, Product_configuration& product_conf, Scenario_configuration& scenario_config):Model_Point()
	{	
		// Initialize the pv table for delta shock
		this->index_shock_size = scenario_config.get_index_shock_array().size();
		this->index_shock_pvs = new double* [this->index_shock_size];
		// initialize the pv table
	
		for (int i = 0; i < this->index_shock_size; i++)
		{
			this->index_shock_pvs[i] = new double[TOTAL_OUTPUT_COLUMNS_DEU];
			for (int j=0 ; j < TOTAL_OUTPUT_COLUMNS_DEU; j++)
				this->index_shock_pvs[i][j] = 0.;
		}
		
		// Initialise pv for lapse shocks
		this->lapse_size = scenario_config.get_lapse_mult().size();
		this->pv_lapse = new double* [this->lapse_size];
		
		for (int i = 0; i < this->lapse_size; i++)
		{
			this->pv_lapse[i] = new double[TOTAL_OUTPUT_COLUMNS_DEU];
			for (int j=0 ; j < TOTAL_OUTPUT_COLUMNS_DEU; j++)
				this->pv_lapse[i][j] = 0.;
		}
		
		// Initialise pv for paidup shocks
		this->paidup_size = scenario_config.get_paidup_mult().size();
		this->pv_paidup = new double* [this->paidup_size];
		
		for (int i = 0; i < this->paidup_size; i++)
		{
			this->pv_paidup[i] = new double[TOTAL_OUTPUT_COLUMNS_DEU];
			for (int j=0 ; j < TOTAL_OUTPUT_COLUMNS_DEU; j++)
				this->pv_paidup[i][j] = 0.;
		}
		// Initialise pv for election shocks
		this->election_size = scenario_config.get_election_mult().size();
		this->pv_election = new double* [this->election_size];
		
		for (int i = 0; i < this->election_size; i++)
		{
			this->pv_election[i] = new double[TOTAL_OUTPUT_COLUMNS_DEU];
			for (int j=0 ; j < TOTAL_OUTPUT_COLUMNS_DEU; j++)
				this->pv_election[i][j] = 0.;
		}	
		// Initialise pv for mortality shocks
		this->mortality_size = scenario_config.get_mortality_mult().size();
		this->pv_mortality = new double* [this->mortality_size];
		
		for (int i = 0; i < this->mortality_size; i++)
		{
			this->pv_mortality[i] = new double[TOTAL_OUTPUT_COLUMNS_DEU];
			for (int j=0 ; j < TOTAL_OUTPUT_COLUMNS_DEU; j++)
				this->pv_mortality[i][j] = 0.;
		}
		
		// Initialise pv for longevity
		this->longevity_size = 1;
		this->pv_longevity = new double* [this->longevity_size];
		
		for (int i = 0; i < this->longevity_size; i++)
		{
			this->pv_longevity[i] = new double[TOTAL_OUTPUT_COLUMNS_DEU];
			for (int j=0 ; j < TOTAL_OUTPUT_COLUMNS_DEU; j++)
				this->pv_longevity[i][j] = 0.;
		}
		
		this->mp_position_in_file = rank;
		this->initialise_mp(row);
		this->load_longstaff = product_conf.is_longstaff();
		this->load_model_point_funds = product_conf.is_projection_by_fund();
		this->parse_fund_line(row[row.size() - 1], product_conf);
		this->parse_fund_line_stat(row[row.size() - 1]);

	}

	Model_Point_DEU(Model_Point_DEU * mp, int index_shock_size_in, int fund_shock_size_in)
	:Model_Point()
	{
		this->get_timestamp();
		this->initialise_mp(mp);
		this->mp_position_in_file = mp->mp_position_in_file;
		this->load_longstaff = 0;
		this->load_model_point_funds = 0;

	}

	virtual ~Model_Point_DEU(){}
	int get_total_pv_columns_number()
	{
		return TOTAL_OUTPUT_COLUMNS_DEU;
	}
	virtual void initialise_mp(vector<string>& row)
	{
		this->product = row[PRODUCT];
		this->group = row[GROUP];
		this->policy_id = row[POLICY_ID];
		this->gmxb_g_c	= atof(row[GMXB_G_C].c_str());
		prem_period_ini = atof(row[PREM_PERIOD].c_str());
		age_at_valn = atof(row[AGE_AT_VALN].c_str());
		duration_valn = atof(row[DURATION_VALN].c_str());
		policy_duration = atof(row[POLICY_DURATION].c_str());
		prod_code = row[PROD_CODE].c_str();
		policy_id = row[POLICY_ID].c_str();
		policies_curr = atof(row[POLICIES_CURR].c_str());
		sex = row[SEX].c_str();
		m_sex_perc = atof(row[M_SEX_PERC].c_str());
		prem_paid = atof(row[PREM_PAID].c_str());
		fpw_accum_total = atof(row[FPW_ACCUM_TOTAL].c_str());
		av_valn_index0 = atof(row[AV_VALN_INDEX0].c_str());
		av_valn_index1 = atof(row[AV_VALN_INDEX1].c_str());
		av_valn_index2 = atof(row[AV_VALN_INDEX2].c_str());
		av_valn_index3 = atof(row[AV_VALN_INDEX3].c_str());
		av_valn_index4 = atof(row[AV_VALN_INDEX4].c_str());
		av_valn_index5 = atof(row[AV_VALN_INDEX5].c_str());
		av_valn_index6 = atof(row[AV_VALN_INDEX6].c_str());
		av_valn_index7 = atof(row[AV_VALN_INDEX7].c_str());
		av_valn_index8 = atof(row[AV_VALN_INDEX8].c_str());
		av_valn_index9 = atof(row[AV_VALN_INDEX9].c_str());
		av_valn_index10 = atof(row[AV_VALN_INDEX10].c_str());
		av_valn_index11 = atof(row[AV_VALN_INDEX11].c_str());
		target_av_split_valn_index0 = atof(row[TARGET_AV_SPLIT_VALN_INDEX0].c_str());
		target_av_split_valn_index1 = atof(row[TARGET_AV_SPLIT_VALN_INDEX1].c_str());
		target_av_split_valn_index2 = atof(row[TARGET_AV_SPLIT_VALN_INDEX2].c_str());
		target_av_split_valn_index3 = atof(row[TARGET_AV_SPLIT_VALN_INDEX3].c_str());
		target_av_split_valn_index4 = atof(row[TARGET_AV_SPLIT_VALN_INDEX4].c_str());
		target_av_split_valn_index5 = atof(row[TARGET_AV_SPLIT_VALN_INDEX5].c_str());
		target_av_split_valn_index6 = atof(row[TARGET_AV_SPLIT_VALN_INDEX6].c_str());
		target_av_split_valn_index7 = atof(row[TARGET_AV_SPLIT_VALN_INDEX7].c_str());
		target_av_split_valn_index8 = atof(row[TARGET_AV_SPLIT_VALN_INDEX8].c_str());
		target_av_split_valn_index9 = atof(row[TARGET_AV_SPLIT_VALN_INDEX9].c_str());
		target_av_split_valn_index10 = atof(row[TARGET_AV_SPLIT_VALN_INDEX10].c_str());
		target_av_split_valn_index11 = atof(row[TARGET_AV_SPLIT_VALN_INDEX11].c_str());
		av_if_array[0] = atof(row[AV_VALN_INDEX0].c_str());
		av_if_array[1] = atof(row[AV_VALN_INDEX1].c_str());
		av_if_array[2] = atof(row[AV_VALN_INDEX2].c_str());
		av_if_array[3] = atof(row[AV_VALN_INDEX3].c_str());
		av_if_array[4] = atof(row[AV_VALN_INDEX4].c_str());
		av_if_array[5] = atof(row[AV_VALN_INDEX5].c_str());
		av_if_array[6] = atof(row[AV_VALN_INDEX6].c_str());
		av_if_array[7] = atof(row[AV_VALN_INDEX7].c_str());
		av_if_array[8] = atof(row[AV_VALN_INDEX8].c_str());
		av_if_array[9] = atof(row[AV_VALN_INDEX9].c_str());
		av_if_array[10] = atof(row[AV_VALN_INDEX10].c_str());
		av_if_array[11] = atof(row[AV_VALN_INDEX11].c_str());
		//fill av_split_prop_array
		av_split_prop_array[0] = atof(row[TARGET_AV_SPLIT_VALN_INDEX0].c_str());
		av_split_prop_array[1] = atof(row[TARGET_AV_SPLIT_VALN_INDEX1].c_str());
		av_split_prop_array[2] = atof(row[TARGET_AV_SPLIT_VALN_INDEX2].c_str());
		av_split_prop_array[3] = atof(row[TARGET_AV_SPLIT_VALN_INDEX3].c_str());
		av_split_prop_array[4] = atof(row[TARGET_AV_SPLIT_VALN_INDEX4].c_str());
		av_split_prop_array[5] = atof(row[TARGET_AV_SPLIT_VALN_INDEX5].c_str());
		av_split_prop_array[6] = atof(row[TARGET_AV_SPLIT_VALN_INDEX6].c_str());
		av_split_prop_array[7] = atof(row[TARGET_AV_SPLIT_VALN_INDEX7].c_str());
		av_split_prop_array[8] = atof(row[TARGET_AV_SPLIT_VALN_INDEX8].c_str());
		av_split_prop_array[9] = atof(row[TARGET_AV_SPLIT_VALN_INDEX9].c_str());
		av_split_prop_array[10] = atof(row[TARGET_AV_SPLIT_VALN_INDEX10].c_str());
		av_split_prop_array[11] = atof(row[TARGET_AV_SPLIT_VALN_INDEX11].c_str());
		gmab_valn =  atof(row[GMAB_VALN].c_str());
		gmdb_av_valn = atof(row[GMDB_AV_VALN].c_str());
		gmdb_prem_valn = atof(row[GMDB_PREM_VALN].c_str());
		gmib_ratchet_valn = atof(row[GMIB_RATCHET_VALN].c_str());
		gmib_rollup_valn = atof(row[GMIB_ROLLUP_VALN].c_str());
		gmxb_chg_perc = atof(row[GMXB_CHG_PERC].c_str());
		management_fee_perc = atof(row[MANAGEMENT_FEE_PERC].c_str());
		gmxb_ehc_charge = atof(row[GMXB_EHC_CHG].c_str());
		m_and_e_fee_perc = atof(row[M_AND_FEE_PERC].c_str());
		//av_rebal_ind = row[AV_REBAL_IND].c_str();

		if (row[AV_REBAL_IND] == "REBALANCE")
			av_rebal_ind = Model_Point::REBALANCE;
		else 
			av_rebal_ind = Model_Point::DRIFT;

		gmib_rollup_rate_at_valn = atof(row[GMIB_ROLLUP_RATE_AT_VALN].c_str());
		ger_product_number = atof(row[GER_PRODUCT_NUMBER].c_str());
		ger_distribution_channel = atoi(row[GER_DISTRIBUTION_CHANNEL].c_str());
		deferment_age = atoi(row[DEFERMENT_AGE].c_str());
		ger_prem_duration = atoi(row[GER_PREM_DURATION].c_str());
		ger_prem_hedge_charge = atof(row[GER_PREM_HEDGE_CHARGE].c_str());
		commission_acct = atof(row[COMMISSION_ACCT].c_str());
		tax_layer = atoi(row[TAX_LAYER].c_str());
		payt_freq = atof(row[PAYT_FREQ].c_str());
		ger_prem_fixed_fee = atof(row[GER_PREM_FIXED_FEE].c_str());
		ger_gmib_fixed_fee = atof(row[GER_GMIB_FIXED_FEE].c_str());
		admin_fee_dollar = atof(row[ADMIN_FEE_DOLLAR].c_str());
		last_year_bonus = atof(row[LAST_YEAR_BONUS].c_str());
		ger_riester_step_08 = atoi(row[STEP_2008_IND].c_str());
		guaranteed_interest_rate = atof(row[GUARANTEED_INTEREST_RATE].c_str())/100.;
		ger_prem_elapsed_months = atoi(row[LAST_PREMIUM_IND].c_str());
		ger_gpp = atof(row[GPP].c_str());
		riester_type = atoi(row[RIESTER_TYPE].c_str());
		ger_abrufphase = atoi(row[ABRUFPHASE_IND].c_str());
		ongoing_single_prem_ind =  row[PREMIUM_TYPE_IND].c_str();
		trim(ongoing_single_prem_ind);
		
		acqu_ch_t0 = atof(row[ACQU_CH_T0].c_str());
		acqu_ch[0] = atof(row[ACQU_CH_T0].c_str());//Added for HE
		acqu_ch_t1 = atof(row[ACQU_CH_T1].c_str());
		acqu_ch[1] = atof(row[ACQU_CH_T1].c_str());//Added for HE
		acqu_ch_t2 = atof(row[ACQU_CH_T2].c_str());
		acqu_ch[2] = atof(row[ACQU_CH_T2].c_str());//Added for HE
		acqu_ch_t3 = atof(row[ACQU_CH_T3].c_str());
		acqu_ch[3] = atof(row[ACQU_CH_T3].c_str());//Added for HE
		acqu_ch_t4 = atof(row[ACQU_CH_T4].c_str());
		acqu_ch[4] = atof(row[ACQU_CH_T4].c_str());//Added for HE
		acqu_ch_t5 = atof(row[ACQU_CH_T5].c_str());
		acqu_ch[5] = atof(row[ACQU_CH_T5].c_str());//Added for HE
		acqu_ch_t6 = atof(row[ACQU_CH_T6].c_str());
		acqu_ch[6] = atof(row[ACQU_CH_T6].c_str());//Added for HE
		acqu_ch_t7 = atof(row[ACQU_CH_T7].c_str());
		acqu_ch[7] = atof(row[ACQU_CH_T7].c_str());//Added for HE
		acqu_ch_t8 = atof(row[ACQU_CH_T8].c_str());
		acqu_ch[8] = atof(row[ACQU_CH_T8].c_str());//Added for HE
		acqu_ch_t9 = atof(row[ACQU_CH_T9].c_str());
		acqu_ch[9] = atof(row[ACQU_CH_T9].c_str());//Added for HE
		guaranteed_interest_rate_paidup = atof(row[GUARANTEED_INTEREST_RATE_PAID_UP].c_str())/100.;
		dist_factor_sb = atof(row[DIS_FAC_SB].c_str())/100.;
		tot_prem = atof(row[TOT_PREM].c_str());
		av_add_inforce = atof(row[AV_ADD].c_str());
		hc_add = atof(row[HC_ADD].c_str());
		bb_add = atof(row[BB_ADD].c_str());
		sum_prem_add = atof(row[SUM_PREM_ADD].c_str());
		pay_status = atof(row[PAY_STATUS].c_str());
		prem_curr_ini = prem_period_ini*payt_freq;
		gmxb_g_c_gross = atof(row[GMXB_CHG_GROSS].c_str())/100.;
		
		year_last_bonus = atof(row[YEAR_LAST_BONUS].c_str());

		issue_date = (char*) (row[ISSUE_DATE].c_str());
		issue_day = atoi(strtok(issue_date, "/"));
		issue_month = atoi(strtok(NULL, "/"));
		issue_year_inforce = atoi(strtok(NULL, "/"));

		last_premium_date = (char*) (row[LAST_PREMIUM_DATE].c_str());
		last_premium_day = atoi(strtok(last_premium_date, "/"));
		last_premium_month = atoi(strtok(NULL, "/"));
		last_premium_year = atoi(strtok(NULL, "/"));
		
			hc_paid_premium=atof(row[HC_PP].c_str())/100.; // product 2010
			hc_add_paid_premium= atof(row[HC_PP_ADD].c_str())/100.; // product 2010
			staffel_hc_min= atof(row[STAFFEL_FACTOR].c_str())/100.; // product 2010
			staffel_hc_max=-staffel_hc_min;//product 2010
			hc_av_brutto=atof(row[HC_AV_BRUTTO].c_str())/100.;//product 2010
	
		/*stat inforces*/
		realized_RRC = atof(row[RRC_REALIZED].c_str());
		admin_charges = atof(row[ADMIN_CHARGES].c_str());
		up_front_g_c = atof(row[UPFRONT_G_C].c_str());
		//Initialize frequency_factor HE
		if(this->payt_freq==0)
			frequency_factor=1/12.;
		else 
			frequency_factor=1/this->payt_freq;

		//ger_prem_duration *=(pay_status ==1);
		age_exact_issue = this->age_at_valn - this->duration_valn+10*SMALL_DOUBLE;
		if( this->duration_valn==0)
			elapsed_months = int (ceil((this->duration_valn)*12.));//Change for HE
		else
			elapsed_months = int(ceil((this->duration_valn-0.0001)*12.));//Change for HE
		prem_type		= "R";
		if (this->prem_curr_ini == 1)
			prem_type		= "S";

		elapsed_mths_in_valn_yr = elapsed_months % 12;
		ger_riester_month_bef_08 = (valn_year<2008)*(12-valn_month);
		elapsed_years = elapsed_months/12;

		ger_prem_admin_loading = 0.02*((int)ger_product_number==1)+0.035*((int)ger_product_number==2)+0.05*((int)ger_product_number==3);
		ger_min_invested_amount = 20.*((int)ger_product_number==1)+40.*((int)ger_product_number==2)+25.*((int)ger_product_number==3);
		prorata_first_year=(1.-elapsed_mths_in_valn_yr/12.);
		age_at_issue= (int)age_exact_issue;
	}




	//For HE projection
	void initialise_mp(Model_Point * m_p){

		Model_Point_DEU * mp = dynamic_cast<Model_Point_DEU*>(m_p);

		product             = mp->product;
		group               = mp->group;
		policy_id           = mp->policy_id;
		gmxb_g_c            = mp->gmxb_g_c;
		prem_period_ini	    = mp->prem_period_ini;
		age_at_valn 		= mp->age_at_valn;
		duration_valn       = mp->duration_valn;
		policy_duration     = mp->policy_duration;
		prod_code           = mp->prod_code;
		policy_id           = mp->policy_id;
		policies_curr       = mp->policies_curr;
		sex                 = mp->sex;
		m_sex_perc          = mp->m_sex_perc;
		prem_paid           = mp->prem_paid;
		fpw_accum_total     = mp->fpw_accum_total;
		av_valn_index0      = mp->av_valn_index0;
		av_valn_index1 	    = mp->av_valn_index1;
		av_valn_index2 	    = mp->av_valn_index2;
		av_valn_index3 		= mp->av_valn_index3;
		av_valn_index4 	    = mp->av_valn_index4;
		av_valn_index5 	    = mp->av_valn_index5;
		av_valn_index6      = mp->av_valn_index6;
		av_valn_index7	    = mp->av_valn_index7;
		av_valn_index8 	    = mp->av_valn_index8;
		av_valn_index9		= mp->av_valn_index9;
		av_valn_index10     = mp->av_valn_index10;
		av_valn_index11     = mp->av_valn_index11;
        target_av_split_valn_index0 		= mp->target_av_split_valn_index0;
		target_av_split_valn_index1 	    = mp->target_av_split_valn_index1;
		target_av_split_valn_index2 		= mp->target_av_split_valn_index2;
		target_av_split_valn_index3			= mp->target_av_split_valn_index3;
		target_av_split_valn_index4 		= mp->target_av_split_valn_index4;
		target_av_split_valn_index5 		= mp->target_av_split_valn_index5;
		target_av_split_valn_index6   		= mp->target_av_split_valn_index6;
		target_av_split_valn_index7	        = mp->target_av_split_valn_index7;
		target_av_split_valn_index8		    = mp->target_av_split_valn_index8;
        target_av_split_valn_index9   		= mp->target_av_split_valn_index9;
		target_av_split_valn_index10        = mp->target_av_split_valn_index10;
		target_av_split_valn_index11		= mp->target_av_split_valn_index11; 		
		av_if_array[0]      = mp->av_if_array[0];
		av_if_array[1]      = mp->av_if_array[1];
		av_if_array[2]      = mp->av_if_array[2];
		av_if_array[3]      = mp->av_if_array[3];
		av_if_array[4]      = mp->av_if_array[4];
		av_if_array[5]      = mp->av_if_array[5];
		av_if_array[6]      = mp->av_if_array[6];
		av_if_array[7]      = mp->av_if_array[7];
		av_if_array[8]      = mp->av_if_array[8];
		av_if_array[9]      = mp->av_if_array[9];
		av_if_array[10]     = mp->av_if_array[10];
		av_if_array[11]     = mp->av_if_array[11];
        av_split_prop_array[0] = mp->av_split_prop_array[0];
		av_split_prop_array[1] = mp->av_split_prop_array[1];
		av_split_prop_array[2] = mp->av_split_prop_array[2];
		av_split_prop_array[3] = mp->av_split_prop_array[3];
		av_split_prop_array[4] = mp->av_split_prop_array[4];
		av_split_prop_array[5] = mp->av_split_prop_array[5];
		av_split_prop_array[6] = mp->av_split_prop_array[6];
		av_split_prop_array[7] = mp->av_split_prop_array[7];
		av_split_prop_array[8] = mp->av_split_prop_array[8];
		av_split_prop_array[9] = mp->av_split_prop_array[9];
		av_split_prop_array[10] = mp->av_split_prop_array[10];
		av_split_prop_array[11] = mp->av_split_prop_array[11];
		gmab_valn				= mp->gmab_valn;
		gmdb_av_valn			= mp->gmdb_av_valn;
		gmdb_prem_valn			= mp->gmdb_prem_valn;
		gmib_ratchet_valn		= mp->gmib_ratchet_valn;
	    gmib_rollup_valn		= mp->gmib_rollup_valn;
		gmxb_chg_perc			= mp->gmxb_chg_perc;
		management_fee_perc		= mp->management_fee_perc;
		gmxb_ehc_charge			= mp->gmxb_ehc_charge;
		m_and_e_fee_perc		= mp->m_and_e_fee_perc;
		av_rebal_ind			= mp->av_rebal_ind;
		gmib_rollup_rate_at_valn= mp->gmib_rollup_rate_at_valn;
		ger_product_number		= mp->ger_product_number;
		ger_distribution_channel= mp->ger_distribution_channel;
		deferment_age			= mp->deferment_age;
		ger_prem_duration		= mp->ger_prem_duration;
		ger_prem_hedge_charge	= mp->ger_prem_hedge_charge;
		commission_acct			= mp->commission_acct;
		tax_layer				= mp->tax_layer;
		payt_freq				= mp->payt_freq;
		ger_prem_fixed_fee		= mp->ger_prem_fixed_fee;
		ger_gmib_fixed_fee		= mp->ger_gmib_fixed_fee;
		admin_fee_dollar		= mp->admin_fee_dollar;
		last_year_bonus			= mp->last_year_bonus;
		ger_riester_step_08		= mp->ger_riester_step_08;
		guaranteed_interest_rate		= mp->guaranteed_interest_rate;
		ger_prem_elapsed_months = mp->ger_prem_elapsed_months;
		ger_gpp					= mp->ger_gpp;
		riester_type			= mp->riester_type;
		ger_abrufphase			= mp->ger_abrufphase;
		ongoing_single_prem_ind = mp->ongoing_single_prem_ind;
		trim(ongoing_single_prem_ind);
		acqu_ch_t0				= mp-> acqu_ch_t0;
		acqu_ch_t1				= mp-> acqu_ch_t1;
		acqu_ch_t2				= mp-> acqu_ch_t2;
		acqu_ch_t3				= mp-> acqu_ch_t3;
		acqu_ch_t4				= mp-> acqu_ch_t4;
		acqu_ch_t5				= mp-> acqu_ch_t5;
		acqu_ch_t6				= mp-> acqu_ch_t6;
		acqu_ch_t7				= mp-> acqu_ch_t7;
		acqu_ch_t8				= mp-> acqu_ch_t8;
		acqu_ch_t9				= mp-> acqu_ch_t9;
		acqu_ch[0]				= mp-> acqu_ch[0];
		acqu_ch[1]				= mp-> acqu_ch[1];
		acqu_ch[2]				= mp-> acqu_ch[2];
		acqu_ch[3]				= mp-> acqu_ch[3];
		acqu_ch[4]				= mp-> acqu_ch[4];
		acqu_ch[5]				= mp-> acqu_ch[5];
		acqu_ch[6]				= mp-> acqu_ch[6];
		acqu_ch[7]				= mp-> acqu_ch[7];
		acqu_ch[8]				= mp-> acqu_ch[8];
		acqu_ch[9]				= mp-> acqu_ch[9];
		guaranteed_interest_rate_paidup          = mp-> guaranteed_interest_rate_paidup;
		dist_factor_sb          = mp-> dist_factor_sb;
		tot_prem                = mp-> tot_prem;
		av_add_inforce          = mp-> av_add_inforce;
		av_add					= mp-> av_add;
		//av_total_init			= mp->av_total_init;
		hc_add                  = mp-> hc_add;
		bb_add                  = mp-> bb_add;
		sum_prem_add            = mp-> sum_prem_add; //product 2010
		pay_status              = mp-> pay_status;
		prem_curr_ini           = mp-> prem_curr_ini;
		frequency_factor        = mp->frequency_factor;
		/*stat inforces*/
		realized_RRC			= mp->realized_RRC;
		admin_charges			= mp->admin_charges;
		up_front_g_c				= mp->up_front_g_c;
        //hc_paid_premium			= mp->hc_paid_premium; // product 2010
		hc_add_paid_premium		= mp->hc_add_paid_premium; // product 2010
		//staffel_hc_min			= mp->staffel_hc_min; // product 2010
		//staffel_hc_max			= mp->staffel_hc_max;
		hc_av_brutto            = mp->hc_av_brutto;//product 2010
		gmxb_g_c_gross          = mp->gmxb_g_c_gross;
		
		year_last_bonus			= mp->year_last_bonus;

		issue_date				= mp->issue_date;
		issue_day				= mp->issue_day;
		issue_month				= mp->issue_month;
		issue_year_inforce		= mp->issue_year_inforce;

		last_premium_date		= mp->last_premium_date;
		last_premium_day		= mp->last_premium_day;
		last_premium_month		= mp->last_premium_month;
		last_premium_year		= mp->last_premium_year;
		//ger_prem_duration *=(pay_status ==1);
		age_exact_issue = this->age_at_valn - this->duration_valn+10*SMALL_DOUBLE;
		if( this->duration_valn==0)
			elapsed_months = int(ceil((this->duration_valn)*12.));//Change for HE
		else
			elapsed_months = int(ceil((this->duration_valn-0.0001)*12.));//Change for HE

		prem_type		= "R";
		if (this->prem_curr_ini == 1)
			prem_type		= "S";

		elapsed_mths_in_valn_yr = elapsed_months % 12;
		ger_riester_month_bef_08 = (valn_year<2008)*(12-valn_month);
		elapsed_years = elapsed_months/12;

		ger_prem_admin_loading = 0.02*((int)ger_product_number==1)+0.035*((int)ger_product_number==2)+0.05*((int)ger_product_number==3);
		ger_min_invested_amount = 20.*((int)ger_product_number==1)+40.*((int)ger_product_number==2)+25.*((int)ger_product_number==3);
		prorata_first_year=(1.-elapsed_mths_in_valn_yr/12.);
		age_at_issue= (int)age_exact_issue;

		prem_curr_ini = prem_period_ini*payt_freq;
}

	void set_pv_index_shock_array(Scenario_configuration& scenario_config)
	{

		Model_Point::set_pv_index_shock_array(scenario_config);

		age_exact_issue = this->age_at_valn - this->duration_valn+10*SMALL_DOUBLE;

		if( this->duration_valn==0)
			elapsed_months = int (ceil((this->duration_valn)*12.));//Change for HE
		else
			elapsed_months = int(ceil((this->duration_valn-0.0001)*12.));//Change for HE


		elapsed_mths_in_valn_yr = elapsed_months % 12;
		ger_riester_month_bef_08 = (valn_year<2008)*(12-valn_month);
		elapsed_years = elapsed_months/12;

		ger_prem_admin_loading = 0.02*((int)ger_product_number==1)+0.035*((int)ger_product_number==2)+0.05*((int)ger_product_number==3);
		ger_min_invested_amount = 20.*((int)ger_product_number==1)+40.*((int)ger_product_number==2)+25.*((int)ger_product_number==3);
		prorata_first_year=(1.-elapsed_mths_in_valn_yr/12.);
		age_at_issue= (int)age_exact_issue;

	}

};

#endif
