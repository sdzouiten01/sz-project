#ifndef __PROJECTION_CHE_AB_DB_H_
#define __PROJECTION_CHE_AB_DB_H_
#include "stdafx.h"
#include "Projection.h"
#include "Projection_AB_DB.h"
#include "Normal.h"

class Projection_CHE_AB_DB : public Projection_AB_DB
{
public:
	Projection_CHE_AB_DB(int shock_size, int ** shock_array, const char* tables):
		Projection("CHE_ADB01", shock_size, shock_array, tables),
		Projection_AB_DB("CHE_ADB01", shock_size, shock_array, tables)
	{	
	}
	double dynamic_lapse_rate_axa(int t)
	{

		double itm = 0.0;
		int max_element;
		int pol_yr = int(main_proj_array[POL_YEAR][t]);
		double atm_for_lapses = 0.0;

		double years_to_maturity = 0.0;
		double correlation = 0.5;
		double vol_tot = 10.0;
		double F = 0.0;
		double disc_factor = 0.0;
		double short_rate_factor = 0.0;
		double price_call = 0.0;
		double vol_index = 0.0;
		double PV_of_guarantee = 0.0;
				
		vector<int> taxes_new_contract;
		taxes_new_contract.resize(1);
		taxes_new_contract[0] = 30.0;
		
		double volatility[] = {22.46, 23.73, 20.16, 6.9, 0.0, 3.7, 10.54, 6.0, 15.0, 15.0, 15.0, 15.0};
		
		if (t == 1) 
			main_proj_array[GMAB_IF][t-1] = gmab_rollup_valn;

		int fund_num;
		//fundmap::iterator fundmap_iterator;
		
		short_rate_factor = this->afmr[elapsed_mths_in_valn_yr_s() + 1] [t] [SUBACCT_NUM_FUNDS] / 100.0;
		main_proj_array[BOND_RATE_FOR_LAPSES][t] = short_rate_factor;// for audit-tool debugging purpose

		//for (fundmap_iterator = fund_map.begin(); fundmap_iterator != fund_map.end(); fundmap_iterator++)
		for(int i = 0; i<fund_map_size; i++)
		{
			//fund_num = fundmap_iterator->second; 
			fund_num = fund_map_2[i];
			
			// TODO - YANN - volatility to change
			vol_index += pow(volatility[fund_num - 1] / 100.0 , 2.0)* pow(av_split_prop_array[fund_num-1]/100.0, 2.0) ;
  			
		//	cout << "t " << t << " fund_num " << fund_num << " pow(this->volatility[fund_num - 1] / 100.0 , 2) " << pow(volatility[fund_num - 1] / 100.0 , 2) << endl;
		//	cout << "t " << t << " fund_num " << fund_num << " pow(av_split_prop_array[fund_num-1]/100.0, 2) " << pow(av_split_prop_array[fund_num-1]/100.0, 2) << endl;
		//	cout << "t " << t << " fund_num " << fund_num << " volatility[fund_num - 1] " << volatility[fund_num-1] << endl;
		//	cout << "t " << t << " fund_num " << fund_num << " av_split_prop_array[fund_num-1] " << av_split_prop_array[fund_num-1] << endl;
			
		//	cout << "t " << t << " fund_num " << fund_num << " vol_index " << vol_index << endl;
		}

  	
		vol_tot = pow(vol_index,0.5);
  		//cout  << "t " << t << " vol_index_tot " << vol_index << endl;
		years_to_maturity = gmab_period - main_proj_array[POL_YEAR][t] + 1;
		disc_factor = short_rate_factor * years_to_maturity;
		//cout << "t " << t << " years_to_maturity " << years_to_maturity << endl;
		//cout << "t " << t << " disc_factor " << disc_factor  << endl;
		
		if (years_to_maturity > 0.0)
		{
			F = main_proj_array[AV_B_BEF] [t][CALC_TOT_INDEX] * exp((short_rate_factor + log(1.0 - gmxb_g_c/100.0)) 
								 * years_to_maturity);
			
			//cout << "t " << t << " short_rate_factor " << short_rate_factor << endl;
			//cout << "t " << t << " av_b_bef " << main_proj_array[AV_B_BEF] [t][CALC_TOT_INDEX] << endl;
			//cout << "t " << t << " gmxb_g_c " << gmxb_g_c << endl;
			//cout << "t " << t << " years_to_maturity " << years_to_maturity << endl;
    
			double d1_local ;

			//cout << "t " << t << " F " << F << endl;	
			//cout << "t " << t << " gmab_if " << main_proj_array[GMAB_IF][t-1] << endl;
			//cout << "t " << t << " vol_tot " << vol_tot << endl;
	       
			if (main_proj_array[GMAB_IF][t-1] <= MOSES_SMALL_DOUBLE)
       			d1_local = 0.0;
			else
				d1_local = (log(F /main_proj_array[GMAB_IF][t-1]) + ((pow(vol_tot,2.0) / 2.0) * years_to_maturity))
					/ (vol_tot * pow(years_to_maturity, 0.5));

			double d2_local = d1_local - vol_tot * pow(years_to_maturity,0.5);


			//cout << "t " << t << " d1_local " << d1_local << endl;
			//cout << "t " << t << " d2_local " << d2_local << endl;
			// TODO - YANN - Coding pf the Standard Normal function 
			//moses Normal StdNorm(0,1);
			Normal StdNorm(0,1);
		
			double n1 = StdNorm.cumulativeDensity_2(d1_local);
			double n2 = StdNorm.cumulativeDensity_2(d2_local);

			price_call = exp(-disc_factor) * (F*n1 - main_proj_array[GMAB_IF][t-1]*n2);
		//	cout << "t " << t << " exp(-disc_factor) " << exp(-disc_factor) << endl;
		//	cout << "t " << t << " n1 " << n1 << endl;
		//	cout << "t " << t << " n2 " << n2 << endl;
			
		//	cout << "t " << t << " F*n1 - gmab_if*n2 " << F*n1 - main_proj_array[GMAB_IF][t-1]*n2 << endl;
		}
		else
		{
			price_call = max(F - main_proj_array[GMAB_IF][t-1],0.0) ;
 	//		cout << "t " << t << " price_call_2 " << price_call << endl;
		}

		// calcul PV of guarantee
		PV_of_guarantee = main_proj_array[GMAB_IF][t-1] * exp (-disc_factor);

		// Calcul ITM
		//moses double temp_pol_yr = min((int)(main_proj_array[POL_YEAR][t]),taxes_new_contract.size()-1);
		double temp_pol_yr = min((int)(main_proj_array[POL_YEAR][t]), (int)taxes_new_contract.size()-1);
		double tax_pct = taxes_new_contract[temp_pol_yr]/100.0;
		
		//cout<< "t " << t << " temp_pol_year " << temp_pol_yr << endl;
		//cout << "t " << t << " tax_pct " << tax_pct << endl;
		//double gmsb = prem_paid * gmsb_guarantee_level((int)(main_proj_array[POL_YEAR][t]))/100. * surv_cumul[t-1];
		//TO DO - work on gmsb_guarantee_level variant variable
		double gmsb;
		//cout << "t " << t << " surv_cumul[t-1] " << surv_cumul[t-1] << endl;
		//cout << "t " << t << " prem paid " << prem_paid << endl;
		//cout << "t " <<  t << " main_proj_array[POL_YEAR][t] " << main_proj_array[POL_YEAR][t] << endl;
		//che abd05
		if (t== 6 || t ==7 || t ==8 || t ==9 || t ==10)
			gmsb_guarantee_level = 102.50;
		else
			gmsb_guarantee_level = 0.0;//che adb10
		
		gmsb = prem_paid * gmsb_guarantee_level/100. * surv_cumul[t-1];
		
		//cout << "t " << t << " gmsb_guarantee_level " << gmsb_guarantee_level << endl;
		//cout << "t " << t << " gmsb " <<  gmsb << endl;

		//che adb10
		//gmsb = 0.0;
		//cout << "t " << t << " MOSES_SMALL_DOUBLE_0 " << MOSES_SMALL_DOUBLE << endl;
		//cout << "t " << t << " PV_of_guarantee_0 " << PV_of_guarantee << endl;
		//cout << "t " << t << " price_call_1_2 " << price_call << endl;
		if ((PV_of_guarantee + price_call)< MOSES_SMALL_DOUBLE)
		{
			itm = 0.0;	
			//cout << "t " << t << " itm_0 " << setprecision(15) << itm << endl;
		}

		else
		{
			if (years_to_maturity > 5.0)
			{
				itm = (((1.0-tax_pct)* max(main_proj_array[AV_B_BEF] [t][CALC_TOT_INDEX], gmsb)) / (PV_of_guarantee + price_call))* 100.0;	
				//cout << "t " << t << " itm_1 " << setprecision(15) << itm << endl;
			}
			else 
			{
				itm = (max(main_proj_array[AV_B_BEF] [t][CALC_TOT_INDEX], gmsb) / (PV_of_guarantee + price_call))*100.0 ;
				//cout << "t " << t << " itm_2 " << setprecision(15) << itm << endl;
			}
		
		}
		//cout << "t " << t << " itm_test " << (max(main_proj_array[AV_B_BEF] [t][CALC_TOT_INDEX], gmsb) / (PV_of_guarantee + price_call))*100.0 << endl;
		//cout << "t " << t << " main_proj_array[AV_B_BEF] [t][CALC_TOT_INDEX] " << main_proj_array[AV_B_BEF] [t][CALC_TOT_INDEX] << endl;

		main_proj_array[ITM][t] = itm;	
		
		//Calcul dynamic lapse function 
		double lapse_function = this->i_factor[int(itm)];//itm_factor_table(itm, "rational");
		
		//TO DO - work on itm_factor_table guarantee variable
		//double lapse_function;

		//cout << "t " << t << " lapse_function " << lapse_function << endl;
		// calcul lapse rates
		//moses double lapse_rate_base = lapse_rates(pol_yr);
		double lapse_rate_base  = l_r[(int)pol_yr];

		//if (t == 3) 
		//	getchar();
		// moses return max(lapse_min_pa_perc()/100., min (lapse_max_pa_perc /100.,(lapse_rate_base + lapse_function) /100.));
		return max(l_min_pa_p[1]/100., min (l_max_pa_p[1]/100., (lapse_rate_base + lapse_function) /100.));

	};

	double specific_fees_by_product(int t) 
	{
   		if (t == 1) 
			return gmdb_ratchet_valn * gmxb_a_c/100.;
  		else 
			return main_proj_array[GMDB_IF][t-1] * gmxb_a_c/100.;
	};

};
#endif

