#pragma once
#include "stdafx.h"
#include "Projection classes/Guarantee projection classes/Projection.h"
#include "Projection classes/Guarantee projection classes/Projection_WB.h"
#include "Model point classes/Country model point classes/Model_Point_BEL_WB.h"

using namespace std;

class Projection_BEL_WB_DB : public Projection_WB_DB
{
	public:

		double taxes_new_contract; 
		GMXB_Assumption_Table *surr_chg_perc;
		GMXB_Assumption_Table  *gmwb_max_annual_wdl_pct_table;
	
		GMXB_Assumption_Table  *twin_V1_gmwb_max_annual_wdl_pct_table;
		GMXB_Assumption_Table  *twin_V2_gmwb_max_annual_wdl_pct_table;
		GMXB_Assumption_Table  *twin_V2BIS_gmwb_max_annual_wdl_pct_table;
		

		double irrational_lapse_threshold;
		double rational_lapse_threshold;
		double irrational_lapse_slope;
		double rational_lapse_slope;
		double irrational_lapse_intercept;
		double rational_lapse_intercept;
		double rational_lapse_dyn_profile_split;
		double irrational_lapse_dyn_profile_split;
		double l_min_pa_perc;
		double l_max_pa_perc;
		double irrational_index[SUBACCT_MAX_PERIOD + 1];
		double rational_index[SUBACCT_MAX_PERIOD + 1];

		string date_additionnal_premium;
		string add_prem;
		double additionnal_premium;
		string gmwb_wdl_rate_source;
		int gmwb_wdl_freq;



	Projection_BEL_WB_DB(const vector<vector <int>>& i_s_a,const vector<vector <int>>& f_s_a, 
						const char* tables, bool generate_dbg_files, const string& dbg_file_path,
						const int t_high_shorter, bool l_longevity_tables, int time_step):
		Projection(i_s_a, f_s_a, tables, generate_dbg_files, dbg_file_path, t_high_shorter, l_longevity_tables, time_step),
		Projection_WB_DB(i_s_a, f_s_a, tables, generate_dbg_files, dbg_file_path, t_high_shorter, l_longevity_tables, time_step)
	{
		taxes_new_contract = atof(this->assump_WB->search("taxes_new_contract").c_str());
		surr_chg_perc = new GMXB_Assumption_Table(tables , "surr_chg_perc");
		
		
		// gmwb_max_annual_wdl_pct_table = new GMXB_Assumption_Table(tables ,"gmwb_max_annual_wdl_pct_table");
		
		twin_V1_gmwb_max_annual_wdl_pct_table = new GMXB_Assumption_Table(tables ,"V1_gmwb_max_annual_wdl_pct");
		twin_V2_gmwb_max_annual_wdl_pct_table = new GMXB_Assumption_Table(tables ,"V2_gmwb_max_annual_wdl_pct");
		twin_V2BIS_gmwb_max_annual_wdl_pct_table = new GMXB_Assumption_Table(tables ,"V2BIS_gmwb_max_annual_wdl_pct");


		
		l_min_pa_perc = atof(this->assump->search("lapse_min_pa_perc").c_str());
		l_max_pa_perc = atof(this->assump->search("lapse_max_pa_perc").c_str());

		irrational_lapse_threshold = atof(this->assump_WB->search("irrational_lapse_threshold").c_str());
		rational_lapse_threshold = atof(this->assump_WB->search("rational_lapse_threshold").c_str());

		irrational_lapse_slope = atof(this->assump_WB->search("irrational_lapse_slope").c_str());
		rational_lapse_slope = atof(this->assump_WB->search("rational_lapse_slope").c_str());

		irrational_lapse_intercept = atof(this->assump_WB->search("irrational_lapse_intercept").c_str());
		rational_lapse_intercept = atof(this->assump_WB->search("rational_lapse_intercept").c_str());

		irrational_lapse_dyn_profile_split = atof(this->assump_WB->search("irrational_lapse_dyn_profile_split").c_str());
		rational_lapse_dyn_profile_split = atof(this->assump_WB->search("rational_lapse_dyn_profile_split").c_str());
		gmwb_wdl_rate_source = this->assump_WB->search("gmwb_wdl_rate_source");
	}

	~Projection_BEL_WB_DB()
	{
		delete this->surr_chg_perc;
		//delete this->gmwb_max_annual_wdl_pct_table;
		delete this->twin_V1_gmwb_max_annual_wdl_pct_table;
		delete this->twin_V2_gmwb_max_annual_wdl_pct_table;
		delete this->twin_V2BIS_gmwb_max_annual_wdl_pct_table;
	}

	void set_current_model_point(Model_Point *mp)
	{
		
		// Set additionnal premium date as well as 
		// additional premium
		Model_Point_BEL_WB *bel_model_point = dynamic_cast<Model_Point_BEL_WB *> (mp);
		
		this->gmwb_wdl_freq = bel_model_point->gmwb_wdl_freq;
		Projection_WB::set_current_model_point(mp);
		if (bel_model_point->additional_premium.length() > 0)
		{
			istringstream additional_premium_streamed;
			additional_premium_streamed.str(bel_model_point->additional_premium);
			getline(additional_premium_streamed, this->date_additionnal_premium, ';');
			getline(additional_premium_streamed, this->add_prem, ';');
			this->additionnal_premium = atof(this->add_prem.c_str());
		}
		else
		{
			this->date_additionnal_premium = "";
			this->add_prem = "";
		}

		if (this->model_point->gmxb_type2 == "TWIN_V01")
		{
			this->gmwb_max_annual_wdl_pct_table = twin_V1_gmwb_max_annual_wdl_pct_table;
		}
		else if (this->model_point->gmxb_type2 == "TWIN_V02")
		{
			this->gmwb_max_annual_wdl_pct_table = twin_V2_gmwb_max_annual_wdl_pct_table;
		}
		else if (this->model_point->gmxb_type2 == "TWIN_V2BIS")
		{
			this->gmwb_max_annual_wdl_pct_table = twin_V2BIS_gmwb_max_annual_wdl_pct_table;
		}
		else
		{
			// raise an exception
			char message[MAX_LENGTH_MESSAGE_EXCEPTION];
			sprintf_s(message, "The gmxb_type2 parameter should be either TWIN_V01, TWIN_V02 or TWIN_V2BIS");
			throw new GMXBException(message);		
		}
	}

	double dynamic_lapse_rate_axa(int t) 
	{	
		int pol_yr = int(this->timing_items[t][POL_YEAR]);
		double surr_chg_pct = 0.0;
		double tax_pct = 0.0;
		double govt_rate = 0.0;
	
		if (t==1)
			this->main_proj_array[t][GMWB_IF] = max(this->model_point->gmwb_rollup_valn, this->model_point->gmwb_ratchet_valn);

		else
			this->main_proj_array[t][GMWB_IF] = this->main_proj_array[t-1][GMWB_IF];

			
		pol_yr = min(int(this->timing_items[t][POL_YEAR]), 0);
		surr_chg_pct = surr_chg_perc->search(int(this->timing_items[t][POL_YEAR]), 1) /100.;
		tax_pct = this->taxes_new_contract / 100.;
		govt_rate = this->afmr[this->model_point->elapsed_mths_in_valn_yr + 1][t][MAXIMUM_NUMBER_OF_INDEXES]/100.0;
		
		this->main_proj_array[t][BOND_RATE_FOR_LAPSES]= govt_rate;

		double deferred_benefit_base = 0.0;
		double deferred_av_bef_8yr = 0.0;
		double deferred_av_aft_8yr = 0.0;
		double immediate_benefit_base = 0.0;
		double immediate_av = 0.0;	
		double wdwl_rate = 0.0;

		if (main_proj_array[t][AV_E_BEF]> SMALL_DOUBLE)
			
			wdwl_rate = min(1.0,wdwl_rate_bel(t)/100.0);
		else
			wdwl_rate = 0.0;

		int wdwl_stage = 0;

		if (int(timing_items[t][POL_YEAR])> int(this->model_point->gmxb_deferral_period))
			wdwl_stage = 1;
	
		double av_aft_wdwl = (this->main_proj_array[t][AV_E_BEF] - wdwl_stage 
												* this->main_proj_array[t][GMWB_IF] * wdwl_rate);
	
		double surv_prem_paid = 0.0;
	
		if (t == 1)
			surv_prem_paid = this->model_point->prem_paid;
		else 
			surv_prem_paid = this->model_point->prem_paid * this->surv_cumul[t-1];  
	
		deferred_av_aft_8yr	= max(av_aft_wdwl , 0);		  		 			   		
		deferred_av_bef_8yr = deferred_av_aft_8yr * (1. - surr_chg_pct)
						- tax_pct * max( deferred_av_aft_8yr * (1. - surr_chg_pct) - surv_prem_paid,0);


		// trace << "t "  << t <<  " deferred_av_aft_8yr "  << deferred_av_aft_8yr << endl;
		// trace << "t "  << t <<  " deferred_av_bef_8yr "  << deferred_av_bef_8yr << endl;
	
		int ratchet_indicator = 0;
		if( (gmwb_ratchet_area =="Payout_period")&&(int(this->timing_items[t][POL_YEAR])>= int(this->model_point->gmxb_deferral_period)) )
		ratchet_indicator = 1;

		if ((ratchet_indicator == 1)&&(((int)this->timing_items[t][POL_YEAR] - (int)this->model_point->gmxb_deferral_period)%(int)this->model_point->gmwb_ratchet_period == 0))
			deferred_benefit_base = max(this->main_proj_array[t][GMWB_IF], this->main_proj_array[t][AV_E_BEF] - wdwl_stage * this->main_proj_array[t][GMWB_IF]* wdwl_rate);
		else	
			deferred_benefit_base = this->main_proj_array[t][GMWB_IF] ;
	
		if(int(this->model_point->gmxb_deferral_period) == 0)
			immediate_benefit_base = deferred_benefit_base - tax_pct * (deferred_benefit_base - surv_prem_paid) ;
		else 
			immediate_benefit_base = deferred_benefit_base;


		// trace << "t "  << t <<  " tax_pct "  << tax_pct << endl;
		// trace << "t "  << t <<  " surv_prem_paid "  << surv_prem_paid << endl;


		// trace << "t "  << t <<  " deferred_benefit_base "  << deferred_benefit_base << endl;
		// trace << "t "  << t <<  " immediate_benefit_base "  << immediate_benefit_base << endl;


	
		pol_yr = int(timing_items[t][POL_YEAR]);
		immediate_av 	= av_aft_wdwl * (1. - surr_chg_pct)
					- tax_pct * max(av_aft_wdwl * (1. - surr_chg_pct)- surv_prem_paid * (1 - pol_yr * wdwl_rate),0);
		
		double itm = 0.0;
		if( this->model_point->gmxb_deferral_period < SMALL_DOUBLE)
		{
			if(immediate_benefit_base > SMALL_DOUBLE)
				itm = (immediate_av * (1 - tax_pct) * govt_rate) / (immediate_benefit_base * wdwl_rate);
			else 
				itm = 1.0;	
		}
		
		else if(deferred_benefit_base > SMALL_DOUBLE)
		{	
			if (int(timing_items[t][POL_YEAR]) >= 8) 
				itm = (deferred_av_aft_8yr * (1. - tax_pct) * govt_rate) / (deferred_benefit_base * wdwl_rate);
			else
				itm = (deferred_av_bef_8yr * (1. - tax_pct) * govt_rate) / (deferred_benefit_base * wdwl_rate);
		}
		else
			itm = 1.0;
	
		double rat_rate = 0.0;
		double irr_rate = 0.0;
		double lapse_rate = 0.0;
	
		if (itm < this->rational_lapse_threshold / 100.)
			rat_rate = this->l_min_pa_perc / 100.;
		else	
		{	
			rat_rate = this->rational_lapse_slope/100. * itm + this->rational_lapse_intercept/100.;
			rat_rate = max(this->l_min_pa_perc / 100., min(this->l_max_pa_perc / 100.,rat_rate));
		}
	
		if (itm < this->irrational_lapse_threshold/ 100.)
			rat_rate = this->l_min_pa_perc / 100.;
		else	
		{	
			irr_rate = this->irrational_lapse_slope/100. * itm + this->irrational_lapse_intercept/100.;
			irr_rate = max(this->l_min_pa_perc / 100., min(this->l_max_pa_perc / 100.,irr_rate));
		}
	
		if (t == 1)
		{
			irrational_index[0] = this->irrational_lapse_dyn_profile_split;
			rational_index[0] = this->rational_lapse_dyn_profile_split;

			for (int i = 2; i <= SUBACCT_MAX_PERIOD; i++)
			{
				rational_index[i] = 0.0;
				irrational_index[i] = 0.0;
			}		
		}

		double denom = rational_index[t-1] * (1 - rat_rate) + irrational_index[t-1] * (1- irr_rate);
		if (denom > SMALL_DOUBLE)
		{	
			rational_index[t] = rational_index[t-1] * (1 - rat_rate) / denom;
			irrational_index[t] = irrational_index[t-1] * (1 - irr_rate) / denom;
		}
		else
		{
			rational_index[t] = 0.0;
			irrational_index[t] = 0.0;
		}
		lapse_rate = rat_rate * rational_index[t-1] + irr_rate * irrational_index[t-1];
		return max(this->l_min_pa_perc/100., min (this->l_max_pa_perc/100.,lapse_rate));
	}


	void gmwb_specific_end_claims_calculation(int t)
	{

		this->main_proj_array[t][GMWB_PAYMENT] = prorata_wdl(t) * (wdwl_rate_bel(t)/ 100.) 
																* this->main_proj_array[t][GMWB_IF];
		this->main_proj_array[t][GMWB_CLAIMS] = max(0.0, this->main_proj_array[t][GMWB_PAYMENT] - 
																	this->main_proj_array[t][AV_E_BEF_CLAIMS]);
	}

	void calculate_ratchet_base_end_period(int t)
	{
		double surv_month = this->surv_mth_calc(t);

		if (ratchet_period_indicator == DEF_RATCHET_YR)	   
			main_proj_array[t][GMWB_AV_IF] = max(main_proj_array[t][AV_E_BEF_CLAIMS], main_proj_array[t][GMWB_AV_IF]);		   
		else if (ratchet_period_indicator == PAYOUT_RATCHET_YR)
		{

			if ((this->timing_items[t][POL_YEAR] == 5) && (this->model_point->gmxb_deferral_period == 0) 
									&& this->add_prem.length() > 0)
			{
	   	    	main_proj_array[t][GMWB_AV_IF] = max(main_proj_array[t][AV_E_BEF_CLAIMS]
												- this->main_proj_array[t][GMWB_PAYMENT] , 
													main_proj_array[t][GMWB_AV_IF]  + this->additionnal_premium * this->surv_cumul[t]);
			}
			else
			{
				if (this->withdrawal_prorata == 1)
				{
					main_proj_array[t][GMWB_AV_IF] = max(main_proj_array[t][AV_E_BEF_CLAIMS] - this->timing_items[t][PRORATA]
						* this->main_proj_array[t][GMWB_PAYMENT],main_proj_array[t][GMWB_AV_IF]);
				}
				else
				{
					main_proj_array[t][GMWB_AV_IF] = max(main_proj_array[t][AV_E_BEF_CLAIMS] -  this->main_proj_array[t][GMWB_PAYMENT],
								main_proj_array[t][GMWB_AV_IF]);
				}
			}
		}
		this->main_proj_array[t][GMWB_IF] = max(main_proj_array[t][GMWB_AV_IF], main_proj_array[t][GMWB_PREM_IF]);
	}

	void project_gmdb_bases_payments_claims(int t)
	{
		double gmdb_rollup_prev; 
		double gmdb_ratchet_prev;
		double premium = this->regular_premium_calculation(t);

		double gmdb_dur = this->model_point->gmxb_deferral_period + 10.0;
	
		if (this->gmdb_rollup_rate_source == Projection_DB::DATA_FILE)
			this->gmdb_rollup_rate = this->model_point->axa_roll_r;
			
		if (t == 1) 
		{//from data
			gmdb_rollup_prev = model_point->gmdb_rollup_valn;     
			gmdb_ratchet_prev = model_point->gmdb_ratchet_valn;
		}
		else
		{
			gmdb_ratchet_prev = main_proj_array[t-1][GMDB_AV_IF];
			if (this->gmdb_av_type == Projection_DB::DB_RATCHET)
				gmdb_rollup_prev = main_proj_array[t-1][GMDB_PREM_IF];
			else
				gmdb_rollup_prev  = main_proj_array[t-1][GMDB_IF]; 
		}

		//1.DB BASES ------------------------------------------------------------------------------------------------
		if (this->timing_items[t][POL_YEAR] > min(gmdb_dur, product_charging_duration_s()))
		{
			main_proj_array[t][GMDB_IF_BEF] = 0.0;
			main_proj_array[t][GMDB_PREM_IF_BEF] = 0.0;
			main_proj_array[t][GMDB_AV_IF_BEF] = 0.0;	
			main_proj_array[t][GMDB_PREM_IF] = 0.0;
			main_proj_array[t][GMDB_AV_IF] = 0.0;
			main_proj_array[t][GMDB_IF] = 0.0;	
		}
		else 
		{			
		//1.1.ROLLUPBASE -------------------------------------------------------------------------------------------   
			double gmdb_vested_base = 0.0;  

			if (this->gmdb_rollup_type == Projection_DB::DB_ROLLUP_LINEAR) 
				gmdb_vested_base = (model_point->prem_paid + premium) * surv_cumul[t-1];
			else if (this->gmdb_rollup_type == Projection_DB::DB_ROLLUP_COMPOUND)
				gmdb_vested_base = gmdb_rollup_prev + premium * surv_cumul[t-1];
		    
			if (this->timing_items[t][POL_YEAR] <= min(model_point->gmxb_deferral_period, this->gmdb_max_bonus_term)) 
    			main_proj_array[t][GMDB_PREM_IF_BEF] = gmdb_rollup_prev + premium + gmdb_vested_base * this->gmdb_rollup_rate / 100.;
			else
    			main_proj_array[t][GMDB_PREM_IF_BEF] = gmdb_rollup_prev + premium;
		      
		    	
			main_proj_array[t][GMDB_IF_BEF] = main_proj_array[t][GMDB_PREM_IF_BEF];
			
			double surv_mth = this->surv_mth_calc(t);
			 		
			//1.3.BASES AFTER DECREMENTS---------------------------------------------------------------------------------
			main_proj_array[t][GMDB_AV_IF] = main_proj_array[t][GMDB_AV_IF_BEF] * surv_mth  ; 
			main_proj_array[t][GMDB_PREM_IF] = main_proj_array[t][GMDB_PREM_IF_BEF] * surv_mth  ;
			
			main_proj_array[t][GMDB_IF]  = main_proj_array[t][GMDB_IF_BEF] * surv_mth ; 

    		if (this->gmdb_impact_of_gmwb == Projection_DB::IMPACT_DOLLAR)
    		{
				// modification faite par ahmed - a checker - HE_YANN
				main_proj_array[t][GMDB_AV_IF]  = max(0, main_proj_array[t][GMDB_AV_IF] - main_proj_array[t][GMWB_PAYMENT] /* * this->timing_items[t][PRORATA]*/) ; 
				main_proj_array[t][GMDB_PREM_IF]  = max(0, main_proj_array[t][GMDB_PREM_IF] - main_proj_array[t][GMWB_PAYMENT] /** this->timing_items[t][PRORATA]*/) ; 
				main_proj_array[t][GMDB_IF]  = max(0, main_proj_array[t][GMDB_IF] - main_proj_array[t][GMWB_PAYMENT] /* * this->timing_items[t][PRORATA]*/) ; 			
			}
			else if (this->gmdb_impact_of_gmwb == Projection_DB::IMPACT_PRORATA)
				if (this->main_proj_array[t][AV_B_BEF] > SMALL_DOUBLE)
				{
					main_proj_array[t][GMDB_AV_IF]  = max(0, main_proj_array[t][GMDB_AV_IF] *( 1.0 - main_proj_array[t][GMWB_PAYMENT] * this->timing_items[t][PRORATA] / this->main_proj_array[t][AV_B_BEF]));
					main_proj_array[t][GMDB_PREM_IF]  = max(0, main_proj_array[t][GMDB_PREM_IF] *( 1.0 - main_proj_array[t][GMWB_PAYMENT] * this->timing_items[t][PRORATA] / this->main_proj_array[t][AV_B_BEF]));
					main_proj_array[t][GMDB_IF]  = max(0, main_proj_array[t][GMDB_IF] *( 1.0 - main_proj_array[t][GMWB_PAYMENT] * this->timing_items[t][PRORATA] / this->main_proj_array[t][AV_B_BEF]));			
				}				
				else
				{
					main_proj_array[t][GMDB_AV_IF] = max(0, main_proj_array[t][GMDB_AV_IF]);
					main_proj_array[t][GMDB_PREM_IF] = max(0, main_proj_array[t][GMDB_PREM_IF]);
					main_proj_array[t][GMDB_IF] = max(0, main_proj_array[t][GMDB_IF]);
				}

			}//END DB BASE CALCS	

		//2.DB CLAIMS -----------------------------------------------------------------------------------------------
		if ((int)(this->timing_items[t][POL_YEAR])> 
			min(gmdb_dur, product_charging_duration_s()))
		{			
			main_proj_array[t][GMDB_CLAIMS] = 0.0;
		}
		else
			{
				main_proj_array[t][GMDB_CLAIMS] = max(0.0, main_proj_array[t][GMDB_IF_BEF] - main_proj_array[t][AV_E_BEF])* main_proj_array[t][DEATH_RATE];
				if (this->correct_med_db == "N")//to be deleted once correction is ok on prod
				{
					main_proj_array[t][GMDB_CLAIMS] = max(0.0, gmdb_rollup_prev - main_proj_array[t][AV_E_BEF])* main_proj_array[t][DEATH_RATE];
				}
			}
	}

	void project_t(int t, double **pvs, int curr_shock_nb, double lapse_mult, 
							double mortality_mult, bool shock_av)
	{
		this->avBBef(t);
		if (shock_av)
		{
			if(t==1)
				this->delta_shock(t);
		}
		this->project_gmwb_payments_claims_beg(t);
		this->avBBefBis(t);
		this->avB(t);
		this->avEBef(t);
		this->init_rates(t, lapse_mult, mortality_mult);
		this->avEBefClaims(t);
		this->project_gmwb_bases_payments_claims(t);
		this->avE(t);
		if (this->model_point->gmxb_type2 == "TWIN_V02" || this->model_point->gmxb_type2 == "TWIN_V2BIS")
			this->project_gmdb_bases_payments_claims(t);
		this->finish_t(t);
		this->populate_pvs(t,pvs, curr_shock_nb);
	}


double wdwl_rate_bel(int t)
{
	double wdwl_rate = 0.0;		
		
		if ((gmwb_wdl_rate_source == "DATA_FILE") & (model_point->gmwb_wdl_rate!=0))
		{
			wdwl_rate = model_point->gmwb_wdl_rate;		
		}
		else if ((gmwb_wdl_rate_source == "UDI") || (model_point->gmwb_wdl_rate==0))
		{
			wdwl_rate = this->gmwb_max_annual_wdl_pct_table->search((int)this->model_point->age_election_ddf_calculated, 1);
		}
		else
		{
			char message[MAX_LENGTH_MESSAGE_EXCEPTION];
			sprintf_s(message, "The field gmwb_wdl_rate_source must be setted to UDI or DATA_FILE");
			throw new GMXBException(message);	
		}
		
	return wdwl_rate; 	
}	
		
	
double prorata_wdl(int t)
{
		double prorata_wdl;

		if (t==1)
			prorata_wdl = 1 - ((int)((this->model_point->duration - (int)this->model_point->duration)*bel_wdl_freq(t))/bel_wdl_freq(t)) ;
		else 
			prorata_wdl = 1;

		return prorata_wdl;
}


double bel_wdl_freq(int t)
{
		double bel_wdl_freq;

		if (this->gmwb_wdl_freq != 0)
			bel_wdl_freq = this->gmwb_wdl_freq;
		else 
			bel_wdl_freq = 12;

		return bel_wdl_freq;
}
};
